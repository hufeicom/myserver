/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue-next */ \"./node_modules/vue-next/packages/vue/dist/vue.esm-browser.js\");\n\r\n\r\nconst App = {\r\n    data:{\r\n        // time: Date.now()\r\n    },\r\n    setup(){\r\n        const time=Object(vue_next__WEBPACK_IMPORTED_MODULE_0__[\"value\"])(new Date)\r\n        onMounted(()=>{\r\n            setInterval(()=>{\r\n                time = new Date\r\n            }, 800)\r\n        })\r\n        return {\r\n            time\r\n        }\r\n    }\r\n\r\n}\r\nvue_next__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createApp().mount(App, '#app')\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/vue-next/packages/vue/dist/vue.esm-browser.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-next/packages/vue/dist/vue.esm-browser.js ***!
  \********************************************************************/
/*! exports provided: Comment, Fragment, PatchFlags, Portal, ShapeFlags, Suspense, Text, callWithAsyncErrorHandling, callWithErrorHandling, camelize, capitalize, cloneVNode, compile, computed, createApp, createBlock, createCommentVNode, createComponent, createRenderer, createSlots, createTextVNode, createVNode, effect, getCurrentInstance, h, handleError, inject, instanceWatch, isReactive, isReadonly, isRef, markNonReactive, markReadonly, mergeProps, nextTick, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onUnmounted, onUpdated, openBlock, provide, reactive, readonly, recordEffect, ref, registerRuntimeCompiler, render, renderList, renderSlot, resolveComponent, resolveDirective, resolveDynamicComponent, setBlockTracking, toHandlers, toRaw, toRefs, toString, vModelCheckbox, vModelDynamic, vModelRadio, vModelSelect, vModelText, version, warn, watch, withDirectives, withKeys, withModifiers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Comment\", function() { return Comment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Fragment\", function() { return Fragment; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PatchFlags\", function() { return PublicPatchFlags; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Portal\", function() { return Portal; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShapeFlags\", function() { return PublicShapeFlags; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Suspense\", function() { return Suspense; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Text\", function() { return Text; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"callWithAsyncErrorHandling\", function() { return callWithAsyncErrorHandling; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"callWithErrorHandling\", function() { return callWithErrorHandling; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"camelize\", function() { return camelize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"capitalize\", function() { return capitalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cloneVNode\", function() { return cloneVNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"compile\", function() { return compileToFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"computed\", function() { return computed$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createApp\", function() { return createApp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createBlock\", function() { return createBlock; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createCommentVNode\", function() { return createCommentVNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createComponent\", function() { return createComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createRenderer\", function() { return createRenderer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createSlots\", function() { return createSlots; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createTextVNode\", function() { return createTextVNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createVNode\", function() { return createVNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"effect\", function() { return effect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCurrentInstance\", function() { return getCurrentInstance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return h; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"handleError\", function() { return handleError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"inject\", function() { return inject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"instanceWatch\", function() { return instanceWatch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isReactive\", function() { return isReactive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isReadonly\", function() { return isReadonly; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isRef\", function() { return isRef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"markNonReactive\", function() { return markNonReactive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"markReadonly\", function() { return markReadonly; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mergeProps\", function() { return mergeProps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nextTick\", function() { return nextTick; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onBeforeMount\", function() { return onBeforeMount; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onBeforeUnmount\", function() { return onBeforeUnmount; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onBeforeUpdate\", function() { return onBeforeUpdate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onErrorCaptured\", function() { return onErrorCaptured; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onMounted\", function() { return onMounted; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onRenderTracked\", function() { return onRenderTracked; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onRenderTriggered\", function() { return onRenderTriggered; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onUnmounted\", function() { return onUnmounted; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onUpdated\", function() { return onUpdated; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"openBlock\", function() { return openBlock; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"provide\", function() { return provide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"reactive\", function() { return reactive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"readonly\", function() { return readonly; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"recordEffect\", function() { return recordEffect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ref\", function() { return ref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registerRuntimeCompiler\", function() { return registerRuntimeCompiler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderList\", function() { return renderList; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"renderSlot\", function() { return renderSlot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resolveComponent\", function() { return resolveComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resolveDirective\", function() { return resolveDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resolveDynamicComponent\", function() { return resolveDynamicComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setBlockTracking\", function() { return setBlockTracking; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toHandlers\", function() { return toHandlers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toRaw\", function() { return toRaw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toRefs\", function() { return toRefs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toString\", function() { return toString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vModelCheckbox\", function() { return vModelCheckbox; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vModelDynamic\", function() { return vModelDynamic; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vModelRadio\", function() { return vModelRadio; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vModelSelect\", function() { return vModelSelect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vModelText\", function() { return vModelText; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"version\", function() { return version; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"warn\", function() { return warn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"watch\", function() { return watch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withDirectives\", function() { return withDirectives; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withKeys\", function() { return withKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withModifiers\", function() { return withModifiers; });\n// Patch flags are optimization hints generated by the compiler.\r\n// when a block with dynamicChildren is encountered during diff, the algorithm\r\n// enters \"optimized mode\". In this mode, we know that the vdom is produced by\r\n// a render function generated by the compiler, so the algorithm only needs to\r\n// handle updates explicitly marked by these patch flags.\r\n// runtime object for public consumption\r\nconst PublicPatchFlags = {\r\n    TEXT: 1 /* TEXT */,\r\n    CLASS: 2 /* CLASS */,\r\n    STYLE: 4 /* STYLE */,\r\n    PROPS: 8 /* PROPS */,\r\n    NEED_PATCH: 32 /* NEED_PATCH */,\r\n    FULL_PROPS: 16 /* FULL_PROPS */,\r\n    KEYED_FRAGMENT: 64 /* KEYED_FRAGMENT */,\r\n    UNKEYED_FRAGMENT: 128 /* UNKEYED_FRAGMENT */,\r\n    DYNAMIC_SLOTS: 256 /* DYNAMIC_SLOTS */,\r\n    BAIL: -1 /* BAIL */\r\n};\r\n// dev only flag -> name mapping\r\nconst PatchFlagNames = {\r\n    [1 /* TEXT */]: `TEXT`,\r\n    [2 /* CLASS */]: `CLASS`,\r\n    [4 /* STYLE */]: `STYLE`,\r\n    [8 /* PROPS */]: `PROPS`,\r\n    [32 /* NEED_PATCH */]: `NEED_PATCH`,\r\n    [16 /* FULL_PROPS */]: `FULL_PROPS`,\r\n    [64 /* KEYED_FRAGMENT */]: `KEYED_FRAGMENT`,\r\n    [128 /* UNKEYED_FRAGMENT */]: `UNKEYED_FRAGMENT`,\r\n    [256 /* DYNAMIC_SLOTS */]: `DYNAMIC_SLOTS`,\r\n    [-1 /* BAIL */]: `BAIL`\r\n};\n\n// Make a map and return a function for checking if a key\r\n// is in that map.\r\n//\r\n// IMPORTANT: all calls of this function must be prefixed with /*#__PURE__*/\r\n// So that rollup can tree-shake them if necessary.\r\nfunction makeMap(str, expectsLowerCase) {\r\n    const map = Object.create(null);\r\n    const list = str.split(',');\r\n    for (let i = 0; i < list.length; i++) {\r\n        map[list[i]] = true;\r\n    }\r\n    return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val];\r\n}\n\nconst GLOBALS_WHITE_LISTED = 'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,' +\r\n    'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,' +\r\n    'Object,Boolean,String,RegExp,Map,Set,JSON,Intl';\r\nconst isGloballyWhitelisted = /*#__PURE__*/ makeMap(GLOBALS_WHITE_LISTED);\n\nconst EMPTY_OBJ =  Object.freeze({})\r\n    ;\r\nconst EMPTY_ARR = [];\r\nconst NOOP = () => { };\r\n/**\r\n * Always return false.\r\n */\r\nconst NO = () => false;\r\nconst isOn = (key) => key[0] === 'o' && key[1] === 'n';\r\nconst extend = (a, b) => {\r\n    for (const key in b) {\r\n        a[key] = b[key];\r\n    }\r\n    return a;\r\n};\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\nconst hasOwn = (val, key) => hasOwnProperty.call(val, key);\r\nconst isArray = Array.isArray;\r\nconst isFunction = (val) => typeof val === 'function';\r\nconst isString = (val) => typeof val === 'string';\r\nconst isSymbol = (val) => typeof val === 'symbol';\r\nconst isObject = (val) => val !== null && typeof val === 'object';\r\nfunction isPromise(val) {\r\n    return isObject(val) && isFunction(val.then) && isFunction(val.catch);\r\n}\r\nconst objectToString = Object.prototype.toString;\r\nconst toTypeString = (value) => objectToString.call(value);\r\nfunction toRawType(value) {\r\n    return toTypeString(value).slice(8, -1);\r\n}\r\nconst isPlainObject = (val) => toTypeString(val) === '[object Object]';\r\nconst isReservedProp = (key) => key === 'key' || key === 'ref' || key.startsWith(`onVnode`);\r\nconst camelizeRE = /-(\\w)/g;\r\nconst camelize = (str) => {\r\n    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : ''));\r\n};\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\nconst hyphenate = (str) => {\r\n    return str.replace(hyphenateRE, '-$1').toLowerCase();\r\n};\r\nconst capitalize = (str) => {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\n// compare whether a value has changed, accounting for NaN.\r\nconst hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);\n\nfunction defaultOnError(error) {\r\n    throw error;\r\n}\r\nfunction createCompilerError(code, loc, messages) {\r\n    const msg =  (messages || errorMessages)[code] ;\r\n    const locInfo = loc ? ` (${loc.start.line}:${loc.start.column})` : ``;\r\n    const error = new SyntaxError(msg + locInfo);\r\n    error.code = code;\r\n    error.loc = loc;\r\n    return error;\r\n}\r\nconst errorMessages = {\r\n    // parse errors\r\n    [0 /* ABRUPT_CLOSING_OF_EMPTY_COMMENT */]: 'Illegal comment.',\r\n    [1 /* ABSENCE_OF_DIGITS_IN_NUMERIC_CHARACTER_REFERENCE */]: 'Illegal numeric character reference: invalid character.',\r\n    [2 /* CDATA_IN_HTML_CONTENT */]: 'CDATA section is allowed only in XML context.',\r\n    [3 /* CHARACTER_REFERENCE_OUTSIDE_UNICODE_RANGE */]: 'Illegal numeric character reference: too big.',\r\n    [4 /* CONTROL_CHARACTER_REFERENCE */]: 'Illegal numeric character reference: control character.',\r\n    [5 /* DUPLICATE_ATTRIBUTE */]: 'Duplicate attribute.',\r\n    [6 /* END_TAG_WITH_ATTRIBUTES */]: 'End tag cannot have attributes.',\r\n    [7 /* END_TAG_WITH_TRAILING_SOLIDUS */]: \"Illegal '/' in tags.\",\r\n    [8 /* EOF_BEFORE_TAG_NAME */]: 'Unexpected EOF in tag.',\r\n    [9 /* EOF_IN_CDATA */]: 'Unexpected EOF in CDATA section.',\r\n    [10 /* EOF_IN_COMMENT */]: 'Unexpected EOF in comment.',\r\n    [11 /* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */]: 'Unexpected EOF in script.',\r\n    [12 /* EOF_IN_TAG */]: 'Unexpected EOF in tag.',\r\n    [13 /* INCORRECTLY_CLOSED_COMMENT */]: 'Incorrectly closed comment.',\r\n    [14 /* INCORRECTLY_OPENED_COMMENT */]: 'Incorrectly opened comment.',\r\n    [15 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */]: \"Illegal tag name. Use '&lt;' to print '<'.\",\r\n    [16 /* MISSING_ATTRIBUTE_VALUE */]: 'Attribute value was expected.',\r\n    [17 /* MISSING_END_TAG_NAME */]: 'End tag name was expected.',\r\n    [18 /* MISSING_SEMICOLON_AFTER_CHARACTER_REFERENCE */]: 'Semicolon was expected.',\r\n    [19 /* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */]: 'Whitespace was expected.',\r\n    [20 /* NESTED_COMMENT */]: \"Unexpected '<!--' in comment.\",\r\n    [21 /* NONCHARACTER_CHARACTER_REFERENCE */]: 'Illegal numeric character reference: non character.',\r\n    [22 /* NULL_CHARACTER_REFERENCE */]: 'Illegal numeric character reference: null character.',\r\n    [23 /* SURROGATE_CHARACTER_REFERENCE */]: 'Illegal numeric character reference: non-pair surrogate.',\r\n    [24 /* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */]: 'Attribute name cannot contain U+0022 (\"), U+0027 (\\'), and U+003C (<).',\r\n    [25 /* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */]: 'Unquoted attribute value cannot contain U+0022 (\"), U+0027 (\\'), U+003C (<), U+003D (=), and U+0060 (`).',\r\n    [26 /* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */]: \"Attribute name cannot start with '='.\",\r\n    [28 /* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */]: \"'<?' is allowed only in XML context.\",\r\n    [29 /* UNEXPECTED_SOLIDUS_IN_TAG */]: \"Illegal '/' in tags.\",\r\n    [30 /* UNKNOWN_NAMED_CHARACTER_REFERENCE */]: 'Unknown entity name.',\r\n    // Vue-specific parse errors\r\n    [31 /* X_INVALID_END_TAG */]: 'Invalid end tag.',\r\n    [32 /* X_MISSING_END_TAG */]: 'End tag was not found.',\r\n    [33 /* X_MISSING_INTERPOLATION_END */]: 'Interpolation end sign was not found.',\r\n    [34 /* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */]: 'End bracket for dynamic directive argument was not found. ' +\r\n        'Note that dynamic directive argument cannot contain spaces.',\r\n    // transform errors\r\n    [35 /* X_V_IF_NO_EXPRESSION */]: `v-if/v-else-if is missing expression.`,\r\n    [36 /* X_V_ELSE_NO_ADJACENT_IF */]: `v-else/v-else-if has no adjacent v-if.`,\r\n    [37 /* X_V_FOR_NO_EXPRESSION */]: `v-for is missing expression.`,\r\n    [38 /* X_V_FOR_MALFORMED_EXPRESSION */]: `v-for has invalid expression.`,\r\n    [39 /* X_V_BIND_NO_EXPRESSION */]: `v-bind is missing expression.`,\r\n    [40 /* X_V_ON_NO_EXPRESSION */]: `v-on is missing expression.`,\r\n    [41 /* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */]: `Unexpected custom directive on <slot> outlet.`,\r\n    [42 /* X_V_SLOT_NAMED_SLOT_ON_COMPONENT */]: `Named v-slot on component. ` +\r\n        `Named slots should use <template v-slot> syntax nested inside the component.`,\r\n    [43 /* X_V_SLOT_MIXED_SLOT_USAGE */]: `Mixed v-slot usage on both the component and nested <template>.` +\r\n        `The default slot should also use <template> syntax when there are other ` +\r\n        `named slots to avoid scope ambiguity.`,\r\n    [44 /* X_V_SLOT_DUPLICATE_SLOT_NAMES */]: `Duplicate slot names found. `,\r\n    [45 /* X_V_SLOT_EXTRANEOUS_NON_SLOT_CHILDREN */]: `Extraneous children found when component has explicit slots. ` +\r\n        `These children will be ignored.`,\r\n    [46 /* X_V_SLOT_MISPLACED */]: `v-slot can only be used on components or <template> tags.`,\r\n    [47 /* X_V_MODEL_NO_EXPRESSION */]: `v-model is missing expression.`,\r\n    [48 /* X_V_MODEL_MALFORMED_EXPRESSION */]: `v-model value must be a valid JavaScript member expression.`,\r\n    [49 /* X_V_MODEL_ON_SCOPE_VARIABLE */]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,\r\n    [50 /* X_INVALID_EXPRESSION */]: `Invalid JavaScript expression.`,\r\n    // generic errors\r\n    [51 /* X_PREFIX_ID_NOT_SUPPORTED */]: `\"prefixIdentifiers\" option is not supported in this build of compiler.`,\r\n    [52 /* X_MODULE_MODE_NOT_SUPPORTED */]: `ES module mode is not supported in this build of compiler.`\r\n};\n\n// AST Utilities ---------------------------------------------------------------\r\n// Some expressions, e.g. sequence and conditional expressions, are never\r\n// associated with template nodes, so their source locations are just a stub.\r\n// Container types like CompoundExpression also don't need a real location.\r\nconst locStub = {\r\n    source: '',\r\n    start: { line: 1, column: 1, offset: 0 },\r\n    end: { line: 1, column: 1, offset: 0 }\r\n};\r\nfunction createArrayExpression(elements, loc = locStub) {\r\n    return {\r\n        type: 16 /* JS_ARRAY_EXPRESSION */,\r\n        loc,\r\n        elements\r\n    };\r\n}\r\nfunction createObjectExpression(properties, loc = locStub) {\r\n    return {\r\n        type: 14 /* JS_OBJECT_EXPRESSION */,\r\n        loc,\r\n        properties\r\n    };\r\n}\r\nfunction createObjectProperty(key, value) {\r\n    return {\r\n        type: 15 /* JS_PROPERTY */,\r\n        loc: locStub,\r\n        key: isString(key) ? createSimpleExpression(key, true) : key,\r\n        value\r\n    };\r\n}\r\nfunction createSimpleExpression(content, isStatic, loc = locStub, isConstant = false) {\r\n    return {\r\n        type: 4 /* SIMPLE_EXPRESSION */,\r\n        loc,\r\n        isConstant,\r\n        content,\r\n        isStatic\r\n    };\r\n}\r\nfunction createCompoundExpression(children, loc = locStub) {\r\n    return {\r\n        type: 8 /* COMPOUND_EXPRESSION */,\r\n        loc,\r\n        children\r\n    };\r\n}\r\nfunction createCallExpression(callee, args = [], loc = locStub) {\r\n    return {\r\n        type: 13 /* JS_CALL_EXPRESSION */,\r\n        loc,\r\n        callee,\r\n        arguments: args\r\n    };\r\n}\r\nfunction createFunctionExpression(params, returns, newline = false, loc = locStub) {\r\n    return {\r\n        type: 17 /* JS_FUNCTION_EXPRESSION */,\r\n        params,\r\n        returns,\r\n        newline,\r\n        loc\r\n    };\r\n}\r\nfunction createSequenceExpression(expressions) {\r\n    return {\r\n        type: 18 /* JS_SEQUENCE_EXPRESSION */,\r\n        expressions,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createConditionalExpression(test, consequent, alternate) {\r\n    return {\r\n        type: 19 /* JS_CONDITIONAL_EXPRESSION */,\r\n        test,\r\n        consequent,\r\n        alternate,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createCacheExpression(index, value, isVNode = false) {\r\n    return {\r\n        type: 20 /* JS_CACHE_EXPRESSION */,\r\n        index,\r\n        value,\r\n        isVNode,\r\n        loc: locStub\r\n    };\r\n}\n\nconst FRAGMENT = Symbol( `Fragment` );\r\nconst PORTAL = Symbol( `Portal` );\r\nconst SUSPENSE = Symbol( `Suspense` );\r\nconst OPEN_BLOCK = Symbol( `openBlock` );\r\nconst CREATE_BLOCK = Symbol( `createBlock` );\r\nconst CREATE_VNODE = Symbol( `createVNode` );\r\nconst CREATE_COMMENT = Symbol( `createCommentVNode` );\r\nconst CREATE_TEXT = Symbol( `createTextVNode` );\r\nconst RESOLVE_COMPONENT = Symbol( `resolveComponent` );\r\nconst RESOLVE_DYNAMIC_COMPONENT = Symbol( `resolveDynamicComponent` );\r\nconst RESOLVE_DIRECTIVE = Symbol( `resolveDirective` );\r\nconst WITH_DIRECTIVES = Symbol( `withDirectives` );\r\nconst RENDER_LIST = Symbol( `renderList` );\r\nconst RENDER_SLOT = Symbol( `renderSlot` );\r\nconst CREATE_SLOTS = Symbol( `createSlots` );\r\nconst TO_STRING = Symbol( `toString` );\r\nconst MERGE_PROPS = Symbol( `mergeProps` );\r\nconst TO_HANDLERS = Symbol( `toHandlers` );\r\nconst CAMELIZE = Symbol( `camelize` );\r\nconst SET_BLOCK_TRACKING = Symbol( `setBlockTracking` );\r\n// Name mapping for runtime helpers that need to be imported from 'vue' in\r\n// generated code. Make sure these are correctly exported in the runtime!\r\n// Using `any` here because TS doesn't allow symbols as index type.\r\nconst helperNameMap = {\r\n    [FRAGMENT]: `Fragment`,\r\n    [PORTAL]: `Portal`,\r\n    [SUSPENSE]: `Suspense`,\r\n    [OPEN_BLOCK]: `openBlock`,\r\n    [CREATE_BLOCK]: `createBlock`,\r\n    [CREATE_VNODE]: `createVNode`,\r\n    [CREATE_COMMENT]: `createCommentVNode`,\r\n    [CREATE_TEXT]: `createTextVNode`,\r\n    [RESOLVE_COMPONENT]: `resolveComponent`,\r\n    [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,\r\n    [RESOLVE_DIRECTIVE]: `resolveDirective`,\r\n    [WITH_DIRECTIVES]: `withDirectives`,\r\n    [RENDER_LIST]: `renderList`,\r\n    [RENDER_SLOT]: `renderSlot`,\r\n    [CREATE_SLOTS]: `createSlots`,\r\n    [TO_STRING]: `toString`,\r\n    [MERGE_PROPS]: `mergeProps`,\r\n    [TO_HANDLERS]: `toHandlers`,\r\n    [CAMELIZE]: `camelize`,\r\n    [SET_BLOCK_TRACKING]: `setBlockTracking`\r\n};\r\nfunction registerRuntimeHelpers(helpers) {\r\n    Object.getOwnPropertySymbols(helpers).forEach(s => {\r\n        helperNameMap[s] = helpers[s];\r\n    });\r\n}\n\nconst nonIdentifierRE = /^\\d|[^\\$\\w]/;\r\nconst isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);\r\nconst memberExpRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\[[^\\]]+\\])*$/;\r\nconst isMemberExpression = (path) => memberExpRE.test(path);\r\nfunction getInnerRange(loc, offset, length) {\r\n     assert(offset <= loc.source.length);\r\n    const source = loc.source.substr(offset, length);\r\n    const newLoc = {\r\n        source,\r\n        start: advancePositionWithClone(loc.start, loc.source, offset),\r\n        end: loc.end\r\n    };\r\n    if (length != null) {\r\n         assert(offset + length <= loc.source.length);\r\n        newLoc.end = advancePositionWithClone(loc.start, loc.source, offset + length);\r\n    }\r\n    return newLoc;\r\n}\r\nfunction advancePositionWithClone(pos, source, numberOfCharacters = source.length) {\r\n    return advancePositionWithMutation({ ...pos }, source, numberOfCharacters);\r\n}\r\n// advance by mutation without cloning (for performance reasons), since this\r\n// gets called a lot in the parser\r\nfunction advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {\r\n    let linesCount = 0;\r\n    let lastNewLinePos = -1;\r\n    for (let i = 0; i < numberOfCharacters; i++) {\r\n        if (source.charCodeAt(i) === 10 /* newline char code */) {\r\n            linesCount++;\r\n            lastNewLinePos = i;\r\n        }\r\n    }\r\n    pos.offset += numberOfCharacters;\r\n    pos.line += linesCount;\r\n    pos.column =\r\n        lastNewLinePos === -1\r\n            ? pos.column + numberOfCharacters\r\n            : Math.max(1, numberOfCharacters - lastNewLinePos);\r\n    return pos;\r\n}\r\nfunction assert(condition, msg) {\r\n    /* istanbul ignore if */\r\n    if (!condition) {\r\n        throw new Error(msg || `unexpected compiler condition`);\r\n    }\r\n}\r\nfunction findDir(node, name, allowEmpty = false) {\r\n    for (let i = 0; i < node.props.length; i++) {\r\n        const p = node.props[i];\r\n        if (p.type === 7 /* DIRECTIVE */ &&\r\n            (allowEmpty || p.exp) &&\r\n            (isString(name) ? p.name === name : name.test(p.name))) {\r\n            return p;\r\n        }\r\n    }\r\n}\r\nfunction findProp(node, name, dynamicOnly = false) {\r\n    for (let i = 0; i < node.props.length; i++) {\r\n        const p = node.props[i];\r\n        if (p.type === 6 /* ATTRIBUTE */) {\r\n            if (dynamicOnly)\r\n                continue;\r\n            if (p.name === name && p.value) {\r\n                return p;\r\n            }\r\n        }\r\n        else if (p.name === 'bind' &&\r\n            p.arg &&\r\n            p.arg.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n            p.arg.isStatic &&\r\n            p.arg.content === name &&\r\n            p.exp) {\r\n            return p;\r\n        }\r\n    }\r\n}\r\nfunction createBlockExpression(blockExp, context) {\r\n    return createSequenceExpression([\r\n        createCallExpression(context.helper(OPEN_BLOCK)),\r\n        blockExp\r\n    ]);\r\n}\r\nconst isVSlot = (p) => p.type === 7 /* DIRECTIVE */ && p.name === 'slot';\r\nconst isTemplateNode = (node) => node.type === 1 /* ELEMENT */ && node.tagType === 3 /* TEMPLATE */;\r\nconst isSlotOutlet = (node) => node.type === 1 /* ELEMENT */ && node.tagType === 2 /* SLOT */;\r\nfunction injectProp(node, prop, context) {\r\n    let propsWithInjection;\r\n    const props = node.callee === RENDER_SLOT ? node.arguments[2] : node.arguments[1];\r\n    if (props == null || isString(props)) {\r\n        propsWithInjection = createObjectExpression([prop]);\r\n    }\r\n    else if (props.type === 13 /* JS_CALL_EXPRESSION */) {\r\n        // merged props... add ours\r\n        // only inject key to object literal if it's the first argument so that\r\n        // if doesn't override user provided keys\r\n        const first = props.arguments[0];\r\n        if (!isString(first) && first.type === 14 /* JS_OBJECT_EXPRESSION */) {\r\n            first.properties.unshift(prop);\r\n        }\r\n        else {\r\n            props.arguments.unshift(createObjectExpression([prop]));\r\n        }\r\n        propsWithInjection = props;\r\n    }\r\n    else if (props.type === 14 /* JS_OBJECT_EXPRESSION */) {\r\n        props.properties.unshift(prop);\r\n        propsWithInjection = props;\r\n    }\r\n    else {\r\n        // single v-bind with expression, return a merged replacement\r\n        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\r\n            createObjectExpression([prop]),\r\n            props\r\n        ]);\r\n    }\r\n    if (node.callee === RENDER_SLOT) {\r\n        node.arguments[2] = propsWithInjection;\r\n    }\r\n    else {\r\n        node.arguments[1] = propsWithInjection;\r\n    }\r\n}\r\nfunction toValidAssetId(name, type) {\r\n    return `_${type}_${name.replace(/[^\\w]/g, '_')}`;\r\n}\n\nconst defaultParserOptions = {\r\n    delimiters: [`{{`, `}}`],\r\n    getNamespace: () => 0 /* HTML */,\r\n    getTextMode: () => 0 /* DATA */,\r\n    isVoidTag: NO,\r\n    isPreTag: NO,\r\n    isCustomElement: NO,\r\n    namedCharacterReferences: {\r\n        'gt;': '>',\r\n        'lt;': '<',\r\n        'amp;': '&',\r\n        'apos;': \"'\",\r\n        'quot;': '\"'\r\n    },\r\n    onError: defaultOnError\r\n};\r\nfunction parse(content, options = {}) {\r\n    const context = createParserContext(content, options);\r\n    const start = getCursor(context);\r\n    return {\r\n        type: 0 /* ROOT */,\r\n        children: parseChildren(context, 0 /* DATA */, []),\r\n        helpers: [],\r\n        components: [],\r\n        directives: [],\r\n        hoists: [],\r\n        cached: 0,\r\n        codegenNode: undefined,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction createParserContext(content, options) {\r\n    return {\r\n        options: {\r\n            ...defaultParserOptions,\r\n            ...options\r\n        },\r\n        column: 1,\r\n        line: 1,\r\n        offset: 0,\r\n        originalSource: content,\r\n        source: content,\r\n        maxCRNameLength: Object.keys(options.namedCharacterReferences ||\r\n            defaultParserOptions.namedCharacterReferences).reduce((max, name) => Math.max(max, name.length), 0),\r\n        inPre: false\r\n    };\r\n}\r\nfunction parseChildren(context, mode, ancestors) {\r\n    const parent = last(ancestors);\r\n    const ns = parent ? parent.ns : 0 /* HTML */;\r\n    const nodes = [];\r\n    while (!isEnd(context, mode, ancestors)) {\r\n         assert(context.source.length > 0);\r\n        const s = context.source;\r\n        let node = undefined;\r\n        if (!context.inPre && startsWith(s, context.options.delimiters[0])) {\r\n            // '{{'\r\n            node = parseInterpolation(context, mode);\r\n        }\r\n        else if (mode === 0 /* DATA */ && s[0] === '<') {\r\n            // https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state\r\n            if (s.length === 1) {\r\n                emitError(context, 8 /* EOF_BEFORE_TAG_NAME */, 1);\r\n            }\r\n            else if (s[1] === '!') {\r\n                // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state\r\n                if (startsWith(s, '<!--')) {\r\n                    node = parseComment(context);\r\n                }\r\n                else if (startsWith(s, '<!DOCTYPE')) {\r\n                    // Ignore DOCTYPE by a limitation.\r\n                    node = parseBogusComment(context);\r\n                }\r\n                else if (startsWith(s, '<![CDATA[')) {\r\n                    if (ns !== 0 /* HTML */) {\r\n                        node = parseCDATA(context, ancestors);\r\n                    }\r\n                    else {\r\n                        emitError(context, 2 /* CDATA_IN_HTML_CONTENT */);\r\n                        node = parseBogusComment(context);\r\n                    }\r\n                }\r\n                else {\r\n                    emitError(context, 14 /* INCORRECTLY_OPENED_COMMENT */);\r\n                    node = parseBogusComment(context);\r\n                }\r\n            }\r\n            else if (s[1] === '/') {\r\n                // https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state\r\n                if (s.length === 2) {\r\n                    emitError(context, 8 /* EOF_BEFORE_TAG_NAME */, 2);\r\n                }\r\n                else if (s[2] === '>') {\r\n                    emitError(context, 17 /* MISSING_END_TAG_NAME */, 2);\r\n                    advanceBy(context, 3);\r\n                    continue;\r\n                }\r\n                else if (/[a-z]/i.test(s[2])) {\r\n                    emitError(context, 31 /* X_INVALID_END_TAG */);\r\n                    parseTag(context, 1 /* End */, parent);\r\n                    continue;\r\n                }\r\n                else {\r\n                    emitError(context, 15 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */, 2);\r\n                    node = parseBogusComment(context);\r\n                }\r\n            }\r\n            else if (/[a-z]/i.test(s[1])) {\r\n                node = parseElement(context, ancestors);\r\n            }\r\n            else if (s[1] === '?') {\r\n                emitError(context, 28 /* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */, 1);\r\n                node = parseBogusComment(context);\r\n            }\r\n            else {\r\n                emitError(context, 15 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */, 1);\r\n            }\r\n        }\r\n        if (!node) {\r\n            node = parseText(context, mode);\r\n        }\r\n        if (Array.isArray(node)) {\r\n            for (let i = 0; i < node.length; i++) {\r\n                pushNode(nodes, node[i]);\r\n            }\r\n        }\r\n        else {\r\n            pushNode(nodes, node);\r\n        }\r\n    }\r\n    // Whitespace management for more efficient output\r\n    // (same as v2 whitespance: 'condense')\r\n    let removedWhitespace = false;\r\n    if (!parent || !context.options.isPreTag(parent.tag)) {\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n            if (node.type === 2 /* TEXT */) {\r\n                if (!node.content.trim()) {\r\n                    const prev = nodes[i - 1];\r\n                    const next = nodes[i + 1];\r\n                    // If:\r\n                    // - the whitespace is the first or last node, or:\r\n                    // - the whitespace is adjacent to a comment, or:\r\n                    // - the whitespace is between two elements AND contains newline\r\n                    // Then the whitespace is ignored.\r\n                    if (!prev ||\r\n                        !next ||\r\n                        prev.type === 3 /* COMMENT */ ||\r\n                        next.type === 3 /* COMMENT */ ||\r\n                        (prev.type === 1 /* ELEMENT */ &&\r\n                            next.type === 1 /* ELEMENT */ &&\r\n                            /[\\r\\n]/.test(node.content))) {\r\n                        removedWhitespace = true;\r\n                        nodes[i] = null;\r\n                    }\r\n                    else {\r\n                        // Otherwise, condensed consecutive whitespace inside the text down to\r\n                        // a single space\r\n                        node.content = ' ';\r\n                    }\r\n                }\r\n                else {\r\n                    node.content = node.content.replace(/\\s+/g, ' ');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return removedWhitespace ? nodes.filter(node => node !== null) : nodes;\r\n}\r\nfunction pushNode(nodes, node) {\r\n    if (node.type === 2 /* TEXT */) {\r\n        const prev = last(nodes);\r\n        // Merge if both this and the previous node are text and those are\r\n        // consecutive. This happens for cases like \"a < b\".\r\n        if (prev &&\r\n            prev.type === 2 /* TEXT */ &&\r\n            prev.loc.end.offset === node.loc.start.offset) {\r\n            prev.content += node.content;\r\n            prev.loc.end = node.loc.end;\r\n            prev.loc.source += node.loc.source;\r\n            return;\r\n        }\r\n    }\r\n    nodes.push(node);\r\n}\r\nfunction parseCDATA(context, ancestors) {\r\n    \r\n        assert(last(ancestors) == null || last(ancestors).ns !== 0 /* HTML */);\r\n     assert(startsWith(context.source, '<![CDATA['));\r\n    advanceBy(context, 9);\r\n    const nodes = parseChildren(context, 3 /* CDATA */, ancestors);\r\n    if (context.source.length === 0) {\r\n        emitError(context, 9 /* EOF_IN_CDATA */);\r\n    }\r\n    else {\r\n         assert(startsWith(context.source, ']]>'));\r\n        advanceBy(context, 3);\r\n    }\r\n    return nodes;\r\n}\r\nfunction parseComment(context) {\r\n     assert(startsWith(context.source, '<!--'));\r\n    const start = getCursor(context);\r\n    let content;\r\n    // Regular comment.\r\n    const match = /--(\\!)?>/.exec(context.source);\r\n    if (!match) {\r\n        content = context.source.slice(4);\r\n        advanceBy(context, context.source.length);\r\n        emitError(context, 10 /* EOF_IN_COMMENT */);\r\n    }\r\n    else {\r\n        if (match.index <= 3) {\r\n            emitError(context, 0 /* ABRUPT_CLOSING_OF_EMPTY_COMMENT */);\r\n        }\r\n        if (match[1]) {\r\n            emitError(context, 13 /* INCORRECTLY_CLOSED_COMMENT */);\r\n        }\r\n        content = context.source.slice(4, match.index);\r\n        // Advancing with reporting nested comments.\r\n        const s = context.source.slice(0, match.index);\r\n        let prevIndex = 1, nestedIndex = 0;\r\n        while ((nestedIndex = s.indexOf('<!--', prevIndex)) !== -1) {\r\n            advanceBy(context, nestedIndex - prevIndex + 1);\r\n            if (nestedIndex + 4 < s.length) {\r\n                emitError(context, 20 /* NESTED_COMMENT */);\r\n            }\r\n            prevIndex = nestedIndex + 1;\r\n        }\r\n        advanceBy(context, match.index + match[0].length - prevIndex + 1);\r\n    }\r\n    return {\r\n        type: 3 /* COMMENT */,\r\n        content,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction parseBogusComment(context) {\r\n     assert(/^<(?:[\\!\\?]|\\/[^a-z>])/i.test(context.source));\r\n    const start = getCursor(context);\r\n    const contentStart = context.source[1] === '?' ? 1 : 2;\r\n    let content;\r\n    const closeIndex = context.source.indexOf('>');\r\n    if (closeIndex === -1) {\r\n        content = context.source.slice(contentStart);\r\n        advanceBy(context, context.source.length);\r\n    }\r\n    else {\r\n        content = context.source.slice(contentStart, closeIndex);\r\n        advanceBy(context, closeIndex + 1);\r\n    }\r\n    return {\r\n        type: 3 /* COMMENT */,\r\n        content,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction parseElement(context, ancestors) {\r\n     assert(/^<[a-z]/i.test(context.source));\r\n    // Start tag.\r\n    const wasInPre = context.inPre;\r\n    const parent = last(ancestors);\r\n    const element = parseTag(context, 0 /* Start */, parent);\r\n    const isPreBoundary = context.inPre && !wasInPre;\r\n    if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {\r\n        return element;\r\n    }\r\n    // Children.\r\n    ancestors.push(element);\r\n    const mode = context.options.getTextMode(element.tag, element.ns);\r\n    const children = parseChildren(context, mode, ancestors);\r\n    ancestors.pop();\r\n    element.children = children;\r\n    // End tag.\r\n    if (startsWithEndTagOpen(context.source, element.tag)) {\r\n        parseTag(context, 1 /* End */, parent);\r\n    }\r\n    else {\r\n        emitError(context, 32 /* X_MISSING_END_TAG */);\r\n        if (context.source.length === 0 && element.tag.toLowerCase() === 'script') {\r\n            const first = children[0];\r\n            if (first && startsWith(first.loc.source, '<!--')) {\r\n                emitError(context, 11 /* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */);\r\n            }\r\n        }\r\n    }\r\n    element.loc = getSelection(context, element.loc.start);\r\n    if (isPreBoundary) {\r\n        context.inPre = false;\r\n    }\r\n    return element;\r\n}\r\n/**\r\n * Parse a tag (E.g. `<div id=a>`) with that type (start tag or end tag).\r\n */\r\nfunction parseTag(context, type, parent) {\r\n     assert(/^<\\/?[a-z]/i.test(context.source));\r\n    \r\n        assert(type === (startsWith(context.source, '</') ? 1 /* End */ : 0 /* Start */));\r\n    // Tag open.\r\n    const start = getCursor(context);\r\n    const match = /^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(context.source);\r\n    const tag = match[1];\r\n    const ns = context.options.getNamespace(tag, parent);\r\n    advanceBy(context, match[0].length);\r\n    advanceSpaces(context);\r\n    // save current state in case we need to re-parse attributes with v-pre\r\n    const cursor = getCursor(context);\r\n    const currentSource = context.source;\r\n    // Attributes.\r\n    let props = parseAttributes(context, type);\r\n    // check v-pre\r\n    if (!context.inPre &&\r\n        props.some(p => p.type === 7 /* DIRECTIVE */ && p.name === 'pre')) {\r\n        context.inPre = true;\r\n        // reset context\r\n        extend(context, cursor);\r\n        context.source = currentSource;\r\n        // re-parse attrs and filter out v-pre itself\r\n        props = parseAttributes(context, type).filter(p => p.name !== 'v-pre');\r\n    }\r\n    // Tag close.\r\n    let isSelfClosing = false;\r\n    if (context.source.length === 0) {\r\n        emitError(context, 12 /* EOF_IN_TAG */);\r\n    }\r\n    else {\r\n        isSelfClosing = startsWith(context.source, '/>');\r\n        if (type === 1 /* End */ && isSelfClosing) {\r\n            emitError(context, 7 /* END_TAG_WITH_TRAILING_SOLIDUS */);\r\n        }\r\n        advanceBy(context, isSelfClosing ? 2 : 1);\r\n    }\r\n    let tagType = 0 /* ELEMENT */;\r\n    if (!context.inPre && !context.options.isCustomElement(tag)) {\r\n        if (context.options.isNativeTag) {\r\n            if (!context.options.isNativeTag(tag))\r\n                tagType = 1 /* COMPONENT */;\r\n        }\r\n        else {\r\n            if (/^[A-Z]/.test(tag))\r\n                tagType = 1 /* COMPONENT */;\r\n        }\r\n        if (tag === 'slot')\r\n            tagType = 2 /* SLOT */;\r\n        else if (tag === 'template')\r\n            tagType = 3 /* TEMPLATE */;\r\n        else if (tag === 'portal' || tag === 'Portal')\r\n            tagType = 4 /* PORTAL */;\r\n        else if (tag === 'suspense' || tag === 'Suspense')\r\n            tagType = 5 /* SUSPENSE */;\r\n    }\r\n    return {\r\n        type: 1 /* ELEMENT */,\r\n        ns,\r\n        tag,\r\n        tagType,\r\n        props,\r\n        isSelfClosing,\r\n        children: [],\r\n        loc: getSelection(context, start),\r\n        codegenNode: undefined // to be created during transform phase\r\n    };\r\n}\r\nfunction parseAttributes(context, type) {\r\n    const props = [];\r\n    const attributeNames = new Set();\r\n    while (context.source.length > 0 &&\r\n        !startsWith(context.source, '>') &&\r\n        !startsWith(context.source, '/>')) {\r\n        if (startsWith(context.source, '/')) {\r\n            emitError(context, 29 /* UNEXPECTED_SOLIDUS_IN_TAG */);\r\n            advanceBy(context, 1);\r\n            advanceSpaces(context);\r\n            continue;\r\n        }\r\n        if (type === 1 /* End */) {\r\n            emitError(context, 6 /* END_TAG_WITH_ATTRIBUTES */);\r\n        }\r\n        const attr = parseAttribute(context, attributeNames);\r\n        if (type === 0 /* Start */) {\r\n            props.push(attr);\r\n        }\r\n        if (/^[^\\t\\r\\n\\f />]/.test(context.source)) {\r\n            emitError(context, 19 /* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */);\r\n        }\r\n        advanceSpaces(context);\r\n    }\r\n    return props;\r\n}\r\nfunction parseAttribute(context, nameSet) {\r\n     assert(/^[^\\t\\r\\n\\f />]/.test(context.source));\r\n    // Name.\r\n    const start = getCursor(context);\r\n    const match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source);\r\n    const name = match[0];\r\n    if (nameSet.has(name)) {\r\n        emitError(context, 5 /* DUPLICATE_ATTRIBUTE */);\r\n    }\r\n    nameSet.add(name);\r\n    if (name[0] === '=') {\r\n        emitError(context, 26 /* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */);\r\n    }\r\n    {\r\n        const pattern = /[\"'<]/g;\r\n        let m;\r\n        while ((m = pattern.exec(name)) !== null) {\r\n            emitError(context, 24 /* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */, m.index);\r\n        }\r\n    }\r\n    advanceBy(context, name.length);\r\n    // Value\r\n    let value = undefined;\r\n    if (/^[\\t\\r\\n\\f ]*=/.test(context.source)) {\r\n        advanceSpaces(context);\r\n        advanceBy(context, 1);\r\n        advanceSpaces(context);\r\n        value = parseAttributeValue(context);\r\n        if (!value) {\r\n            emitError(context, 16 /* MISSING_ATTRIBUTE_VALUE */);\r\n        }\r\n    }\r\n    const loc = getSelection(context, start);\r\n    if (!context.inPre && /^(v-|:|@|#)/.test(name)) {\r\n        const match = /(?:^v-([a-z0-9-]+))?(?:(?::|^@|^#)([^\\.]+))?(.+)?$/i.exec(name);\r\n        let arg;\r\n        if (match[2]) {\r\n            const startOffset = name.split(match[2], 2).shift().length;\r\n            const loc = getSelection(context, getNewPosition(context, start, startOffset), getNewPosition(context, start, startOffset + match[2].length));\r\n            let content = match[2];\r\n            let isStatic = true;\r\n            if (content.startsWith('[')) {\r\n                isStatic = false;\r\n                if (!content.endsWith(']')) {\r\n                    emitError(context, 34 /* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */);\r\n                }\r\n                content = content.substr(1, content.length - 2);\r\n            }\r\n            arg = {\r\n                type: 4 /* SIMPLE_EXPRESSION */,\r\n                content,\r\n                isStatic,\r\n                isConstant: isStatic,\r\n                loc\r\n            };\r\n        }\r\n        if (value && value.isQuoted) {\r\n            const valueLoc = value.loc;\r\n            valueLoc.start.offset++;\r\n            valueLoc.start.column++;\r\n            valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);\r\n            valueLoc.source = valueLoc.source.slice(1, -1);\r\n        }\r\n        return {\r\n            type: 7 /* DIRECTIVE */,\r\n            name: match[1] ||\r\n                (startsWith(name, ':')\r\n                    ? 'bind'\r\n                    : startsWith(name, '@')\r\n                        ? 'on'\r\n                        : 'slot'),\r\n            exp: value && {\r\n                type: 4 /* SIMPLE_EXPRESSION */,\r\n                content: value.content,\r\n                isStatic: false,\r\n                // Treat as non-constant by default. This can be potentially set to\r\n                // true by `transformExpression` to make it eligible for hoisting.\r\n                isConstant: false,\r\n                loc: value.loc\r\n            },\r\n            arg,\r\n            modifiers: match[3] ? match[3].substr(1).split('.') : [],\r\n            loc\r\n        };\r\n    }\r\n    return {\r\n        type: 6 /* ATTRIBUTE */,\r\n        name,\r\n        value: value && {\r\n            type: 2 /* TEXT */,\r\n            content: value.content,\r\n            loc: value.loc\r\n        },\r\n        loc\r\n    };\r\n}\r\nfunction parseAttributeValue(context) {\r\n    const start = getCursor(context);\r\n    let content;\r\n    const quote = context.source[0];\r\n    const isQuoted = quote === `\"` || quote === `'`;\r\n    if (isQuoted) {\r\n        // Quoted value.\r\n        advanceBy(context, 1);\r\n        const endIndex = context.source.indexOf(quote);\r\n        if (endIndex === -1) {\r\n            content = parseTextData(context, context.source.length, 4 /* ATTRIBUTE_VALUE */);\r\n        }\r\n        else {\r\n            content = parseTextData(context, endIndex, 4 /* ATTRIBUTE_VALUE */);\r\n            advanceBy(context, 1);\r\n        }\r\n    }\r\n    else {\r\n        // Unquoted\r\n        const match = /^[^\\t\\r\\n\\f >]+/.exec(context.source);\r\n        if (!match) {\r\n            return undefined;\r\n        }\r\n        let unexpectedChars = /[\"'<=`]/g;\r\n        let m;\r\n        while ((m = unexpectedChars.exec(match[0])) !== null) {\r\n            emitError(context, 25 /* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */, m.index);\r\n        }\r\n        content = parseTextData(context, match[0].length, 4 /* ATTRIBUTE_VALUE */);\r\n    }\r\n    return { content, isQuoted, loc: getSelection(context, start) };\r\n}\r\nfunction parseInterpolation(context, mode) {\r\n    const [open, close] = context.options.delimiters;\r\n     assert(startsWith(context.source, open));\r\n    const closeIndex = context.source.indexOf(close, open.length);\r\n    if (closeIndex === -1) {\r\n        emitError(context, 33 /* X_MISSING_INTERPOLATION_END */);\r\n        return undefined;\r\n    }\r\n    const start = getCursor(context);\r\n    advanceBy(context, open.length);\r\n    const innerStart = getCursor(context);\r\n    const innerEnd = getCursor(context);\r\n    const rawContentLength = closeIndex - open.length;\r\n    const rawContent = context.source.slice(0, rawContentLength);\r\n    const preTrimContent = parseTextData(context, rawContentLength, mode);\r\n    const content = preTrimContent.trim();\r\n    const startOffset = preTrimContent.indexOf(content);\r\n    if (startOffset > 0) {\r\n        advancePositionWithMutation(innerStart, rawContent, startOffset);\r\n    }\r\n    const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);\r\n    advancePositionWithMutation(innerEnd, rawContent, endOffset);\r\n    advanceBy(context, close.length);\r\n    return {\r\n        type: 5 /* INTERPOLATION */,\r\n        content: {\r\n            type: 4 /* SIMPLE_EXPRESSION */,\r\n            isStatic: false,\r\n            // Set `isConstant` to false by default and will decide in transformExpression\r\n            isConstant: false,\r\n            content,\r\n            loc: getSelection(context, innerStart, innerEnd)\r\n        },\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction parseText(context, mode) {\r\n     assert(context.source.length > 0);\r\n    const [open] = context.options.delimiters;\r\n    // TODO could probably use some perf optimization\r\n    const endIndex = Math.min(...[\r\n        context.source.indexOf('<', 1),\r\n        context.source.indexOf(open, 1),\r\n        mode === 3 /* CDATA */ ? context.source.indexOf(']]>') : -1,\r\n        context.source.length\r\n    ].filter(n => n !== -1));\r\n     assert(endIndex > 0);\r\n    const start = getCursor(context);\r\n    const content = parseTextData(context, endIndex, mode);\r\n    return {\r\n        type: 2 /* TEXT */,\r\n        content,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\n/**\r\n * Get text data with a given length from the current location.\r\n * This translates HTML entities in the text data.\r\n */\r\nfunction parseTextData(context, length, mode) {\r\n    if (mode === 2 /* RAWTEXT */ || mode === 3 /* CDATA */) {\r\n        const text = context.source.slice(0, length);\r\n        advanceBy(context, length);\r\n        return text;\r\n    }\r\n    // DATA or RCDATA. Entity decoding required.\r\n    const end = context.offset + length;\r\n    let text = '';\r\n    while (context.offset < end) {\r\n        const head = /&(?:#x?)?/i.exec(context.source);\r\n        if (!head || context.offset + head.index >= end) {\r\n            const remaining = end - context.offset;\r\n            text += context.source.slice(0, remaining);\r\n            advanceBy(context, remaining);\r\n            break;\r\n        }\r\n        // Advance to the \"&\".\r\n        text += context.source.slice(0, head.index);\r\n        advanceBy(context, head.index);\r\n        if (head[0] === '&') {\r\n            // Named character reference.\r\n            let name = '', value = undefined;\r\n            if (/[0-9a-z]/i.test(context.source[1])) {\r\n                for (let length = context.maxCRNameLength; !value && length > 0; --length) {\r\n                    name = context.source.substr(1, length);\r\n                    value = context.options.namedCharacterReferences[name];\r\n                }\r\n                if (value) {\r\n                    const semi = name.endsWith(';');\r\n                    if (mode === 4 /* ATTRIBUTE_VALUE */ &&\r\n                        !semi &&\r\n                        /[=a-z0-9]/i.test(context.source[1 + name.length] || '')) {\r\n                        text += '&';\r\n                        text += name;\r\n                        advanceBy(context, 1 + name.length);\r\n                    }\r\n                    else {\r\n                        text += value;\r\n                        advanceBy(context, 1 + name.length);\r\n                        if (!semi) {\r\n                            emitError(context, 18 /* MISSING_SEMICOLON_AFTER_CHARACTER_REFERENCE */);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    emitError(context, 30 /* UNKNOWN_NAMED_CHARACTER_REFERENCE */);\r\n                    text += '&';\r\n                    text += name;\r\n                    advanceBy(context, 1 + name.length);\r\n                }\r\n            }\r\n            else {\r\n                text += '&';\r\n                advanceBy(context, 1);\r\n            }\r\n        }\r\n        else {\r\n            // Numeric character reference.\r\n            const hex = head[0] === '&#x';\r\n            const pattern = hex ? /^&#x([0-9a-f]+);?/i : /^&#([0-9]+);?/;\r\n            const body = pattern.exec(context.source);\r\n            if (!body) {\r\n                text += head[0];\r\n                emitError(context, 1 /* ABSENCE_OF_DIGITS_IN_NUMERIC_CHARACTER_REFERENCE */);\r\n                advanceBy(context, head[0].length);\r\n            }\r\n            else {\r\n                // https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-end-state\r\n                let cp = Number.parseInt(body[1], hex ? 16 : 10);\r\n                if (cp === 0) {\r\n                    emitError(context, 22 /* NULL_CHARACTER_REFERENCE */);\r\n                    cp = 0xfffd;\r\n                }\r\n                else if (cp > 0x10ffff) {\r\n                    emitError(context, 3 /* CHARACTER_REFERENCE_OUTSIDE_UNICODE_RANGE */);\r\n                    cp = 0xfffd;\r\n                }\r\n                else if (cp >= 0xd800 && cp <= 0xdfff) {\r\n                    emitError(context, 23 /* SURROGATE_CHARACTER_REFERENCE */);\r\n                    cp = 0xfffd;\r\n                }\r\n                else if ((cp >= 0xfdd0 && cp <= 0xfdef) || (cp & 0xfffe) === 0xfffe) {\r\n                    emitError(context, 21 /* NONCHARACTER_CHARACTER_REFERENCE */);\r\n                }\r\n                else if ((cp >= 0x01 && cp <= 0x08) ||\r\n                    cp === 0x0b ||\r\n                    (cp >= 0x0d && cp <= 0x1f) ||\r\n                    (cp >= 0x7f && cp <= 0x9f)) {\r\n                    emitError(context, 4 /* CONTROL_CHARACTER_REFERENCE */);\r\n                    cp = CCR_REPLACEMENTS[cp] || cp;\r\n                }\r\n                text += String.fromCodePoint(cp);\r\n                advanceBy(context, body[0].length);\r\n                if (!body[0].endsWith(';')) {\r\n                    emitError(context, 18 /* MISSING_SEMICOLON_AFTER_CHARACTER_REFERENCE */);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return text;\r\n}\r\nfunction getCursor(context) {\r\n    const { column, line, offset } = context;\r\n    return { column, line, offset };\r\n}\r\nfunction getSelection(context, start, end) {\r\n    end = end || getCursor(context);\r\n    return {\r\n        start,\r\n        end,\r\n        source: context.originalSource.slice(start.offset, end.offset)\r\n    };\r\n}\r\nfunction last(xs) {\r\n    return xs[xs.length - 1];\r\n}\r\nfunction startsWith(source, searchString) {\r\n    return source.startsWith(searchString);\r\n}\r\nfunction advanceBy(context, numberOfCharacters) {\r\n    const { source } = context;\r\n     assert(numberOfCharacters <= source.length);\r\n    advancePositionWithMutation(context, source, numberOfCharacters);\r\n    context.source = source.slice(numberOfCharacters);\r\n}\r\nfunction advanceSpaces(context) {\r\n    const match = /^[\\t\\r\\n\\f ]+/.exec(context.source);\r\n    if (match) {\r\n        advanceBy(context, match[0].length);\r\n    }\r\n}\r\nfunction getNewPosition(context, start, numberOfCharacters) {\r\n    return advancePositionWithClone(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);\r\n}\r\nfunction emitError(context, code, offset) {\r\n    const loc = getCursor(context);\r\n    if (offset) {\r\n        loc.offset += offset;\r\n        loc.column += offset;\r\n    }\r\n    context.options.onError(createCompilerError(code, {\r\n        start: loc,\r\n        end: loc,\r\n        source: ''\r\n    }));\r\n}\r\nfunction isEnd(context, mode, ancestors) {\r\n    const s = context.source;\r\n    switch (mode) {\r\n        case 0 /* DATA */:\r\n            if (startsWith(s, '</')) {\r\n                //TODO: probably bad performance\r\n                for (let i = ancestors.length - 1; i >= 0; --i) {\r\n                    if (startsWithEndTagOpen(s, ancestors[i].tag)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        case 1 /* RCDATA */:\r\n        case 2 /* RAWTEXT */: {\r\n            const parent = last(ancestors);\r\n            if (parent && startsWithEndTagOpen(s, parent.tag)) {\r\n                return true;\r\n            }\r\n            break;\r\n        }\r\n        case 3 /* CDATA */:\r\n            if (startsWith(s, ']]>')) {\r\n                return true;\r\n            }\r\n            break;\r\n    }\r\n    return !s;\r\n}\r\nfunction startsWithEndTagOpen(source, tag) {\r\n    return (startsWith(source, '</') &&\r\n        source.substr(2, tag.length).toLowerCase() === tag.toLowerCase() &&\r\n        /[\\t\\n\\f />]/.test(source[2 + tag.length] || '>'));\r\n}\r\n// https://html.spec.whatwg.org/multipage/parsing.html#numeric-character-reference-end-state\r\nconst CCR_REPLACEMENTS = {\r\n    0x80: 0x20ac,\r\n    0x82: 0x201a,\r\n    0x83: 0x0192,\r\n    0x84: 0x201e,\r\n    0x85: 0x2026,\r\n    0x86: 0x2020,\r\n    0x87: 0x2021,\r\n    0x88: 0x02c6,\r\n    0x89: 0x2030,\r\n    0x8a: 0x0160,\r\n    0x8b: 0x2039,\r\n    0x8c: 0x0152,\r\n    0x8e: 0x017d,\r\n    0x91: 0x2018,\r\n    0x92: 0x2019,\r\n    0x93: 0x201c,\r\n    0x94: 0x201d,\r\n    0x95: 0x2022,\r\n    0x96: 0x2013,\r\n    0x97: 0x2014,\r\n    0x98: 0x02dc,\r\n    0x99: 0x2122,\r\n    0x9a: 0x0161,\r\n    0x9b: 0x203a,\r\n    0x9c: 0x0153,\r\n    0x9e: 0x017e,\r\n    0x9f: 0x0178\r\n};\n\nfunction hoistStatic(root, context) {\r\n    walk(root.children, context, new Map(), isSingleElementRoot(root, root.children[0]));\r\n}\r\nfunction isSingleElementRoot(root, child) {\r\n    const { children } = root;\r\n    return (children.length === 1 &&\r\n        child.type === 1 /* ELEMENT */ &&\r\n        !isSlotOutlet(child));\r\n}\r\nfunction walk(children, context, resultCache, doNotHoistNode = false) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        // only plain elements are eligible for hoisting.\r\n        if (child.type === 1 /* ELEMENT */ &&\r\n            child.tagType === 0 /* ELEMENT */) {\r\n            if (!doNotHoistNode && isStaticNode(child, resultCache)) {\r\n                // whole tree is static\r\n                child.codegenNode = context.hoist(child.codegenNode);\r\n                continue;\r\n            }\r\n            else {\r\n                // node may contain dynamic children, but its props may be eligible for\r\n                // hoisting.\r\n                const codegenNode = child.codegenNode;\r\n                if (codegenNode.type === 13 /* JS_CALL_EXPRESSION */) {\r\n                    const flag = getPatchFlag(codegenNode);\r\n                    if ((!flag ||\r\n                        flag === 32 /* NEED_PATCH */ ||\r\n                        flag === 1 /* TEXT */) &&\r\n                        !hasDynamicKeyOrRef(child) &&\r\n                        !hasCachedProps()) {\r\n                        const props = getNodeProps(child);\r\n                        if (props && props !== `null`) {\r\n                            getVNodeCall(codegenNode).arguments[1] = context.hoist(props);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (child.type === 1 /* ELEMENT */) {\r\n            walk(child.children, context, resultCache);\r\n        }\r\n        else if (child.type === 11 /* FOR */) {\r\n            // Do not hoist v-for single child because it has to be a block\r\n            walk(child.children, context, resultCache, child.children.length === 1);\r\n        }\r\n        else if (child.type === 9 /* IF */) {\r\n            for (let i = 0; i < child.branches.length; i++) {\r\n                const branchChildren = child.branches[i].children;\r\n                // Do not hoist v-if single child because it has to be a block\r\n                walk(branchChildren, context, resultCache, branchChildren.length === 1);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction isStaticNode(node, resultCache = new Map()) {\r\n    switch (node.type) {\r\n        case 1 /* ELEMENT */:\r\n            if (node.tagType !== 0 /* ELEMENT */) {\r\n                return false;\r\n            }\r\n            const cached = resultCache.get(node);\r\n            if (cached !== undefined) {\r\n                return cached;\r\n            }\r\n            const codegenNode = node.codegenNode;\r\n            if (codegenNode.type !== 13 /* JS_CALL_EXPRESSION */) {\r\n                return false;\r\n            }\r\n            const flag = getPatchFlag(codegenNode);\r\n            if (!flag && !hasDynamicKeyOrRef(node) && !hasCachedProps()) {\r\n                // element self is static. check its children.\r\n                for (let i = 0; i < node.children.length; i++) {\r\n                    if (!isStaticNode(node.children[i], resultCache)) {\r\n                        resultCache.set(node, false);\r\n                        return false;\r\n                    }\r\n                }\r\n                resultCache.set(node, true);\r\n                return true;\r\n            }\r\n            else {\r\n                resultCache.set(node, false);\r\n                return false;\r\n            }\r\n        case 2 /* TEXT */:\r\n        case 3 /* COMMENT */:\r\n            return true;\r\n        case 9 /* IF */:\r\n        case 11 /* FOR */:\r\n            return false;\r\n        case 5 /* INTERPOLATION */:\r\n        case 12 /* TEXT_CALL */:\r\n            return isStaticNode(node.content, resultCache);\r\n        case 4 /* SIMPLE_EXPRESSION */:\r\n            return node.isConstant;\r\n        case 8 /* COMPOUND_EXPRESSION */:\r\n            return node.children.every(child => {\r\n                return (isString(child) || isSymbol(child) || isStaticNode(child, resultCache));\r\n            });\r\n        default:\r\n            return false;\r\n    }\r\n}\r\nfunction hasDynamicKeyOrRef(node) {\r\n    return !!(findProp(node, 'key', true) || findProp(node, 'ref', true));\r\n}\r\nfunction hasCachedProps(node) {\r\n    {\r\n        return false;\r\n    }\r\n}\r\nfunction getNodeProps(node) {\r\n    const codegenNode = node.codegenNode;\r\n    if (codegenNode.type === 13 /* JS_CALL_EXPRESSION */) {\r\n        return getVNodeArgAt(codegenNode, 1);\r\n    }\r\n}\r\nfunction getVNodeArgAt(node, index) {\r\n    return getVNodeCall(node).arguments[index];\r\n}\r\nfunction getVNodeCall(node) {\r\n    return node.callee === WITH_DIRECTIVES ? node.arguments[0] : node;\r\n}\r\nfunction getPatchFlag(node) {\r\n    const flag = getVNodeArgAt(node, 3);\r\n    return flag ? parseInt(flag, 10) : undefined;\r\n}\n\nfunction createTransformContext(root, { prefixIdentifiers = false, hoistStatic = false, cacheHandlers = false, nodeTransforms = [], directiveTransforms = {}, onError = defaultOnError }) {\r\n    const context = {\r\n        root,\r\n        helpers: new Set(),\r\n        components: new Set(),\r\n        directives: new Set(),\r\n        hoists: [],\r\n        cached: 0,\r\n        identifiers: {},\r\n        scopes: {\r\n            vFor: 0,\r\n            vSlot: 0,\r\n            vPre: 0,\r\n            vOnce: 0\r\n        },\r\n        prefixIdentifiers,\r\n        hoistStatic,\r\n        cacheHandlers,\r\n        nodeTransforms,\r\n        directiveTransforms,\r\n        onError,\r\n        parent: null,\r\n        currentNode: root,\r\n        childIndex: 0,\r\n        helper(name) {\r\n            context.helpers.add(name);\r\n            return name;\r\n        },\r\n        helperString(name) {\r\n            return ((context.prefixIdentifiers ? `` : `_`) +\r\n                helperNameMap[context.helper(name)]);\r\n        },\r\n        replaceNode(node) {\r\n            /* istanbul ignore if */\r\n            {\r\n                if (!context.currentNode) {\r\n                    throw new Error(`Node being replaced is already removed.`);\r\n                }\r\n                if (!context.parent) {\r\n                    throw new Error(`Cannot replace root node.`);\r\n                }\r\n            }\r\n            context.parent.children[context.childIndex] = context.currentNode = node;\r\n        },\r\n        removeNode(node) {\r\n            if ( !context.parent) {\r\n                throw new Error(`Cannot remove root node.`);\r\n            }\r\n            const list = context.parent.children;\r\n            const removalIndex = node\r\n                ? list.indexOf(node)\r\n                : context.currentNode\r\n                    ? context.childIndex\r\n                    : -1;\r\n            /* istanbul ignore if */\r\n            if ( removalIndex < 0) {\r\n                throw new Error(`node being removed is not a child of current parent`);\r\n            }\r\n            if (!node || node === context.currentNode) {\r\n                // current node removed\r\n                context.currentNode = null;\r\n                context.onNodeRemoved();\r\n            }\r\n            else {\r\n                // sibling node removed\r\n                if (context.childIndex > removalIndex) {\r\n                    context.childIndex--;\r\n                    context.onNodeRemoved();\r\n                }\r\n            }\r\n            context.parent.children.splice(removalIndex, 1);\r\n        },\r\n        onNodeRemoved: () => { },\r\n        addIdentifiers(exp) {\r\n        },\r\n        removeIdentifiers(exp) {\r\n        },\r\n        hoist(exp) {\r\n            context.hoists.push(exp);\r\n            return createSimpleExpression(`_hoisted_${context.hoists.length}`, false, exp.loc, true);\r\n        },\r\n        cache(exp, isVNode = false) {\r\n            return createCacheExpression(++context.cached, exp, isVNode);\r\n        }\r\n    };\r\n    return context;\r\n}\r\nfunction transform(root, options) {\r\n    const context = createTransformContext(root, options);\r\n    traverseNode(root, context);\r\n    if (options.hoistStatic) {\r\n        hoistStatic(root, context);\r\n    }\r\n    finalizeRoot(root, context);\r\n}\r\nfunction finalizeRoot(root, context) {\r\n    const { helper } = context;\r\n    const { children } = root;\r\n    const child = children[0];\r\n    if (children.length === 1) {\r\n        // if the single child is an element, turn it into a block.\r\n        if (isSingleElementRoot(root, child) && child.codegenNode) {\r\n            // single element root is never hoisted so codegenNode will never be\r\n            // SimpleExpressionNode\r\n            const codegenNode = child.codegenNode;\r\n            if (codegenNode.type !== 20 /* JS_CACHE_EXPRESSION */) {\r\n                if (codegenNode.callee === WITH_DIRECTIVES) {\r\n                    codegenNode.arguments[0].callee = helper(CREATE_BLOCK);\r\n                }\r\n                else {\r\n                    codegenNode.callee = helper(CREATE_BLOCK);\r\n                }\r\n                root.codegenNode = createBlockExpression(codegenNode, context);\r\n            }\r\n            else {\r\n                root.codegenNode = codegenNode;\r\n            }\r\n        }\r\n        else {\r\n            // - single <slot/>, IfNode, ForNode: already blocks.\r\n            // - single text node: always patched.\r\n            // root codegen falls through via genNode()\r\n            root.codegenNode = child;\r\n        }\r\n    }\r\n    else if (children.length > 1) {\r\n        // root has multiple nodes - return a fragment block.\r\n        root.codegenNode = createBlockExpression(createCallExpression(helper(CREATE_BLOCK), [\r\n            helper(FRAGMENT),\r\n            `null`,\r\n            root.children\r\n        ]), context);\r\n    }\r\n    // finalize meta information\r\n    root.helpers = [...context.helpers];\r\n    root.components = [...context.components];\r\n    root.directives = [...context.directives];\r\n    root.hoists = context.hoists;\r\n    root.cached = context.cached;\r\n}\r\nfunction traverseChildren(parent, context) {\r\n    let i = 0;\r\n    const nodeRemoved = () => {\r\n        i--;\r\n    };\r\n    for (; i < parent.children.length; i++) {\r\n        const child = parent.children[i];\r\n        if (isString(child))\r\n            continue;\r\n        context.currentNode = child;\r\n        context.parent = parent;\r\n        context.childIndex = i;\r\n        context.onNodeRemoved = nodeRemoved;\r\n        traverseNode(child, context);\r\n    }\r\n}\r\nfunction traverseNode(node, context) {\r\n    // apply transform plugins\r\n    const { nodeTransforms } = context;\r\n    const exitFns = [];\r\n    for (let i = 0; i < nodeTransforms.length; i++) {\r\n        const onExit = nodeTransforms[i](node, context);\r\n        if (onExit) {\r\n            if (isArray(onExit)) {\r\n                exitFns.push(...onExit);\r\n            }\r\n            else {\r\n                exitFns.push(onExit);\r\n            }\r\n        }\r\n        if (!context.currentNode) {\r\n            // node was removed\r\n            return;\r\n        }\r\n        else {\r\n            // node may have been replaced\r\n            node = context.currentNode;\r\n        }\r\n    }\r\n    switch (node.type) {\r\n        case 3 /* COMMENT */:\r\n            // inject import for the Comment symbol, which is needed for creating\r\n            // comment nodes with `createVNode`\r\n            context.helper(CREATE_COMMENT);\r\n            break;\r\n        case 5 /* INTERPOLATION */:\r\n            // no need to traverse, but we need to inject toString helper\r\n            context.helper(TO_STRING);\r\n            break;\r\n        // for container types, further traverse downwards\r\n        case 9 /* IF */:\r\n            for (let i = 0; i < node.branches.length; i++) {\r\n                traverseChildren(node.branches[i], context);\r\n            }\r\n            break;\r\n        case 11 /* FOR */:\r\n        case 1 /* ELEMENT */:\r\n        case 0 /* ROOT */:\r\n            traverseChildren(node, context);\r\n            break;\r\n    }\r\n    // exit transforms\r\n    let i = exitFns.length;\r\n    while (i--) {\r\n        exitFns[i]();\r\n    }\r\n}\r\nfunction createStructuralDirectiveTransform(name, fn) {\r\n    const matches = isString(name)\r\n        ? (n) => n === name\r\n        : (n) => name.test(n);\r\n    return (node, context) => {\r\n        if (node.type === 1 /* ELEMENT */) {\r\n            const { props } = node;\r\n            // structural directive transforms are not concerned with slots\r\n            // as they are handled separately in vSlot.ts\r\n            if (node.tagType === 3 /* TEMPLATE */ && props.some(isVSlot)) {\r\n                return;\r\n            }\r\n            const exitFns = [];\r\n            for (let i = 0; i < props.length; i++) {\r\n                const prop = props[i];\r\n                if (prop.type === 7 /* DIRECTIVE */ && matches(prop.name)) {\r\n                    // structural directives are removed to avoid infinite recursion\r\n                    // also we remove them *before* applying so that it can further\r\n                    // traverse itself in case it moves the node around\r\n                    props.splice(i, 1);\r\n                    i--;\r\n                    const onExit = fn(node, prop, context);\r\n                    if (onExit)\r\n                        exitFns.push(onExit);\r\n                }\r\n            }\r\n            return exitFns;\r\n        }\r\n    };\r\n}\n\nfunction createCodegenContext(ast, { mode = 'function', prefixIdentifiers = mode === 'module', sourceMap = false, filename = `template.vue.html` }) {\r\n    const context = {\r\n        mode,\r\n        prefixIdentifiers,\r\n        sourceMap,\r\n        filename,\r\n        source: ast.loc.source,\r\n        code: ``,\r\n        column: 1,\r\n        line: 1,\r\n        offset: 0,\r\n        indentLevel: 0,\r\n        // lazy require source-map implementation, only in non-browser builds!\r\n        map:  undefined\r\n            ,\r\n        helper(key) {\r\n            const name = helperNameMap[key];\r\n            return prefixIdentifiers ? name : `_${name}`;\r\n        },\r\n        push(code, node, openOnly) {\r\n            context.code += code;\r\n        },\r\n        resetMapping(loc) {\r\n        },\r\n        indent() {\r\n            newline(++context.indentLevel);\r\n        },\r\n        deindent(withoutNewLine = false) {\r\n            if (withoutNewLine) {\r\n                --context.indentLevel;\r\n            }\r\n            else {\r\n                newline(--context.indentLevel);\r\n            }\r\n        },\r\n        newline() {\r\n            newline(context.indentLevel);\r\n        }\r\n    };\r\n    function newline(n) {\r\n        context.push('\\n' + `  `.repeat(n));\r\n    }\r\n    return context;\r\n}\r\nfunction generate(ast, options = {}) {\r\n    const context = createCodegenContext(ast, options);\r\n    const { mode, push, helper, prefixIdentifiers, indent, deindent, newline } = context;\r\n    const hasHelpers = ast.helpers.length > 0;\r\n    const useWithBlock = !prefixIdentifiers && mode !== 'module';\r\n    // preambles\r\n    if (mode === 'function') {\r\n        // Generate const declaration for helpers\r\n        // In prefix mode, we place the const declaration at top so it's done\r\n        // only once; But if we not prefixing, we place the declaration inside the\r\n        // with block so it doesn't incur the `in` check cost for every helper access.\r\n        if (hasHelpers) {\r\n            if (prefixIdentifiers) {\r\n                push(`const { ${ast.helpers.map(helper).join(', ')} } = Vue\\n`);\r\n            }\r\n            else {\r\n                // \"with\" mode.\r\n                // save Vue in a separate variable to avoid collision\r\n                push(`const _Vue = Vue\\n`);\r\n                // in \"with\" mode, helpers are declared inside the with block to avoid\r\n                // has check cost, but hoists are lifted out of the function - we need\r\n                // to provide the helper here.\r\n                if (ast.hoists.length) {\r\n                    push(`const _${helperNameMap[CREATE_VNODE]} = Vue.${helperNameMap[CREATE_VNODE]}\\n`);\r\n                    if (ast.helpers.includes(CREATE_COMMENT)) {\r\n                        push(`const _${helperNameMap[CREATE_COMMENT]} = Vue.${helperNameMap[CREATE_COMMENT]}\\n`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        genHoists(ast.hoists, context);\r\n        newline();\r\n        push(`return `);\r\n    }\r\n    else {\r\n        // generate import statements for helpers\r\n        if (hasHelpers) {\r\n            push(`import { ${ast.helpers.map(helper).join(', ')} } from \"vue\"\\n`);\r\n        }\r\n        genHoists(ast.hoists, context);\r\n        newline();\r\n        push(`export default `);\r\n    }\r\n    // enter render function\r\n    push(`function render() {`);\r\n    indent();\r\n    if (useWithBlock) {\r\n        push(`with (this) {`);\r\n        indent();\r\n        // function mode const declarations should be inside with block\r\n        // also they should be renamed to avoid collision with user properties\r\n        if (hasHelpers) {\r\n            push(`const { ${ast.helpers\r\n                .map(s => `${helperNameMap[s]}: _${helperNameMap[s]}`)\r\n                .join(', ')} } = _Vue`);\r\n            newline();\r\n            if (ast.cached > 0) {\r\n                push(`const _cache = $cache`);\r\n                newline();\r\n            }\r\n            newline();\r\n        }\r\n    }\r\n    else {\r\n        push(`const _ctx = this`);\r\n        if (ast.cached > 0) {\r\n            newline();\r\n            push(`const _cache = _ctx.$cache`);\r\n        }\r\n        newline();\r\n    }\r\n    // generate asset resolution statements\r\n    if (ast.components.length) {\r\n        genAssets(ast.components, 'component', context);\r\n    }\r\n    if (ast.directives.length) {\r\n        genAssets(ast.directives, 'directive', context);\r\n    }\r\n    if (ast.components.length || ast.directives.length) {\r\n        newline();\r\n    }\r\n    // generate the VNode tree expression\r\n    push(`return `);\r\n    if (ast.codegenNode) {\r\n        genNode(ast.codegenNode, context);\r\n    }\r\n    else {\r\n        push(`null`);\r\n    }\r\n    if (useWithBlock) {\r\n        deindent();\r\n        push(`}`);\r\n    }\r\n    deindent();\r\n    push(`}`);\r\n    return {\r\n        ast,\r\n        code: context.code,\r\n        map: context.map ? context.map.toJSON() : undefined\r\n    };\r\n}\r\nfunction genAssets(assets, type, context) {\r\n    const resolver = context.helper(type === 'component' ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE);\r\n    for (let i = 0; i < assets.length; i++) {\r\n        const id = assets[i];\r\n        context.push(`const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)})`);\r\n        context.newline();\r\n    }\r\n}\r\nfunction genHoists(hoists, context) {\r\n    if (!hoists.length) {\r\n        return;\r\n    }\r\n    context.newline();\r\n    hoists.forEach((exp, i) => {\r\n        context.push(`const _hoisted_${i + 1} = `);\r\n        genNode(exp, context);\r\n        context.newline();\r\n    });\r\n}\r\nfunction isText(n) {\r\n    return (isString(n) ||\r\n        n.type === 4 /* SIMPLE_EXPRESSION */ ||\r\n        n.type === 2 /* TEXT */ ||\r\n        n.type === 5 /* INTERPOLATION */ ||\r\n        n.type === 8 /* COMPOUND_EXPRESSION */);\r\n}\r\nfunction genNodeListAsArray(nodes, context) {\r\n    const multilines = nodes.length > 3 ||\r\n        ( nodes.some(n => isArray(n) || !isText(n)));\r\n    context.push(`[`);\r\n    multilines && context.indent();\r\n    genNodeList(nodes, context, multilines);\r\n    multilines && context.deindent();\r\n    context.push(`]`);\r\n}\r\nfunction genNodeList(nodes, context, multilines = false) {\r\n    const { push, newline } = context;\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        const node = nodes[i];\r\n        if (isString(node)) {\r\n            push(node);\r\n        }\r\n        else if (isArray(node)) {\r\n            genNodeListAsArray(node, context);\r\n        }\r\n        else {\r\n            genNode(node, context);\r\n        }\r\n        if (i < nodes.length - 1) {\r\n            if (multilines) {\r\n                push(',');\r\n                newline();\r\n            }\r\n            else {\r\n                push(', ');\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction genNode(node, context) {\r\n    if (isString(node)) {\r\n        context.push(node);\r\n        return;\r\n    }\r\n    if (isSymbol(node)) {\r\n        context.push(context.helper(node));\r\n        return;\r\n    }\r\n    switch (node.type) {\r\n        case 1 /* ELEMENT */:\r\n        case 9 /* IF */:\r\n        case 11 /* FOR */:\r\n            \r\n                assert(node.codegenNode != null, `Codegen node is missing for element/if/for node. ` +\r\n                    `Apply appropriate transforms first.`);\r\n            genNode(node.codegenNode, context);\r\n            break;\r\n        case 2 /* TEXT */:\r\n            genText(node, context);\r\n            break;\r\n        case 4 /* SIMPLE_EXPRESSION */:\r\n            genExpression(node, context);\r\n            break;\r\n        case 5 /* INTERPOLATION */:\r\n            genInterpolation(node, context);\r\n            break;\r\n        case 12 /* TEXT_CALL */:\r\n            genNode(node.codegenNode, context);\r\n            break;\r\n        case 8 /* COMPOUND_EXPRESSION */:\r\n            genCompoundExpression(node, context);\r\n            break;\r\n        case 3 /* COMMENT */:\r\n            genComment(node, context);\r\n            break;\r\n        case 13 /* JS_CALL_EXPRESSION */:\r\n            genCallExpression(node, context);\r\n            break;\r\n        case 14 /* JS_OBJECT_EXPRESSION */:\r\n            genObjectExpression(node, context);\r\n            break;\r\n        case 16 /* JS_ARRAY_EXPRESSION */:\r\n            genArrayExpression(node, context);\r\n            break;\r\n        case 17 /* JS_FUNCTION_EXPRESSION */:\r\n            genFunctionExpression(node, context);\r\n            break;\r\n        case 18 /* JS_SEQUENCE_EXPRESSION */:\r\n            genSequenceExpression(node, context);\r\n            break;\r\n        case 19 /* JS_CONDITIONAL_EXPRESSION */:\r\n            genConditionalExpression(node, context);\r\n            break;\r\n        case 20 /* JS_CACHE_EXPRESSION */:\r\n            genCacheExpression(node, context);\r\n            break;\r\n        /* istanbul ignore next */\r\n        default:\r\n            {\r\n                assert(false, `unhandled codegen node type: ${node.type}`);\r\n                // make sure we exhaust all possible types\r\n                const exhaustiveCheck = node;\r\n                return exhaustiveCheck;\r\n            }\r\n    }\r\n}\r\nfunction genText(node, context) {\r\n    context.push(JSON.stringify(node.content), node);\r\n}\r\nfunction genExpression(node, context) {\r\n    const { content, isStatic } = node;\r\n    context.push(isStatic ? JSON.stringify(content) : content, node);\r\n}\r\nfunction genInterpolation(node, context) {\r\n    const { push, helper } = context;\r\n    push(`${helper(TO_STRING)}(`);\r\n    genNode(node.content, context);\r\n    push(`)`);\r\n}\r\nfunction genCompoundExpression(node, context) {\r\n    for (let i = 0; i < node.children.length; i++) {\r\n        const child = node.children[i];\r\n        if (isString(child)) {\r\n            context.push(child);\r\n        }\r\n        else {\r\n            genNode(child, context);\r\n        }\r\n    }\r\n}\r\nfunction genExpressionAsPropertyKey(node, context) {\r\n    const { push } = context;\r\n    if (node.type === 8 /* COMPOUND_EXPRESSION */) {\r\n        push(`[`);\r\n        genCompoundExpression(node, context);\r\n        push(`]`);\r\n    }\r\n    else if (node.isStatic) {\r\n        // only quote keys if necessary\r\n        const text = isSimpleIdentifier(node.content)\r\n            ? node.content\r\n            : JSON.stringify(node.content);\r\n        push(text, node);\r\n    }\r\n    else {\r\n        push(`[${node.content}]`, node);\r\n    }\r\n}\r\nfunction genComment(node, context) {\r\n    {\r\n        const { push, helper } = context;\r\n        push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node);\r\n    }\r\n}\r\n// JavaScript\r\nfunction genCallExpression(node, context) {\r\n    const callee = isString(node.callee)\r\n        ? node.callee\r\n        : context.helper(node.callee);\r\n    context.push(callee + `(`, node, true);\r\n    genNodeList(node.arguments, context);\r\n    context.push(`)`);\r\n}\r\nfunction genObjectExpression(node, context) {\r\n    const { push, indent, deindent, newline, resetMapping } = context;\r\n    const { properties } = node;\r\n    if (!properties.length) {\r\n        push(`{}`, node);\r\n        return;\r\n    }\r\n    const multilines = properties.length > 1 ||\r\n        (\r\n            properties.some(p => p.value.type !== 4 /* SIMPLE_EXPRESSION */));\r\n    push(multilines ? `{` : `{ `);\r\n    multilines && indent();\r\n    for (let i = 0; i < properties.length; i++) {\r\n        const { key, value, loc } = properties[i];\r\n        resetMapping(loc); // reset source mapping for every property.\r\n        // key\r\n        genExpressionAsPropertyKey(key, context);\r\n        push(`: `);\r\n        // value\r\n        genNode(value, context);\r\n        if (i < properties.length - 1) {\r\n            // will only reach this if it's multilines\r\n            push(`,`);\r\n            newline();\r\n        }\r\n    }\r\n    multilines && deindent();\r\n    const lastChar = context.code[context.code.length - 1];\r\n    push(multilines || /[\\])}]/.test(lastChar) ? `}` : ` }`);\r\n}\r\nfunction genArrayExpression(node, context) {\r\n    genNodeListAsArray(node.elements, context);\r\n}\r\nfunction genFunctionExpression(node, context) {\r\n    const { push, indent, deindent } = context;\r\n    const { params, returns, newline } = node;\r\n    push(`(`, node);\r\n    if (isArray(params)) {\r\n        genNodeList(params, context);\r\n    }\r\n    else if (params) {\r\n        genNode(params, context);\r\n    }\r\n    push(`) => `);\r\n    if (newline) {\r\n        push(`{`);\r\n        indent();\r\n        push(`return `);\r\n    }\r\n    if (isArray(returns)) {\r\n        genNodeListAsArray(returns, context);\r\n    }\r\n    else {\r\n        genNode(returns, context);\r\n    }\r\n    if (newline) {\r\n        deindent();\r\n        push(`}`);\r\n    }\r\n}\r\nfunction genConditionalExpression(node, context) {\r\n    const { test, consequent, alternate } = node;\r\n    const { push, indent, deindent, newline } = context;\r\n    if (test.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        const needsParens = !isSimpleIdentifier(test.content);\r\n        needsParens && push(`(`);\r\n        genExpression(test, context);\r\n        needsParens && push(`)`);\r\n    }\r\n    else {\r\n        push(`(`);\r\n        genCompoundExpression(test, context);\r\n        push(`)`);\r\n    }\r\n    indent();\r\n    context.indentLevel++;\r\n    push(`? `);\r\n    genNode(consequent, context);\r\n    context.indentLevel--;\r\n    newline();\r\n    push(`: `);\r\n    const isNested = alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */;\r\n    if (!isNested) {\r\n        context.indentLevel++;\r\n    }\r\n    genNode(alternate, context);\r\n    if (!isNested) {\r\n        context.indentLevel--;\r\n    }\r\n    deindent(true /* without newline */);\r\n}\r\nfunction genSequenceExpression(node, context) {\r\n    context.push(`(`);\r\n    genNodeList(node.expressions, context);\r\n    context.push(`)`);\r\n}\r\nfunction genCacheExpression(node, context) {\r\n    const { push, helper, indent, deindent, newline } = context;\r\n    push(`_cache[${node.index}] || (`);\r\n    if (node.isVNode) {\r\n        indent();\r\n        push(`${helper(SET_BLOCK_TRACKING)}(-1),`);\r\n        newline();\r\n    }\r\n    push(`_cache[${node.index}] = `);\r\n    genNode(node.value, context);\r\n    if (node.isVNode) {\r\n        push(`,`);\r\n        newline();\r\n        push(`${helper(SET_BLOCK_TRACKING)}(1),`);\r\n        newline();\r\n        push(`_cache[${node.index}]`);\r\n        deindent();\r\n    }\r\n    push(`)`);\r\n}\n\nconst transformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, (node, dir, context) => {\r\n    if (dir.name !== 'else' &&\r\n        (!dir.exp || !dir.exp.content.trim())) {\r\n        const loc = dir.exp ? dir.exp.loc : node.loc;\r\n        context.onError(createCompilerError(35 /* X_V_IF_NO_EXPRESSION */, dir.loc));\r\n        dir.exp = createSimpleExpression(`true`, false, loc);\r\n    }\r\n    if (dir.name === 'if') {\r\n        const branch = createIfBranch(node, dir);\r\n        const codegenNode = createSequenceExpression([\r\n            createCallExpression(context.helper(OPEN_BLOCK))\r\n        ]);\r\n        context.replaceNode({\r\n            type: 9 /* IF */,\r\n            loc: node.loc,\r\n            branches: [branch],\r\n            codegenNode\r\n        });\r\n        // Exit callback. Complete the codegenNode when all children have been\r\n        // transformed.\r\n        return () => {\r\n            codegenNode.expressions.push(createCodegenNodeForBranch(branch, 0, context));\r\n        };\r\n    }\r\n    else {\r\n        // locate the adjacent v-if\r\n        const siblings = context.parent.children;\r\n        const comments = [];\r\n        let i = siblings.indexOf(node);\r\n        while (i-- >= -1) {\r\n            const sibling = siblings[i];\r\n            if ( sibling && sibling.type === 3 /* COMMENT */) {\r\n                context.removeNode(sibling);\r\n                comments.unshift(sibling);\r\n                continue;\r\n            }\r\n            if (sibling && sibling.type === 9 /* IF */) {\r\n                // move the node to the if node's branches\r\n                context.removeNode();\r\n                const branch = createIfBranch(node, dir);\r\n                if ( comments.length) {\r\n                    branch.children = [...comments, ...branch.children];\r\n                }\r\n                sibling.branches.push(branch);\r\n                // since the branch was removed, it will not be traversed.\r\n                // make sure to traverse here.\r\n                traverseChildren(branch, context);\r\n                // make sure to reset currentNode after traversal to indicate this\r\n                // node has been removed.\r\n                context.currentNode = null;\r\n                // attach this branch's codegen node to the v-if root.\r\n                let parentCondition = sibling.codegenNode\r\n                    .expressions[1];\r\n                while (true) {\r\n                    if (parentCondition.alternate.type ===\r\n                        19 /* JS_CONDITIONAL_EXPRESSION */) {\r\n                        parentCondition = parentCondition.alternate;\r\n                    }\r\n                    else {\r\n                        parentCondition.alternate = createCodegenNodeForBranch(branch, sibling.branches.length - 1, context);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                context.onError(createCompilerError(36 /* X_V_ELSE_NO_ADJACENT_IF */, node.loc));\r\n            }\r\n            break;\r\n        }\r\n    }\r\n});\r\nfunction createIfBranch(node, dir) {\r\n    return {\r\n        type: 10 /* IF_BRANCH */,\r\n        loc: node.loc,\r\n        condition: dir.name === 'else' ? undefined : dir.exp,\r\n        children: node.tagType === 3 /* TEMPLATE */ ? node.children : [node]\r\n    };\r\n}\r\nfunction createCodegenNodeForBranch(branch, index, context) {\r\n    if (branch.condition) {\r\n        return createConditionalExpression(branch.condition, createChildrenCodegenNode(branch, index, context), \r\n        // make sure to pass in asBlock: true so that the comment node call\r\n        // closes the current block.\r\n        createCallExpression(context.helper(CREATE_COMMENT), [\r\n             '\"v-if\"' ,\r\n            'true'\r\n        ]));\r\n    }\r\n    else {\r\n        return createChildrenCodegenNode(branch, index, context);\r\n    }\r\n}\r\nfunction createChildrenCodegenNode(branch, index, context) {\r\n    const { helper } = context;\r\n    const keyProperty = createObjectProperty(`key`, createSimpleExpression(index + '', false));\r\n    const { children } = branch;\r\n    const child = children[0];\r\n    const needFragmentWrapper = children.length !== 1 || child.type !== 1 /* ELEMENT */;\r\n    if (needFragmentWrapper) {\r\n        const blockArgs = [\r\n            helper(FRAGMENT),\r\n            createObjectExpression([keyProperty]),\r\n            children\r\n        ];\r\n        if (children.length === 1 && child.type === 11 /* FOR */) {\r\n            // optimize away nested fragments when child is a ForNode\r\n            const forBlockArgs = child.codegenNode.expressions[1].arguments;\r\n            // directly use the for block's children and patchFlag\r\n            blockArgs[2] = forBlockArgs[2];\r\n            blockArgs[3] = forBlockArgs[3];\r\n        }\r\n        return createCallExpression(helper(CREATE_BLOCK), blockArgs);\r\n    }\r\n    else {\r\n        const childCodegen = child.codegenNode;\r\n        let vnodeCall = childCodegen;\r\n        // Element with custom directives. Locate the actual createVNode() call.\r\n        if (vnodeCall.callee === WITH_DIRECTIVES) {\r\n            vnodeCall = vnodeCall.arguments[0];\r\n        }\r\n        // Change createVNode to createBlock.\r\n        if (vnodeCall.callee === CREATE_VNODE) {\r\n            vnodeCall.callee = helper(CREATE_BLOCK);\r\n        }\r\n        // inject branch key\r\n        injectProp(vnodeCall, keyProperty, context);\r\n        return childCodegen;\r\n    }\r\n}\n\nconst transformFor = createStructuralDirectiveTransform('for', (node, dir, context) => {\r\n    if (!dir.exp) {\r\n        context.onError(createCompilerError(37 /* X_V_FOR_NO_EXPRESSION */, dir.loc));\r\n        return;\r\n    }\r\n    const parseResult = parseForExpression(\r\n    // can only be simple expression because vFor transform is applied\r\n    // before expression transform.\r\n    dir.exp);\r\n    if (!parseResult) {\r\n        context.onError(createCompilerError(38 /* X_V_FOR_MALFORMED_EXPRESSION */, dir.loc));\r\n        return;\r\n    }\r\n    const { helper, addIdentifiers, removeIdentifiers, scopes } = context;\r\n    const { source, value, key, index } = parseResult;\r\n    // create the loop render function expression now, and add the\r\n    // iterator on exit after all children have been traversed\r\n    const renderExp = createCallExpression(helper(RENDER_LIST), [source]);\r\n    const keyProp = findProp(node, `key`);\r\n    const fragmentFlag = keyProp\r\n        ? 64 /* KEYED_FRAGMENT */\r\n        : 128 /* UNKEYED_FRAGMENT */;\r\n    const codegenNode = createSequenceExpression([\r\n        // fragment blocks disable tracking since they always diff their children\r\n        createCallExpression(helper(OPEN_BLOCK), [`false`]),\r\n        createCallExpression(helper(CREATE_BLOCK), [\r\n            helper(FRAGMENT),\r\n            `null`,\r\n            renderExp,\r\n            fragmentFlag + ( ` /* ${PatchFlagNames[fragmentFlag]} */` )\r\n        ])\r\n    ]);\r\n    context.replaceNode({\r\n        type: 11 /* FOR */,\r\n        loc: dir.loc,\r\n        source,\r\n        valueAlias: value,\r\n        keyAlias: key,\r\n        objectIndexAlias: index,\r\n        children: node.tagType === 3 /* TEMPLATE */ ? node.children : [node],\r\n        codegenNode\r\n    });\r\n    // bookkeeping\r\n    scopes.vFor++;\r\n    return () => {\r\n        scopes.vFor--;\r\n        // finish the codegen now that all children have been traversed\r\n        let childBlock;\r\n        const isTemplate = isTemplateNode(node);\r\n        const slotOutlet = isSlotOutlet(node)\r\n            ? node\r\n            : isTemplate &&\r\n                node.children.length === 1 &&\r\n                isSlotOutlet(node.children[0])\r\n                ? node.children[0]\r\n                : null;\r\n        const keyProperty = keyProp\r\n            ? createObjectProperty(`key`, keyProp.type === 6 /* ATTRIBUTE */\r\n                ? createSimpleExpression(keyProp.value.content, true)\r\n                : keyProp.exp)\r\n            : null;\r\n        if (slotOutlet) {\r\n            // <slot v-for=\"...\"> or <template v-for=\"...\"><slot/></template>\r\n            childBlock = slotOutlet.codegenNode;\r\n            if (isTemplate && keyProperty) {\r\n                // <template v-for=\"...\" :key=\"...\"><slot/></template>\r\n                // we need to inject the key to the renderSlot() call.\r\n                // the props for renderSlot is passed as the 3rd argument.\r\n                injectProp(childBlock, keyProperty, context);\r\n            }\r\n        }\r\n        else if (isTemplate) {\r\n            // <template v-for=\"...\">\r\n            // should generate a fragment block for each loop\r\n            childBlock = createBlockExpression(createCallExpression(helper(CREATE_BLOCK), [\r\n                helper(FRAGMENT),\r\n                keyProperty ? createObjectExpression([keyProperty]) : `null`,\r\n                node.children\r\n            ]), context);\r\n        }\r\n        else {\r\n            // Normal element v-for. Directly use the child's codegenNode\r\n            // arguments, but replace createVNode() with createBlock()\r\n            let codegenNode = node.codegenNode;\r\n            if (codegenNode.callee === WITH_DIRECTIVES) {\r\n                codegenNode.arguments[0].callee = helper(CREATE_BLOCK);\r\n            }\r\n            else {\r\n                codegenNode.callee = helper(CREATE_BLOCK);\r\n            }\r\n            childBlock = createBlockExpression(codegenNode, context);\r\n        }\r\n        renderExp.arguments.push(createFunctionExpression(createForLoopParams(parseResult), childBlock, true /* force newline */));\r\n    };\r\n});\r\nconst forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\r\n// This regex doesn't cover the case if key or index aliases have destructuring,\r\n// but those do not make sense in the first place, so this works in practice.\r\nconst forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\r\nconst stripParensRE = /^\\(|\\)$/g;\r\nfunction parseForExpression(input, context) {\r\n    const loc = input.loc;\r\n    const exp = input.content;\r\n    const inMatch = exp.match(forAliasRE);\r\n    if (!inMatch)\r\n        return;\r\n    const [, LHS, RHS] = inMatch;\r\n    const result = {\r\n        source: createAliasExpression(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),\r\n        value: undefined,\r\n        key: undefined,\r\n        index: undefined\r\n    };\r\n    let valueContent = LHS.trim()\r\n        .replace(stripParensRE, '')\r\n        .trim();\r\n    const trimmedOffset = LHS.indexOf(valueContent);\r\n    const iteratorMatch = valueContent.match(forIteratorRE);\r\n    if (iteratorMatch) {\r\n        valueContent = valueContent.replace(forIteratorRE, '').trim();\r\n        const keyContent = iteratorMatch[1].trim();\r\n        let keyOffset;\r\n        if (keyContent) {\r\n            keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);\r\n            result.key = createAliasExpression(loc, keyContent, keyOffset);\r\n        }\r\n        if (iteratorMatch[2]) {\r\n            const indexContent = iteratorMatch[2].trim();\r\n            if (indexContent) {\r\n                result.index = createAliasExpression(loc, indexContent, exp.indexOf(indexContent, result.key\r\n                    ? keyOffset + keyContent.length\r\n                    : trimmedOffset + valueContent.length));\r\n            }\r\n        }\r\n    }\r\n    if (valueContent) {\r\n        result.value = createAliasExpression(loc, valueContent, trimmedOffset);\r\n    }\r\n    return result;\r\n}\r\nfunction createAliasExpression(range, content, offset) {\r\n    return createSimpleExpression(content, false, getInnerRange(range, offset, content.length));\r\n}\r\nfunction createForLoopParams({ value, key, index }) {\r\n    const params = [];\r\n    if (value) {\r\n        params.push(value);\r\n    }\r\n    if (key) {\r\n        if (!value) {\r\n            params.push(createSimpleExpression(`_`, false));\r\n        }\r\n        params.push(key);\r\n    }\r\n    if (index) {\r\n        if (!key) {\r\n            if (!value) {\r\n                params.push(createSimpleExpression(`_`, false));\r\n            }\r\n            params.push(createSimpleExpression(`__`, false));\r\n        }\r\n        params.push(index);\r\n    }\r\n    return params;\r\n}\n\nconst isStaticExp = (p) => p.type === 4 /* SIMPLE_EXPRESSION */ && p.isStatic;\r\nconst defaultFallback = createSimpleExpression(`undefined`, false);\r\n// A NodeTransform that:\r\n// 1. Tracks scope identifiers for scoped slots so that they don't get prefixed\r\n//    by transformExpression. This is only applied in non-browser builds with\r\n//    { prefixIdentifiers: true }.\r\n// 2. Track v-slot depths so that we know a slot is inside another slot.\r\n//    Note the exit callback is executed before buildSlots() on the same node,\r\n//    so only nested slots see positive numbers.\r\nconst trackSlotScopes = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ &&\r\n        (node.tagType === 1 /* COMPONENT */ ||\r\n            node.tagType === 3 /* TEMPLATE */)) {\r\n        // We are only checking non-empty v-slot here\r\n        // since we only care about slots that introduce scope variables.\r\n        const vSlot = findDir(node, 'slot');\r\n        if (vSlot) {\r\n            const slotProps = vSlot.exp;\r\n            context.scopes.vSlot++;\r\n            return () => {\r\n                context.scopes.vSlot--;\r\n            };\r\n        }\r\n    }\r\n};\r\n// Instead of being a DirectiveTransform, v-slot processing is called during\r\n// transformElement to build the slots object for a component.\r\nfunction buildSlots(node, context) {\r\n    const { children, loc } = node;\r\n    const slotsProperties = [];\r\n    const dynamicSlots = [];\r\n    // If the slot is inside a v-for or another v-slot, force it to be dynamic\r\n    // since it likely uses a scope variable.\r\n    let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;\r\n    // 1. Check for default slot with slotProps on component itself.\r\n    //    <Comp v-slot=\"{ prop }\"/>\r\n    const explicitDefaultSlot = findDir(node, 'slot', true);\r\n    if (explicitDefaultSlot) {\r\n        const { arg, exp, loc } = explicitDefaultSlot;\r\n        if (arg) {\r\n            context.onError(createCompilerError(42 /* X_V_SLOT_NAMED_SLOT_ON_COMPONENT */, loc));\r\n        }\r\n        slotsProperties.push(buildDefaultSlot(exp, children, loc));\r\n    }\r\n    // 2. Iterate through children and check for template slots\r\n    //    <template v-slot:foo=\"{ prop }\">\r\n    let hasTemplateSlots = false;\r\n    let extraneousChild = undefined;\r\n    const seenSlotNames = new Set();\r\n    for (let i = 0; i < children.length; i++) {\r\n        const slotElement = children[i];\r\n        let slotDir;\r\n        if (!isTemplateNode(slotElement) ||\r\n            !(slotDir = findDir(slotElement, 'slot', true))) {\r\n            // not a <template v-slot>, skip.\r\n            if (slotElement.type !== 3 /* COMMENT */ && !extraneousChild) {\r\n                extraneousChild = slotElement;\r\n            }\r\n            continue;\r\n        }\r\n        if (explicitDefaultSlot) {\r\n            // already has on-component default slot - this is incorrect usage.\r\n            context.onError(createCompilerError(43 /* X_V_SLOT_MIXED_SLOT_USAGE */, slotDir.loc));\r\n            break;\r\n        }\r\n        hasTemplateSlots = true;\r\n        const { children: slotChildren, loc: slotLoc } = slotElement;\r\n        const { arg: slotName = createSimpleExpression(`default`, true), exp: slotProps, loc: dirLoc } = slotDir;\r\n        // check if name is dynamic.\r\n        let staticSlotName;\r\n        if (isStaticExp(slotName)) {\r\n            staticSlotName = slotName ? slotName.content : `default`;\r\n        }\r\n        else {\r\n            hasDynamicSlots = true;\r\n        }\r\n        const slotFunction = createFunctionExpression(slotProps, slotChildren, false, slotChildren.length ? slotChildren[0].loc : slotLoc);\r\n        // check if this slot is conditional (v-if/v-for)\r\n        let vIf;\r\n        let vElse;\r\n        let vFor;\r\n        if ((vIf = findDir(slotElement, 'if'))) {\r\n            hasDynamicSlots = true;\r\n            dynamicSlots.push(createConditionalExpression(vIf.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback));\r\n        }\r\n        else if ((vElse = findDir(slotElement, /^else(-if)?$/, true /* allowEmpty */))) {\r\n            // find adjacent v-if\r\n            let j = i;\r\n            let prev;\r\n            while (j--) {\r\n                prev = children[j];\r\n                if (prev.type !== 3 /* COMMENT */) {\r\n                    break;\r\n                }\r\n            }\r\n            if (prev && isTemplateNode(prev) && findDir(prev, 'if')) {\r\n                // remove node\r\n                children.splice(i, 1);\r\n                i--;\r\n                 assert(dynamicSlots.length > 0);\r\n                // attach this slot to previous conditional\r\n                let conditional = dynamicSlots[dynamicSlots.length - 1];\r\n                while (conditional.alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {\r\n                    conditional = conditional.alternate;\r\n                }\r\n                conditional.alternate = vElse.exp\r\n                    ? createConditionalExpression(vElse.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback)\r\n                    : buildDynamicSlot(slotName, slotFunction);\r\n            }\r\n            else {\r\n                context.onError(createCompilerError(36 /* X_V_ELSE_NO_ADJACENT_IF */, vElse.loc));\r\n            }\r\n        }\r\n        else if ((vFor = findDir(slotElement, 'for'))) {\r\n            hasDynamicSlots = true;\r\n            const parseResult = vFor.parseResult ||\r\n                parseForExpression(vFor.exp);\r\n            if (parseResult) {\r\n                // Render the dynamic slots as an array and add it to the createSlot()\r\n                // args. The runtime knows how to handle it appropriately.\r\n                dynamicSlots.push(createCallExpression(context.helper(RENDER_LIST), [\r\n                    parseResult.source,\r\n                    createFunctionExpression(createForLoopParams(parseResult), buildDynamicSlot(slotName, slotFunction), true)\r\n                ]));\r\n            }\r\n            else {\r\n                context.onError(createCompilerError(38 /* X_V_FOR_MALFORMED_EXPRESSION */, vFor.loc));\r\n            }\r\n        }\r\n        else {\r\n            // check duplicate static names\r\n            if (staticSlotName) {\r\n                if (seenSlotNames.has(staticSlotName)) {\r\n                    context.onError(createCompilerError(44 /* X_V_SLOT_DUPLICATE_SLOT_NAMES */, dirLoc));\r\n                    continue;\r\n                }\r\n                seenSlotNames.add(staticSlotName);\r\n            }\r\n            slotsProperties.push(createObjectProperty(slotName, slotFunction));\r\n        }\r\n    }\r\n    if (hasTemplateSlots && extraneousChild) {\r\n        context.onError(createCompilerError(45 /* X_V_SLOT_EXTRANEOUS_NON_SLOT_CHILDREN */, extraneousChild.loc));\r\n    }\r\n    if (!explicitDefaultSlot && !hasTemplateSlots) {\r\n        // implicit default slot.\r\n        slotsProperties.push(buildDefaultSlot(undefined, children, loc));\r\n    }\r\n    let slots = createObjectExpression(slotsProperties.concat(createObjectProperty(`_compiled`, createSimpleExpression(`true`, false))), loc);\r\n    if (dynamicSlots.length) {\r\n        slots = createCallExpression(context.helper(CREATE_SLOTS), [\r\n            slots,\r\n            createArrayExpression(dynamicSlots)\r\n        ]);\r\n    }\r\n    return {\r\n        slots,\r\n        hasDynamicSlots\r\n    };\r\n}\r\nfunction buildDefaultSlot(slotProps, children, loc) {\r\n    return createObjectProperty(`default`, createFunctionExpression(slotProps, children, false, children.length ? children[0].loc : loc));\r\n}\r\nfunction buildDynamicSlot(name, fn) {\r\n    return createObjectExpression([\r\n        createObjectProperty(`name`, name),\r\n        createObjectProperty(`fn`, fn)\r\n    ]);\r\n}\n\n// some directive transforms (e.g. v-model) may return a symbol for runtime\r\n// import, which should be used instead of a resolveDirective call.\r\nconst directiveImportMap = new WeakMap();\r\n// generate a JavaScript AST for this element's codegen\r\nconst transformElement = (node, context) => {\r\n    if (node.type !== 1 /* ELEMENT */ ||\r\n        // handled by transformSlotOutlet\r\n        node.tagType === 2 /* SLOT */ ||\r\n        // <template v-if/v-for> should have already been replaced\r\n        // <templte v-slot> is handled by buildSlots\r\n        (node.tagType === 3 /* TEMPLATE */ && node.props.some(isVSlot))) {\r\n        return;\r\n    }\r\n    // perform the work on exit, after all child expressions have been\r\n    // processed and merged.\r\n    return () => {\r\n        const isComponent = node.tagType === 1 /* COMPONENT */;\r\n        let hasProps = node.props.length > 0;\r\n        let patchFlag = 0;\r\n        let runtimeDirectives;\r\n        let dynamicPropNames;\r\n        let dynamicComponent;\r\n        // handle dynamic component\r\n        const isProp = findProp(node, 'is');\r\n        if (node.tag === 'component') {\r\n            if (isProp) {\r\n                // static <component is=\"foo\" />\r\n                if (isProp.type === 6 /* ATTRIBUTE */) {\r\n                    const tag = isProp.value && isProp.value.content;\r\n                    if (tag) {\r\n                        context.helper(RESOLVE_COMPONENT);\r\n                        context.components.add(tag);\r\n                        dynamicComponent = toValidAssetId(tag, `component`);\r\n                    }\r\n                }\r\n                // dynamic <component :is=\"asdf\" />\r\n                else if (isProp.exp) {\r\n                    dynamicComponent = createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [isProp.exp]);\r\n                }\r\n            }\r\n        }\r\n        if (isComponent && !dynamicComponent) {\r\n            context.helper(RESOLVE_COMPONENT);\r\n            context.components.add(node.tag);\r\n        }\r\n        const args = [\r\n            dynamicComponent\r\n                ? dynamicComponent\r\n                : isComponent\r\n                    ? toValidAssetId(node.tag, `component`)\r\n                    : node.tagType === 4 /* PORTAL */\r\n                        ? context.helper(PORTAL)\r\n                        : node.tagType === 5 /* SUSPENSE */\r\n                            ? context.helper(SUSPENSE)\r\n                            : `\"${node.tag}\"`\r\n        ];\r\n        // props\r\n        if (hasProps) {\r\n            const propsBuildResult = buildProps(node, context, \r\n            // skip reserved \"is\" prop <component is>\r\n            node.props.filter(p => p !== isProp));\r\n            patchFlag = propsBuildResult.patchFlag;\r\n            dynamicPropNames = propsBuildResult.dynamicPropNames;\r\n            runtimeDirectives = propsBuildResult.directives;\r\n            if (!propsBuildResult.props) {\r\n                hasProps = false;\r\n            }\r\n            else {\r\n                args.push(propsBuildResult.props);\r\n            }\r\n        }\r\n        // children\r\n        const hasChildren = node.children.length > 0;\r\n        if (hasChildren) {\r\n            if (!hasProps) {\r\n                args.push(`null`);\r\n            }\r\n            if (isComponent) {\r\n                const { slots, hasDynamicSlots } = buildSlots(node, context);\r\n                args.push(slots);\r\n                if (hasDynamicSlots) {\r\n                    patchFlag |= 256 /* DYNAMIC_SLOTS */;\r\n                }\r\n            }\r\n            else if (node.children.length === 1) {\r\n                const child = node.children[0];\r\n                const type = child.type;\r\n                // check for dynamic text children\r\n                const hasDynamicTextChild = type === 5 /* INTERPOLATION */ ||\r\n                    type === 8 /* COMPOUND_EXPRESSION */;\r\n                if (hasDynamicTextChild && !isStaticNode(child)) {\r\n                    patchFlag |= 1 /* TEXT */;\r\n                }\r\n                // pass directly if the only child is a text node\r\n                // (plain / interpolation / expression)\r\n                if (hasDynamicTextChild || type === 2 /* TEXT */) {\r\n                    args.push(child);\r\n                }\r\n                else {\r\n                    args.push(node.children);\r\n                }\r\n            }\r\n            else {\r\n                args.push(node.children);\r\n            }\r\n        }\r\n        // patchFlag & dynamicPropNames\r\n        if (patchFlag !== 0) {\r\n            if (!hasChildren) {\r\n                if (!hasProps) {\r\n                    args.push(`null`);\r\n                }\r\n                args.push(`null`);\r\n            }\r\n            {\r\n                const flagNames = Object.keys(PatchFlagNames)\r\n                    .map(Number)\r\n                    .filter(n => n > 0 && patchFlag & n)\r\n                    .map(n => PatchFlagNames[n])\r\n                    .join(`, `);\r\n                args.push(patchFlag + ` /* ${flagNames} */`);\r\n            }\r\n            if (dynamicPropNames && dynamicPropNames.length) {\r\n                args.push(`[${dynamicPropNames.map(n => JSON.stringify(n)).join(`, `)}]`);\r\n            }\r\n        }\r\n        const { loc } = node;\r\n        const vnode = createCallExpression(context.helper(CREATE_VNODE), args, loc);\r\n        if (runtimeDirectives && runtimeDirectives.length) {\r\n            node.codegenNode = createCallExpression(context.helper(WITH_DIRECTIVES), [\r\n                vnode,\r\n                createArrayExpression(runtimeDirectives.map(dir => buildDirectiveArgs(dir, context)), loc)\r\n            ], loc);\r\n        }\r\n        else {\r\n            node.codegenNode = vnode;\r\n        }\r\n    };\r\n};\r\nfunction buildProps(node, context, props = node.props) {\r\n    const elementLoc = node.loc;\r\n    const isComponent = node.tagType === 1 /* COMPONENT */;\r\n    let properties = [];\r\n    const mergeArgs = [];\r\n    const runtimeDirectives = [];\r\n    // patchFlag analysis\r\n    let patchFlag = 0;\r\n    let hasRef = false;\r\n    let hasClassBinding = false;\r\n    let hasStyleBinding = false;\r\n    let hasDynamicKeys = false;\r\n    const dynamicPropNames = [];\r\n    const analyzePatchFlag = ({ key, value }) => {\r\n        if (key.type === 4 /* SIMPLE_EXPRESSION */ && key.isStatic) {\r\n            if (value.type === 20 /* JS_CACHE_EXPRESSION */ ||\r\n                ((value.type === 4 /* SIMPLE_EXPRESSION */ ||\r\n                    value.type === 8 /* COMPOUND_EXPRESSION */) &&\r\n                    isStaticNode(value))) {\r\n                return;\r\n            }\r\n            const name = key.content;\r\n            if (name === 'ref') {\r\n                hasRef = true;\r\n            }\r\n            else if (name === 'class') {\r\n                hasClassBinding = true;\r\n            }\r\n            else if (name === 'style') {\r\n                hasStyleBinding = true;\r\n            }\r\n            else if (name !== 'key') {\r\n                dynamicPropNames.push(name);\r\n            }\r\n        }\r\n        else {\r\n            hasDynamicKeys = true;\r\n        }\r\n    };\r\n    for (let i = 0; i < props.length; i++) {\r\n        // static attribute\r\n        const prop = props[i];\r\n        if (prop.type === 6 /* ATTRIBUTE */) {\r\n            const { loc, name, value } = prop;\r\n            if (name === 'ref') {\r\n                hasRef = true;\r\n            }\r\n            properties.push(createObjectProperty(createSimpleExpression(name, true, getInnerRange(loc, 0, name.length)), createSimpleExpression(value ? value.content : '', true, value ? value.loc : loc)));\r\n        }\r\n        else {\r\n            // directives\r\n            const { name, arg, exp, loc } = prop;\r\n            // skip v-slot - it is handled by its dedicated transform.\r\n            if (name === 'slot') {\r\n                if (!isComponent) {\r\n                    context.onError(createCompilerError(46 /* X_V_SLOT_MISPLACED */, loc));\r\n                }\r\n                continue;\r\n            }\r\n            // skip v-once - it is handled by its dedicated transform.\r\n            if (name === 'once') {\r\n                continue;\r\n            }\r\n            // special case for v-bind and v-on with no argument\r\n            const isBind = name === 'bind';\r\n            const isOn = name === 'on';\r\n            if (!arg && (isBind || isOn)) {\r\n                hasDynamicKeys = true;\r\n                if (exp) {\r\n                    if (properties.length) {\r\n                        mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));\r\n                        properties = [];\r\n                    }\r\n                    if (isBind) {\r\n                        mergeArgs.push(exp);\r\n                    }\r\n                    else {\r\n                        // v-on=\"obj\" -> toHandlers(obj)\r\n                        mergeArgs.push({\r\n                            type: 13 /* JS_CALL_EXPRESSION */,\r\n                            loc,\r\n                            callee: context.helper(TO_HANDLERS),\r\n                            arguments: [exp]\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    context.onError(createCompilerError(isBind\r\n                        ? 39 /* X_V_BIND_NO_EXPRESSION */\r\n                        : 40 /* X_V_ON_NO_EXPRESSION */, loc));\r\n                }\r\n                continue;\r\n            }\r\n            const directiveTransform = context.directiveTransforms[name];\r\n            if (directiveTransform) {\r\n                // has built-in directive transform.\r\n                const { props, needRuntime } = directiveTransform(prop, node, context);\r\n                props.forEach(analyzePatchFlag);\r\n                properties.push(...props);\r\n                if (needRuntime) {\r\n                    runtimeDirectives.push(prop);\r\n                    if (isSymbol(needRuntime)) {\r\n                        directiveImportMap.set(prop, needRuntime);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // no built-in transform, this is a user custom directive.\r\n                runtimeDirectives.push(prop);\r\n            }\r\n        }\r\n    }\r\n    let propsExpression = undefined;\r\n    // has v-bind=\"object\" or v-on=\"object\", wrap with mergeProps\r\n    if (mergeArgs.length) {\r\n        if (properties.length) {\r\n            mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));\r\n        }\r\n        if (mergeArgs.length > 1) {\r\n            propsExpression = createCallExpression(context.helper(MERGE_PROPS), mergeArgs, elementLoc);\r\n        }\r\n        else {\r\n            // single v-bind with nothing else - no need for a mergeProps call\r\n            propsExpression = mergeArgs[0];\r\n        }\r\n    }\r\n    else if (properties.length) {\r\n        propsExpression = createObjectExpression(dedupeProperties(properties), elementLoc);\r\n    }\r\n    // patchFlag analysis\r\n    if (hasDynamicKeys) {\r\n        patchFlag |= 16 /* FULL_PROPS */;\r\n    }\r\n    else {\r\n        if (hasClassBinding) {\r\n            patchFlag |= 2 /* CLASS */;\r\n        }\r\n        if (hasStyleBinding) {\r\n            patchFlag |= 4 /* STYLE */;\r\n        }\r\n        if (dynamicPropNames.length) {\r\n            patchFlag |= 8 /* PROPS */;\r\n        }\r\n    }\r\n    if (patchFlag === 0 && (hasRef || runtimeDirectives.length > 0)) {\r\n        patchFlag |= 32 /* NEED_PATCH */;\r\n    }\r\n    return {\r\n        props: propsExpression,\r\n        directives: runtimeDirectives,\r\n        patchFlag,\r\n        dynamicPropNames\r\n    };\r\n}\r\n// Dedupe props in an object literal.\r\n// Literal duplicated attributes would have been warned during the parse phase,\r\n// however, it's possible to encounter duplicated `onXXX` handlers with different\r\n// modifiers. We also need to merge static and dynamic class / style attributes.\r\n// - onXXX handlers / style: merge into array\r\n// - class: merge into single expression with concatenation\r\nfunction dedupeProperties(properties) {\r\n    const knownProps = {};\r\n    const deduped = [];\r\n    for (let i = 0; i < properties.length; i++) {\r\n        const prop = properties[i];\r\n        // dynamic keys are always allowed\r\n        if (prop.key.type === 8 /* COMPOUND_EXPRESSION */ || !prop.key.isStatic) {\r\n            deduped.push(prop);\r\n            continue;\r\n        }\r\n        const name = prop.key.content;\r\n        const existing = knownProps[name];\r\n        if (existing) {\r\n            if (name === 'style' ||\r\n                name === 'class' ||\r\n                name.startsWith('on') ||\r\n                name.startsWith('vnode')) {\r\n                mergeAsArray(existing, prop);\r\n            }\r\n            // unexpected duplicate, should have emitted error during parse\r\n        }\r\n        else {\r\n            knownProps[name] = prop;\r\n            deduped.push(prop);\r\n        }\r\n    }\r\n    return deduped;\r\n}\r\nfunction mergeAsArray(existing, incoming) {\r\n    if (existing.value.type === 16 /* JS_ARRAY_EXPRESSION */) {\r\n        existing.value.elements.push(incoming.value);\r\n    }\r\n    else {\r\n        existing.value = createArrayExpression([existing.value, incoming.value], existing.loc);\r\n    }\r\n}\r\nfunction buildDirectiveArgs(dir, context) {\r\n    const dirArgs = [];\r\n    const runtime = directiveImportMap.get(dir);\r\n    if (runtime) {\r\n        context.helper(runtime);\r\n        dirArgs.push(context.helperString(runtime));\r\n    }\r\n    else {\r\n        // inject statement for resolving directive\r\n        context.helper(RESOLVE_DIRECTIVE);\r\n        context.directives.add(dir.name);\r\n        dirArgs.push(toValidAssetId(dir.name, `directive`));\r\n    }\r\n    const { loc } = dir;\r\n    if (dir.exp)\r\n        dirArgs.push(dir.exp);\r\n    if (dir.arg) {\r\n        if (!dir.exp) {\r\n            dirArgs.push(`void 0`);\r\n        }\r\n        dirArgs.push(dir.arg);\r\n    }\r\n    if (Object.keys(dir.modifiers).length) {\r\n        if (!dir.arg) {\r\n            if (!dir.exp) {\r\n                dirArgs.push(`void 0`);\r\n            }\r\n            dirArgs.push(`void 0`);\r\n        }\r\n        dirArgs.push(createObjectExpression(dir.modifiers.map(modifier => createObjectProperty(modifier, createSimpleExpression(`true`, false, loc))), loc));\r\n    }\r\n    return createArrayExpression(dirArgs, dir.loc);\r\n}\n\nconst transformSlotOutlet = (node, context) => {\r\n    if (isSlotOutlet(node)) {\r\n        const { props, children, loc } = node;\r\n        const $slots = context.prefixIdentifiers ? `_ctx.$slots` : `$slots`;\r\n        let slotName = `\"default\"`;\r\n        // check for <slot name=\"xxx\" OR :name=\"xxx\" />\r\n        let nameIndex = -1;\r\n        for (let i = 0; i < props.length; i++) {\r\n            const prop = props[i];\r\n            if (prop.type === 6 /* ATTRIBUTE */) {\r\n                if (prop.name === `name` && prop.value) {\r\n                    // static name=\"xxx\"\r\n                    slotName = JSON.stringify(prop.value.content);\r\n                    nameIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n            else if (prop.name === `bind`) {\r\n                const { arg, exp } = prop;\r\n                if (arg &&\r\n                    exp &&\r\n                    arg.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n                    arg.isStatic &&\r\n                    arg.content === `name`) {\r\n                    // dynamic :name=\"xxx\"\r\n                    slotName = exp;\r\n                    nameIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const slotArgs = [$slots, slotName];\r\n        const propsWithoutName = nameIndex > -1\r\n            ? props.slice(0, nameIndex).concat(props.slice(nameIndex + 1))\r\n            : props;\r\n        let hasProps = propsWithoutName.length > 0;\r\n        if (hasProps) {\r\n            const { props: propsExpression, directives } = buildProps(node, context, propsWithoutName);\r\n            if (directives.length) {\r\n                context.onError(createCompilerError(41 /* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */, directives[0].loc));\r\n            }\r\n            if (propsExpression) {\r\n                slotArgs.push(propsExpression);\r\n            }\r\n            else {\r\n                hasProps = false;\r\n            }\r\n        }\r\n        if (children.length) {\r\n            if (!hasProps) {\r\n                slotArgs.push(`{}`);\r\n            }\r\n            slotArgs.push(children);\r\n        }\r\n        node.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);\r\n    }\r\n};\n\nconst fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function(?:\\s+[\\w$]+)?\\s*\\(/;\r\nconst transformOn = (dir, node, context, augmentor) => {\r\n    const { loc, modifiers, arg } = dir;\r\n    if (!dir.exp && !modifiers.length) {\r\n        context.onError(createCompilerError(40 /* X_V_ON_NO_EXPRESSION */, loc));\r\n    }\r\n    let eventName;\r\n    if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        if (arg.isStatic) {\r\n            eventName = createSimpleExpression(`on${capitalize(arg.content)}`, true, arg.loc);\r\n        }\r\n        else {\r\n            eventName = createCompoundExpression([`\"on\" + (`, arg, `)`]);\r\n        }\r\n    }\r\n    else {\r\n        // already a compound expression.\r\n        eventName = arg;\r\n        eventName.children.unshift(`\"on\" + (`);\r\n        eventName.children.push(`)`);\r\n    }\r\n    // handler processing\r\n    let exp = dir.exp;\r\n    let isCacheable = !exp;\r\n    if (exp) {\r\n        const isMemberExp = isMemberExpression(exp.content);\r\n        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));\r\n        if (isInlineStatement || (isCacheable && isMemberExp)) {\r\n            // wrap inline statement in a function expression\r\n            exp = createCompoundExpression([\r\n                `$event => (`,\r\n                ...(exp.type === 4 /* SIMPLE_EXPRESSION */ ? [exp] : exp.children),\r\n                `)`\r\n            ]);\r\n        }\r\n    }\r\n    let ret = {\r\n        props: [\r\n            createObjectProperty(eventName, exp || createSimpleExpression(`() => {}`, false, loc))\r\n        ],\r\n        needRuntime: false\r\n    };\r\n    // apply extended compiler augmentor\r\n    if (augmentor) {\r\n        ret = augmentor(ret);\r\n    }\r\n    if (isCacheable) {\r\n        // cache handlers so that it's always the same handler being passed down.\r\n        // this avoids unnecessary re-renders when users use inline hanlders on\r\n        // components.\r\n        ret.props[0].value = context.cache(ret.props[0].value);\r\n    }\r\n    return ret;\r\n};\n\n// v-bind without arg is handled directly in ./element.ts due to it affecting\r\n// codegen for the entire props object. This transform here is only for v-bind\r\n// *with* args.\r\nconst transformBind = (dir, node, context) => {\r\n    const { exp, modifiers, loc } = dir;\r\n    const arg = dir.arg;\r\n    if (!exp) {\r\n        context.onError(createCompilerError(39 /* X_V_BIND_NO_EXPRESSION */, loc));\r\n    }\r\n    // .prop is no longer necessary due to new patch behavior\r\n    // .sync is replaced by v-model:arg\r\n    if (modifiers.includes('camel')) {\r\n        if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n            if (arg.isStatic) {\r\n                arg.content = camelize(arg.content);\r\n            }\r\n            else {\r\n                arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;\r\n            }\r\n        }\r\n        else {\r\n            arg.children.unshift(`${context.helperString(CAMELIZE)}(`);\r\n            arg.children.push(`)`);\r\n        }\r\n    }\r\n    return {\r\n        props: [\r\n            createObjectProperty(arg, exp || createSimpleExpression('', true, loc))\r\n        ],\r\n        needRuntime: false\r\n    };\r\n};\n\nconst isText$1 = (node) => node.type === 5 /* INTERPOLATION */ || node.type === 2 /* TEXT */;\r\n// Merge adjacent text nodes and expressions into a single expression\r\n// e.g. <div>abc {{ d }} {{ e }}</div> should have a single expression node as child.\r\nconst transformText = (node, context) => {\r\n    if (node.type === 0 /* ROOT */ || node.type === 1 /* ELEMENT */) {\r\n        // perform the transform on node exit so that all expressions have already\r\n        // been processed.\r\n        return () => {\r\n            const children = node.children;\r\n            let currentContainer = undefined;\r\n            let hasText = false;\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (isText$1(child)) {\r\n                    hasText = true;\r\n                    for (let j = i + 1; j < children.length; j++) {\r\n                        const next = children[j];\r\n                        if (isText$1(next)) {\r\n                            if (!currentContainer) {\r\n                                currentContainer = children[i] = {\r\n                                    type: 8 /* COMPOUND_EXPRESSION */,\r\n                                    loc: child.loc,\r\n                                    children: [child]\r\n                                };\r\n                            }\r\n                            // merge adjacent text node into current\r\n                            currentContainer.children.push(` + `, next);\r\n                            children.splice(j, 1);\r\n                            j--;\r\n                        }\r\n                        else {\r\n                            currentContainer = undefined;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (hasText && children.length > 1) {\r\n                // when an element has mixed text/element children, convert text nodes\r\n                // into createTextVNode(text) calls.\r\n                for (let i = 0; i < children.length; i++) {\r\n                    const child = children[i];\r\n                    if (isText$1(child) || child.type === 8 /* COMPOUND_EXPRESSION */) {\r\n                        const callArgs = [];\r\n                        // createTextVNode defaults to single whitespace, so if it is a\r\n                        // single space the code could be an empty call to save bytes.\r\n                        if (child.type !== 2 /* TEXT */ || child.content !== ' ') {\r\n                            callArgs.push(child);\r\n                        }\r\n                        // mark dynamic text with flag so it gets patched inside a block\r\n                        if (child.type !== 2 /* TEXT */) {\r\n                            callArgs.push(`${1 /* TEXT */} /* ${PatchFlagNames[1 /* TEXT */]} */`);\r\n                        }\r\n                        children[i] = {\r\n                            type: 12 /* TEXT_CALL */,\r\n                            content: child,\r\n                            loc: child.loc,\r\n                            codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\n\nconst transformOnce = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ && findDir(node, 'once', true)) {\r\n        context.helper(SET_BLOCK_TRACKING);\r\n        return () => {\r\n            if (node.codegenNode) {\r\n                node.codegenNode = context.cache(node.codegenNode, true /* isVNode */);\r\n            }\r\n        };\r\n    }\r\n};\n\nconst transformModel = (dir, node, context) => {\r\n    const { exp, arg } = dir;\r\n    if (!exp) {\r\n        context.onError(createCompilerError(47 /* X_V_MODEL_NO_EXPRESSION */, dir.loc));\r\n        return createTransformProps();\r\n    }\r\n    const expString = exp.type === 4 /* SIMPLE_EXPRESSION */ ? exp.content : exp.loc.source;\r\n    if (!isMemberExpression(expString)) {\r\n        context.onError(createCompilerError(48 /* X_V_MODEL_MALFORMED_EXPRESSION */, exp.loc));\r\n        return createTransformProps();\r\n    }\r\n    const propName = arg ? arg : createSimpleExpression('modelValue', true);\r\n    const eventName = arg\r\n        ? arg.type === 4 /* SIMPLE_EXPRESSION */ && arg.isStatic\r\n            ? createSimpleExpression('onUpdate:' + arg.content, true)\r\n            : createCompoundExpression([\r\n                createSimpleExpression('onUpdate:', true),\r\n                '+',\r\n                ...(arg.type === 4 /* SIMPLE_EXPRESSION */ ? [arg] : arg.children)\r\n            ])\r\n        : createSimpleExpression('onUpdate:modelValue', true);\r\n    const props = [\r\n        // modelValue: foo\r\n        createObjectProperty(propName, dir.exp),\r\n        // \"onUpdate:modelValue\": $event => (foo = $event)\r\n        createObjectProperty(eventName, createCompoundExpression([\r\n            `$event => (`,\r\n            ...(exp.type === 4 /* SIMPLE_EXPRESSION */ ? [exp] : exp.children),\r\n            ` = $event)`\r\n        ]))\r\n    ];\r\n    // modelModifiers: { foo: true, \"bar-baz\": true }\r\n    if (dir.modifiers.length && node.tagType === 1 /* COMPONENT */) {\r\n        const modifiers = dir.modifiers\r\n            .map(m => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`)\r\n            .join(`, `);\r\n        props.push(createObjectProperty(`modelModifiers`, createSimpleExpression(`{ ${modifiers} }`, false, dir.loc, true)));\r\n    }\r\n    return createTransformProps(props);\r\n};\r\nfunction createTransformProps(props = []) {\r\n    return { props, needRuntime: false };\r\n}\n\nconst range = 2;\r\nfunction generateCodeFrame(source, start = 0, end = source.length) {\r\n    const lines = source.split(/\\r?\\n/);\r\n    let count = 0;\r\n    const res = [];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        count += lines[i].length + 1;\r\n        if (count >= start) {\r\n            for (let j = i - range; j <= i + range || end > count; j++) {\r\n                if (j < 0 || j >= lines.length)\r\n                    continue;\r\n                res.push(`${j + 1}${' '.repeat(3 - String(j + 1).length)}|  ${lines[j]}`);\r\n                const lineLength = lines[j].length;\r\n                if (j === i) {\r\n                    // push underline\r\n                    const pad = start - (count - lineLength) + 1;\r\n                    const length = end > count ? lineLength - pad : end - start;\r\n                    res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));\r\n                }\r\n                else if (j > i) {\r\n                    if (end > count) {\r\n                        const length = Math.min(end - count, lineLength);\r\n                        res.push(`   |  ` + '^'.repeat(length));\r\n                    }\r\n                    count += lineLength + 1;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return res.join('\\n');\r\n}\n\n// we name it `baseCompile` so that higher order compilers like @vue/compiler-dom\r\n// can export `compile` while re-exporting everything else.\r\nfunction baseCompile(template, options = {}) {\r\n    /* istanbul ignore if */\r\n    {\r\n        const onError = options.onError || defaultOnError;\r\n        if (options.prefixIdentifiers === true) {\r\n            onError(createCompilerError(51 /* X_PREFIX_ID_NOT_SUPPORTED */));\r\n        }\r\n        else if (options.mode === 'module') {\r\n            onError(createCompilerError(52 /* X_MODULE_MODE_NOT_SUPPORTED */));\r\n        }\r\n    }\r\n    const ast = isString(template) ? parse(template, options) : template;\r\n    const prefixIdentifiers =  false &&\r\n        (false);\r\n    transform(ast, {\r\n        ...options,\r\n        prefixIdentifiers,\r\n        nodeTransforms: [\r\n            transformOnce,\r\n            transformIf,\r\n            transformFor,\r\n            ...( []),\r\n            transformSlotOutlet,\r\n            transformElement,\r\n            trackSlotScopes,\r\n            transformText,\r\n            ...(options.nodeTransforms || []) // user transforms\r\n        ],\r\n        directiveTransforms: {\r\n            on: transformOn,\r\n            bind: transformBind,\r\n            model: transformModel,\r\n            ...(options.directiveTransforms || {}) // user transforms\r\n        }\r\n    });\r\n    return generate(ast, {\r\n        ...options,\r\n        prefixIdentifiers\r\n    });\r\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element\r\nconst HTML_TAGS = 'html,body,base,head,link,meta,style,title,address,article,aside,footer,' +\r\n    'header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,' +\r\n    'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,' +\r\n    'data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,' +\r\n    'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,' +\r\n    'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,' +\r\n    'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,' +\r\n    'option,output,progress,select,textarea,details,dialog,menu,menuitem,' +\r\n    'summary,content,element,shadow,template,blockquote,iframe,tfoot';\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element\r\nconst SVG_TAGS = 'svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,' +\r\n    'defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,' +\r\n    'feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,' +\r\n    'feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,' +\r\n    'feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,' +\r\n    'fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,' +\r\n    'foreignObject,g,hatch,hatchpath,image,line,lineGradient,marker,mask,' +\r\n    'mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,' +\r\n    'polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,' +\r\n    'text,textPath,title,tspan,unknown,use,view';\r\nconst VOID_TAGS = 'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr';\r\nconst isHTMLTag = /*#__PURE__*/ makeMap(HTML_TAGS);\r\nconst isSVGTag = /*#__PURE__*/ makeMap(SVG_TAGS);\r\nconst isVoidTag = /*#__PURE__*/ makeMap(VOID_TAGS);\n\nconst isRawTextContainer = /*#__PURE__*/ makeMap('style,iframe,script,noscript', true);\r\nconst parserOptionsMinimal = {\r\n    isVoidTag,\r\n    isNativeTag: tag => isHTMLTag(tag) || isSVGTag(tag),\r\n    isPreTag: tag => tag === 'pre',\r\n    // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher\r\n    getNamespace(tag, parent) {\r\n        let ns = parent ? parent.ns : 0 /* HTML */;\r\n        if (parent && ns === 2 /* MATH_ML */) {\r\n            if (parent.tag === 'annotation-xml') {\r\n                if (tag === 'svg') {\r\n                    return 1 /* SVG */;\r\n                }\r\n                if (parent.props.some(a => a.type === 6 /* ATTRIBUTE */ &&\r\n                    a.name === 'encoding' &&\r\n                    a.value != null &&\r\n                    (a.value.content === 'text/html' ||\r\n                        a.value.content === 'application/xhtml+xml'))) {\r\n                    ns = 0 /* HTML */;\r\n                }\r\n            }\r\n            else if (/^m(?:[ions]|text)$/.test(parent.tag) &&\r\n                tag !== 'mglyph' &&\r\n                tag !== 'malignmark') {\r\n                ns = 0 /* HTML */;\r\n            }\r\n        }\r\n        else if (parent && ns === 1 /* SVG */) {\r\n            if (parent.tag === 'foreignObject' ||\r\n                parent.tag === 'desc' ||\r\n                parent.tag === 'title') {\r\n                ns = 0 /* HTML */;\r\n            }\r\n        }\r\n        if (ns === 0 /* HTML */) {\r\n            if (tag === 'svg') {\r\n                return 1 /* SVG */;\r\n            }\r\n            if (tag === 'math') {\r\n                return 2 /* MATH_ML */;\r\n            }\r\n        }\r\n        return ns;\r\n    },\r\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments\r\n    getTextMode(tag, ns) {\r\n        if (ns === 0 /* HTML */) {\r\n            if (tag === 'textarea' || tag === 'title') {\r\n                return 1 /* RCDATA */;\r\n            }\r\n            if (isRawTextContainer(tag)) {\r\n                return 2 /* RAWTEXT */;\r\n            }\r\n        }\r\n        return 0 /* DATA */;\r\n    }\r\n};\n\n// Parse inline CSS strings for static style attributes into an object.\r\n// This is a NodeTransform since it works on the static `style` attribute and\r\n// converts it into a dynamic equivalent:\r\n// style=\"color: red\" -> :style='{ \"color\": \"red\" }'\r\n// It is then processed by `transformElement` and included in the generated\r\n// props.\r\nconst transformStyle = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */) {\r\n        node.props.forEach((p, i) => {\r\n            if (p.type === 6 /* ATTRIBUTE */ && p.name === 'style' && p.value) {\r\n                // replace p with an expression node\r\n                const parsed = JSON.stringify(parseInlineCSS(p.value.content));\r\n                const exp = context.hoist(createSimpleExpression(parsed, false, p.loc));\r\n                node.props[i] = {\r\n                    type: 7 /* DIRECTIVE */,\r\n                    name: `bind`,\r\n                    arg: createSimpleExpression(`style`, true, p.loc),\r\n                    exp,\r\n                    modifiers: [],\r\n                    loc: p.loc\r\n                };\r\n            }\r\n        });\r\n    }\r\n};\r\nconst listDelimiterRE = /;(?![^(]*\\))/g;\r\nconst propertyDelimiterRE = /:(.+)/;\r\nfunction parseInlineCSS(cssText) {\r\n    const res = {};\r\n    cssText.split(listDelimiterRE).forEach(function (item) {\r\n        if (item) {\r\n            const tmp = item.split(propertyDelimiterRE);\r\n            tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\r\n        }\r\n    });\r\n    return res;\r\n}\n\nconst transformCloak = (node, context) => {\r\n    return { props: [], needRuntime: false };\r\n};\n\nfunction createDOMCompilerError(code, loc) {\r\n    return createCompilerError(code, loc,  DOMErrorMessages );\r\n}\r\nconst DOMErrorMessages = {\r\n    [53 /* X_V_HTML_NO_EXPRESSION */]: `v-html is missing expression.`,\r\n    [54 /* X_V_HTML_WITH_CHILDREN */]: `v-html will override element children.`,\r\n    [55 /* X_V_TEXT_NO_EXPRESSION */]: `v-text is missing expression.`,\r\n    [56 /* X_V_TEXT_WITH_CHILDREN */]: `v-text will override element children.`,\r\n    [57 /* X_V_MODEL_ON_INVALID_ELEMENT */]: `v-model can only be used on <input>, <textarea> and <select> elements.`,\r\n    [58 /* X_V_MODEL_ARG_ON_ELEMENT */]: `v-model argument is not supported on plain elements.`,\r\n    [59 /* X_V_MODEL_ON_FILE_INPUT_ELEMENT */]: `v-model cannot used on file inputs since they are read-only. Use a v-on:change listener instead.`\r\n};\n\nconst transformVHtml = (dir, node, context) => {\r\n    const { exp, loc } = dir;\r\n    if (!exp) {\r\n        context.onError(createDOMCompilerError(53 /* X_V_HTML_NO_EXPRESSION */, loc));\r\n    }\r\n    if (node.children.length) {\r\n        context.onError(createDOMCompilerError(54 /* X_V_HTML_WITH_CHILDREN */, loc));\r\n        node.children.length = 0;\r\n    }\r\n    return {\r\n        props: [\r\n            createObjectProperty(createSimpleExpression(`innerHTML`, true, loc), exp || createSimpleExpression('', true))\r\n        ],\r\n        needRuntime: false\r\n    };\r\n};\n\nconst transformVText = (dir, node, context) => {\r\n    const { exp, loc } = dir;\r\n    if (!exp) {\r\n        context.onError(createDOMCompilerError(55 /* X_V_TEXT_NO_EXPRESSION */, loc));\r\n    }\r\n    if (node.children.length) {\r\n        context.onError(createDOMCompilerError(56 /* X_V_TEXT_WITH_CHILDREN */, loc));\r\n        node.children.length = 0;\r\n    }\r\n    return {\r\n        props: [\r\n            createObjectProperty(createSimpleExpression(`textContent`, true, loc), exp || createSimpleExpression('', true))\r\n        ],\r\n        needRuntime: false\r\n    };\r\n};\n\nconst V_MODEL_RADIO = Symbol( `vModelRadio` );\r\nconst V_MODEL_CHECKBOX = Symbol( `vModelCheckbox` );\r\nconst V_MODEL_TEXT = Symbol( `vModelText` );\r\nconst V_MODEL_SELECT = Symbol( `vModelSelect` );\r\nconst V_MODEL_DYNAMIC = Symbol( `vModelDynamic` );\r\nconst V_ON_WITH_MODIFIERS = Symbol( `vOnModifiersGuard` );\r\nconst V_ON_WITH_KEYS = Symbol( `vOnKeysGuard` );\r\nregisterRuntimeHelpers({\r\n    [V_MODEL_RADIO]: `vModelRadio`,\r\n    [V_MODEL_CHECKBOX]: `vModelCheckbox`,\r\n    [V_MODEL_TEXT]: `vModelText`,\r\n    [V_MODEL_SELECT]: `vModelSelect`,\r\n    [V_MODEL_DYNAMIC]: `vModelDynamic`,\r\n    [V_ON_WITH_MODIFIERS]: `withModifiers`,\r\n    [V_ON_WITH_KEYS]: `withKeys`\r\n});\n\nconst transformModel$1 = (dir, node, context) => {\r\n    const baseResult = transformModel(dir, node, context);\r\n    // base transform has errors\r\n    if (!baseResult.props.length) {\r\n        return baseResult;\r\n    }\r\n    const { tag, tagType } = node;\r\n    if (tagType === 0 /* ELEMENT */) {\r\n        if (dir.arg) {\r\n            context.onError(createDOMCompilerError(58 /* X_V_MODEL_ARG_ON_ELEMENT */, dir.arg.loc));\r\n        }\r\n        if (tag === 'input' || tag === 'textarea' || tag === 'select') {\r\n            let directiveToUse = V_MODEL_TEXT;\r\n            let isInvalidType = false;\r\n            if (tag === 'input') {\r\n                const type = findProp(node, `type`);\r\n                if (type) {\r\n                    if (type.type === 7 /* DIRECTIVE */) {\r\n                        // :type=\"foo\"\r\n                        directiveToUse = V_MODEL_DYNAMIC;\r\n                    }\r\n                    else if (type.value) {\r\n                        switch (type.value.content) {\r\n                            case 'radio':\r\n                                directiveToUse = V_MODEL_RADIO;\r\n                                break;\r\n                            case 'checkbox':\r\n                                directiveToUse = V_MODEL_CHECKBOX;\r\n                                break;\r\n                            case 'file':\r\n                                isInvalidType = true;\r\n                                context.onError(createDOMCompilerError(59 /* X_V_MODEL_ON_FILE_INPUT_ELEMENT */, dir.loc));\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (tag === 'select') {\r\n                directiveToUse = V_MODEL_SELECT;\r\n            }\r\n            // inject runtime directive\r\n            // by returning the helper symbol via needRuntime\r\n            // the import will replaced a resolveDirective call.\r\n            if (!isInvalidType) {\r\n                baseResult.needRuntime = context.helper(directiveToUse);\r\n            }\r\n        }\r\n        else {\r\n            context.onError(createDOMCompilerError(57 /* X_V_MODEL_ON_INVALID_ELEMENT */, dir.loc));\r\n        }\r\n    }\r\n    return baseResult;\r\n};\n\nconst isEventOptionModifier = /*#__PURE__*/ makeMap(`passive,once,capture`);\r\nconst isNonKeyModifier = /*#__PURE__*/ makeMap(\r\n// event propagation management\r\n`stop,prevent,self,` +\r\n    // system modifiers + exact\r\n    `ctrl,shift,alt,meta,exact,` +\r\n    // mouse\r\n    `left,middle,right`);\r\nconst isKeyboardEvent = /*#__PURE__*/ makeMap(`onkeyup,onkeydown,onkeypress`, true);\r\nconst transformOn$1 = (dir, node, context) => {\r\n    return transformOn(dir, node, context, baseResult => {\r\n        const { modifiers } = dir;\r\n        if (!modifiers.length)\r\n            return baseResult;\r\n        let { key, value: handlerExp } = baseResult.props[0];\r\n        // modifiers for addEventListener() options, e.g. .passive & .capture\r\n        const eventOptionModifiers = modifiers.filter(isEventOptionModifier);\r\n        // modifiers that needs runtime guards\r\n        const runtimeModifiers = modifiers.filter(m => !isEventOptionModifier(m));\r\n        // built-in modifiers that are not keys\r\n        const nonKeyModifiers = runtimeModifiers.filter(isNonKeyModifier);\r\n        if (nonKeyModifiers.length) {\r\n            handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [\r\n                handlerExp,\r\n                JSON.stringify(nonKeyModifiers)\r\n            ]);\r\n        }\r\n        const keyModifiers = runtimeModifiers.filter(m => !isNonKeyModifier(m));\r\n        if (keyModifiers.length &&\r\n            // if event name is dynamic, always wrap with keys guard\r\n            (key.type === 8 /* COMPOUND_EXPRESSION */ ||\r\n                !key.isStatic ||\r\n                isKeyboardEvent(key.content))) {\r\n            handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [\r\n                handlerExp,\r\n                JSON.stringify(keyModifiers)\r\n            ]);\r\n        }\r\n        if (eventOptionModifiers.length) {\r\n            handlerExp = createObjectExpression([\r\n                createObjectProperty('handler', handlerExp),\r\n                createObjectProperty('options', createObjectExpression(eventOptionModifiers.map(modifier => createObjectProperty(modifier, createSimpleExpression('true', false)))))\r\n            ]);\r\n        }\r\n        return {\r\n            props: [createObjectProperty(key, handlerExp)],\r\n            needRuntime: false\r\n        };\r\n    });\r\n};\n\nfunction compile(template, options = {}) {\r\n    return baseCompile(template, {\r\n        ...options,\r\n        ...( parserOptionsMinimal ),\r\n        nodeTransforms: [transformStyle, ...(options.nodeTransforms || [])],\r\n        directiveTransforms: {\r\n            cloak: transformCloak,\r\n            html: transformVHtml,\r\n            text: transformVText,\r\n            model: transformModel$1,\r\n            on: transformOn$1,\r\n            ...(options.directiveTransforms || {})\r\n        }\r\n    });\r\n}\n\n// implementation, close to no-op\r\nfunction createComponent(options) {\r\n    return isFunction(options) ? { setup: options } : options;\r\n}\n\n// global immutability lock\r\nlet LOCKED = true;\r\nfunction lock() {\r\n    LOCKED = true;\r\n}\r\nfunction unlock() {\r\n    LOCKED = false;\r\n}\n\nconst builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol)\r\n    .map(key => Symbol[key])\r\n    .filter(isSymbol));\r\nfunction createGetter(isReadonly) {\r\n    return function get(target, key, receiver) {\r\n        const res = Reflect.get(target, key, receiver);\r\n        if (isSymbol(key) && builtInSymbols.has(key)) {\r\n            return res;\r\n        }\r\n        if (isRef(res)) {\r\n            return res.value;\r\n        }\r\n        track(target, \"get\" /* GET */, key);\r\n        return isObject(res)\r\n            ? isReadonly\r\n                ? // need to lazy access readonly and reactive here to avoid\r\n                    // circular dependency\r\n                    readonly(res)\r\n                : reactive(res)\r\n            : res;\r\n    };\r\n}\r\nfunction set(target, key, value, receiver) {\r\n    value = toRaw(value);\r\n    const oldValue = target[key];\r\n    if (isRef(oldValue) && !isRef(value)) {\r\n        oldValue.value = value;\r\n        return true;\r\n    }\r\n    const hadKey = hasOwn(target, key);\r\n    const result = Reflect.set(target, key, value, receiver);\r\n    // don't trigger if target is something up in the prototype chain of original\r\n    if (target === toRaw(receiver)) {\r\n        /* istanbul ignore else */\r\n        {\r\n            const extraInfo = { oldValue, newValue: value };\r\n            if (!hadKey) {\r\n                trigger(target, \"add\" /* ADD */, key, extraInfo);\r\n            }\r\n            else if (hasChanged(value, oldValue)) {\r\n                trigger(target, \"set\" /* SET */, key, extraInfo);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction deleteProperty(target, key) {\r\n    const hadKey = hasOwn(target, key);\r\n    const oldValue = target[key];\r\n    const result = Reflect.deleteProperty(target, key);\r\n    if (result && hadKey) {\r\n        /* istanbul ignore else */\r\n        {\r\n            trigger(target, \"delete\" /* DELETE */, key, { oldValue });\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction has(target, key) {\r\n    const result = Reflect.has(target, key);\r\n    track(target, \"has\" /* HAS */, key);\r\n    return result;\r\n}\r\nfunction ownKeys(target) {\r\n    track(target, \"iterate\" /* ITERATE */);\r\n    return Reflect.ownKeys(target);\r\n}\r\nconst mutableHandlers = {\r\n    get: createGetter(false),\r\n    set,\r\n    deleteProperty,\r\n    has,\r\n    ownKeys\r\n};\r\nconst readonlyHandlers = {\r\n    get: createGetter(true),\r\n    set(target, key, value, receiver) {\r\n        if (LOCKED) {\r\n            {\r\n                console.warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`, target);\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            return set(target, key, value, receiver);\r\n        }\r\n    },\r\n    deleteProperty(target, key) {\r\n        if (LOCKED) {\r\n            {\r\n                console.warn(`Delete operation on key \"${String(key)}\" failed: target is readonly.`, target);\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            return deleteProperty(target, key);\r\n        }\r\n    },\r\n    has,\r\n    ownKeys\r\n};\n\nconst toReactive = (value) => isObject(value) ? reactive(value) : value;\r\nconst toReadonly = (value) => isObject(value) ? readonly(value) : value;\r\nconst getProto = (v) => Reflect.getPrototypeOf(v);\r\nfunction get(target, key, wrap) {\r\n    target = toRaw(target);\r\n    key = toRaw(key);\r\n    track(target, \"get\" /* GET */, key);\r\n    return wrap(getProto(target).get.call(target, key));\r\n}\r\nfunction has$1(key) {\r\n    const target = toRaw(this);\r\n    key = toRaw(key);\r\n    track(target, \"has\" /* HAS */, key);\r\n    return getProto(target).has.call(target, key);\r\n}\r\nfunction size(target) {\r\n    target = toRaw(target);\r\n    track(target, \"iterate\" /* ITERATE */);\r\n    return Reflect.get(getProto(target), 'size', target);\r\n}\r\nfunction add(value) {\r\n    value = toRaw(value);\r\n    const target = toRaw(this);\r\n    const proto = getProto(target);\r\n    const hadKey = proto.has.call(target, value);\r\n    const result = proto.add.call(target, value);\r\n    if (!hadKey) {\r\n        /* istanbul ignore else */\r\n        {\r\n            trigger(target, \"add\" /* ADD */, value, { newValue: value });\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction set$1(key, value) {\r\n    value = toRaw(value);\r\n    const target = toRaw(this);\r\n    const proto = getProto(target);\r\n    const hadKey = proto.has.call(target, key);\r\n    const oldValue = proto.get.call(target, key);\r\n    const result = proto.set.call(target, key, value);\r\n    /* istanbul ignore else */\r\n    {\r\n        const extraInfo = { oldValue, newValue: value };\r\n        if (!hadKey) {\r\n            trigger(target, \"add\" /* ADD */, key, extraInfo);\r\n        }\r\n        else if (hasChanged(value, oldValue)) {\r\n            trigger(target, \"set\" /* SET */, key, extraInfo);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction deleteEntry(key) {\r\n    const target = toRaw(this);\r\n    const proto = getProto(target);\r\n    const hadKey = proto.has.call(target, key);\r\n    const oldValue = proto.get ? proto.get.call(target, key) : undefined;\r\n    // forward the operation before queueing reactions\r\n    const result = proto.delete.call(target, key);\r\n    if (hadKey) {\r\n        /* istanbul ignore else */\r\n        {\r\n            trigger(target, \"delete\" /* DELETE */, key, { oldValue });\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction clear() {\r\n    const target = toRaw(this);\r\n    const hadItems = target.size !== 0;\r\n    const oldTarget =  target instanceof Map\r\n            ? new Map(target)\r\n            : new Set(target)\r\n        ;\r\n    // forward the operation before queueing reactions\r\n    const result = getProto(target).clear.call(target);\r\n    if (hadItems) {\r\n        /* istanbul ignore else */\r\n        {\r\n            trigger(target, \"clear\" /* CLEAR */, void 0, { oldTarget });\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction createForEach(isReadonly) {\r\n    return function forEach(callback, thisArg) {\r\n        const observed = this;\r\n        const target = toRaw(observed);\r\n        const wrap = isReadonly ? toReadonly : toReactive;\r\n        track(target, \"iterate\" /* ITERATE */);\r\n        // important: create sure the callback is\r\n        // 1. invoked with the reactive map as `this` and 3rd arg\r\n        // 2. the value received should be a corresponding reactive/readonly.\r\n        function wrappedCallback(value, key) {\r\n            return callback.call(observed, wrap(value), wrap(key), observed);\r\n        }\r\n        return getProto(target).forEach.call(target, wrappedCallback, thisArg);\r\n    };\r\n}\r\nfunction createIterableMethod(method, isReadonly) {\r\n    return function (...args) {\r\n        const target = toRaw(this);\r\n        const isPair = method === 'entries' ||\r\n            (method === Symbol.iterator && target instanceof Map);\r\n        const innerIterator = getProto(target)[method].apply(target, args);\r\n        const wrap = isReadonly ? toReadonly : toReactive;\r\n        track(target, \"iterate\" /* ITERATE */);\r\n        // return a wrapped iterator which returns observed versions of the\r\n        // values emitted from the real iterator\r\n        return {\r\n            // iterator protocol\r\n            next() {\r\n                const { value, done } = innerIterator.next();\r\n                return done\r\n                    ? { value, done }\r\n                    : {\r\n                        value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\r\n                        done\r\n                    };\r\n            },\r\n            // iterable protocol\r\n            [Symbol.iterator]() {\r\n                return this;\r\n            }\r\n        };\r\n    };\r\n}\r\nfunction createReadonlyMethod(method, type) {\r\n    return function (...args) {\r\n        if (LOCKED) {\r\n            {\r\n                const key = args[0] ? `on key \"${args[0]}\" ` : ``;\r\n                console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));\r\n            }\r\n            return type === \"delete\" /* DELETE */ ? false : this;\r\n        }\r\n        else {\r\n            return method.apply(this, args);\r\n        }\r\n    };\r\n}\r\nconst mutableInstrumentations = {\r\n    get(key) {\r\n        return get(this, key, toReactive);\r\n    },\r\n    get size() {\r\n        return size(this);\r\n    },\r\n    has: has$1,\r\n    add,\r\n    set: set$1,\r\n    delete: deleteEntry,\r\n    clear,\r\n    forEach: createForEach(false)\r\n};\r\nconst readonlyInstrumentations = {\r\n    get(key) {\r\n        return get(this, key, toReadonly);\r\n    },\r\n    get size() {\r\n        return size(this);\r\n    },\r\n    has: has$1,\r\n    add: createReadonlyMethod(add, \"add\" /* ADD */),\r\n    set: createReadonlyMethod(set$1, \"set\" /* SET */),\r\n    delete: createReadonlyMethod(deleteEntry, \"delete\" /* DELETE */),\r\n    clear: createReadonlyMethod(clear, \"clear\" /* CLEAR */),\r\n    forEach: createForEach(true)\r\n};\r\nconst iteratorMethods = ['keys', 'values', 'entries', Symbol.iterator];\r\niteratorMethods.forEach(method => {\r\n    mutableInstrumentations[method] = createIterableMethod(method, false);\r\n    readonlyInstrumentations[method] = createIterableMethod(method, true);\r\n});\r\nfunction createInstrumentationGetter(instrumentations) {\r\n    return (target, key, receiver) => Reflect.get(hasOwn(instrumentations, key) && key in target\r\n        ? instrumentations\r\n        : target, key, receiver);\r\n}\r\nconst mutableCollectionHandlers = {\r\n    get: createInstrumentationGetter(mutableInstrumentations)\r\n};\r\nconst readonlyCollectionHandlers = {\r\n    get: createInstrumentationGetter(readonlyInstrumentations)\r\n};\n\nconst targetMap = new WeakMap();\r\n// WeakMaps that store {raw <-> observed} pairs.\r\nconst rawToReactive = new WeakMap();\r\nconst reactiveToRaw = new WeakMap();\r\nconst rawToReadonly = new WeakMap();\r\nconst readonlyToRaw = new WeakMap();\r\n// WeakSets for values that are marked readonly or non-reactive during\r\n// observable creation.\r\nconst readonlyValues = new WeakSet();\r\nconst nonReactiveValues = new WeakSet();\r\nconst collectionTypes = new Set([Set, Map, WeakMap, WeakSet]);\r\nconst isObservableType = /*#__PURE__*/ makeMap('Object,Array,Map,Set,WeakMap,WeakSet');\r\nconst canObserve = (value) => {\r\n    return (!value._isVue &&\r\n        !value._isVNode &&\r\n        isObservableType(toRawType(value)) &&\r\n        !nonReactiveValues.has(value));\r\n};\r\nfunction reactive(target) {\r\n    // if trying to observe a readonly proxy, return the readonly version.\r\n    if (readonlyToRaw.has(target)) {\r\n        return target;\r\n    }\r\n    // target is explicitly marked as readonly by user\r\n    if (readonlyValues.has(target)) {\r\n        return readonly(target);\r\n    }\r\n    return createReactiveObject(target, rawToReactive, reactiveToRaw, mutableHandlers, mutableCollectionHandlers);\r\n}\r\nfunction readonly(target) {\r\n    // value is a mutable observable, retrieve its original and return\r\n    // a readonly version.\r\n    if (reactiveToRaw.has(target)) {\r\n        target = reactiveToRaw.get(target);\r\n    }\r\n    return createReactiveObject(target, rawToReadonly, readonlyToRaw, readonlyHandlers, readonlyCollectionHandlers);\r\n}\r\nfunction createReactiveObject(target, toProxy, toRaw, baseHandlers, collectionHandlers) {\r\n    if (!isObject(target)) {\r\n        {\r\n            console.warn(`value cannot be made reactive: ${String(target)}`);\r\n        }\r\n        return target;\r\n    }\r\n    // target already has corresponding Proxy\r\n    let observed = toProxy.get(target);\r\n    if (observed !== void 0) {\r\n        return observed;\r\n    }\r\n    // target is already a Proxy\r\n    if (toRaw.has(target)) {\r\n        return target;\r\n    }\r\n    // only a whitelist of value types can be observed.\r\n    if (!canObserve(target)) {\r\n        return target;\r\n    }\r\n    const handlers = collectionTypes.has(target.constructor)\r\n        ? collectionHandlers\r\n        : baseHandlers;\r\n    observed = new Proxy(target, handlers);\r\n    toProxy.set(target, observed);\r\n    toRaw.set(observed, target);\r\n    if (!targetMap.has(target)) {\r\n        targetMap.set(target, new Map());\r\n    }\r\n    return observed;\r\n}\r\nfunction isReactive(value) {\r\n    return reactiveToRaw.has(value) || readonlyToRaw.has(value);\r\n}\r\nfunction isReadonly(value) {\r\n    return readonlyToRaw.has(value);\r\n}\r\nfunction toRaw(observed) {\r\n    return reactiveToRaw.get(observed) || readonlyToRaw.get(observed) || observed;\r\n}\r\nfunction markReadonly(value) {\r\n    readonlyValues.add(value);\r\n    return value;\r\n}\r\nfunction markNonReactive(value) {\r\n    nonReactiveValues.add(value);\r\n    return value;\r\n}\n\nconst effectStack = [];\r\nconst ITERATE_KEY = Symbol('iterate');\r\nfunction isEffect(fn) {\r\n    return fn != null && fn._isEffect === true;\r\n}\r\nfunction effect(fn, options = EMPTY_OBJ) {\r\n    if (isEffect(fn)) {\r\n        fn = fn.raw;\r\n    }\r\n    const effect = createReactiveEffect(fn, options);\r\n    if (!options.lazy) {\r\n        effect();\r\n    }\r\n    return effect;\r\n}\r\nfunction stop(effect) {\r\n    if (effect.active) {\r\n        cleanup(effect);\r\n        if (effect.onStop) {\r\n            effect.onStop();\r\n        }\r\n        effect.active = false;\r\n    }\r\n}\r\nfunction createReactiveEffect(fn, options) {\r\n    const effect = function reactiveEffect(...args) {\r\n        return run(effect, fn, args);\r\n    };\r\n    effect._isEffect = true;\r\n    effect.active = true;\r\n    effect.raw = fn;\r\n    effect.scheduler = options.scheduler;\r\n    effect.onTrack = options.onTrack;\r\n    effect.onTrigger = options.onTrigger;\r\n    effect.onStop = options.onStop;\r\n    effect.computed = options.computed;\r\n    effect.deps = [];\r\n    return effect;\r\n}\r\nfunction run(effect, fn, args) {\r\n    if (!effect.active) {\r\n        return fn(...args);\r\n    }\r\n    if (!effectStack.includes(effect)) {\r\n        cleanup(effect);\r\n        try {\r\n            effectStack.push(effect);\r\n            return fn(...args);\r\n        }\r\n        finally {\r\n            effectStack.pop();\r\n        }\r\n    }\r\n}\r\nfunction cleanup(effect) {\r\n    const { deps } = effect;\r\n    if (deps.length) {\r\n        for (let i = 0; i < deps.length; i++) {\r\n            deps[i].delete(effect);\r\n        }\r\n        deps.length = 0;\r\n    }\r\n}\r\nlet shouldTrack = true;\r\nfunction pauseTracking() {\r\n    shouldTrack = false;\r\n}\r\nfunction resumeTracking() {\r\n    shouldTrack = true;\r\n}\r\nfunction track(target, type, key) {\r\n    if (!shouldTrack || effectStack.length === 0) {\r\n        return;\r\n    }\r\n    const effect = effectStack[effectStack.length - 1];\r\n    if (type === \"iterate\" /* ITERATE */) {\r\n        key = ITERATE_KEY;\r\n    }\r\n    let depsMap = targetMap.get(target);\r\n    if (depsMap === void 0) {\r\n        targetMap.set(target, (depsMap = new Map()));\r\n    }\r\n    let dep = depsMap.get(key);\r\n    if (dep === void 0) {\r\n        depsMap.set(key, (dep = new Set()));\r\n    }\r\n    if (!dep.has(effect)) {\r\n        dep.add(effect);\r\n        effect.deps.push(dep);\r\n        if ( effect.onTrack) {\r\n            effect.onTrack({\r\n                effect,\r\n                target,\r\n                type,\r\n                key\r\n            });\r\n        }\r\n    }\r\n}\r\nfunction trigger(target, type, key, extraInfo) {\r\n    const depsMap = targetMap.get(target);\r\n    if (depsMap === void 0) {\r\n        // never been tracked\r\n        return;\r\n    }\r\n    const effects = new Set();\r\n    const computedRunners = new Set();\r\n    if (type === \"clear\" /* CLEAR */) {\r\n        // collection being cleared, trigger all effects for target\r\n        depsMap.forEach(dep => {\r\n            addRunners(effects, computedRunners, dep);\r\n        });\r\n    }\r\n    else {\r\n        // schedule runs for SET | ADD | DELETE\r\n        if (key !== void 0) {\r\n            addRunners(effects, computedRunners, depsMap.get(key));\r\n        }\r\n        // also run for iteration key on ADD | DELETE\r\n        if (type === \"add\" /* ADD */ || type === \"delete\" /* DELETE */) {\r\n            const iterationKey = Array.isArray(target) ? 'length' : ITERATE_KEY;\r\n            addRunners(effects, computedRunners, depsMap.get(iterationKey));\r\n        }\r\n    }\r\n    const run = (effect) => {\r\n        scheduleRun(effect, target, type, key, extraInfo);\r\n    };\r\n    // Important: computed effects must be run first so that computed getters\r\n    // can be invalidated before any normal effects that depend on them are run.\r\n    computedRunners.forEach(run);\r\n    effects.forEach(run);\r\n}\r\nfunction addRunners(effects, computedRunners, effectsToAdd) {\r\n    if (effectsToAdd !== void 0) {\r\n        effectsToAdd.forEach(effect => {\r\n            if (effect.computed) {\r\n                computedRunners.add(effect);\r\n            }\r\n            else {\r\n                effects.add(effect);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction scheduleRun(effect, target, type, key, extraInfo) {\r\n    if ( effect.onTrigger) {\r\n        const event = {\r\n            effect,\r\n            target,\r\n            key,\r\n            type\r\n        };\r\n        effect.onTrigger(extraInfo ? extend(event, extraInfo) : event);\r\n    }\r\n    if (effect.scheduler !== void 0) {\r\n        effect.scheduler(effect);\r\n    }\r\n    else {\r\n        effect();\r\n    }\r\n}\n\nconst convert = (val) => isObject(val) ? reactive(val) : val;\r\nfunction ref(raw) {\r\n    if (isRef(raw)) {\r\n        return raw;\r\n    }\r\n    raw = convert(raw);\r\n    const r = {\r\n        _isRef: true,\r\n        get value() {\r\n            track(r, \"get\" /* GET */, '');\r\n            return raw;\r\n        },\r\n        set value(newVal) {\r\n            raw = convert(newVal);\r\n            trigger(r, \"set\" /* SET */, '');\r\n        }\r\n    };\r\n    return r;\r\n}\r\nfunction isRef(r) {\r\n    return r ? r._isRef === true : false;\r\n}\r\nfunction toRefs(object) {\r\n    const ret = {};\r\n    for (const key in object) {\r\n        ret[key] = toProxyRef(object, key);\r\n    }\r\n    return ret;\r\n}\r\nfunction toProxyRef(object, key) {\r\n    return {\r\n        _isRef: true,\r\n        get value() {\r\n            return object[key];\r\n        },\r\n        set value(newVal) {\r\n            object[key] = newVal;\r\n        }\r\n    };\r\n}\n\nfunction computed(getterOrOptions) {\r\n    let getter;\r\n    let setter;\r\n    if (isFunction(getterOrOptions)) {\r\n        getter = getterOrOptions;\r\n        setter =  () => {\r\n                console.warn('Write operation failed: computed value is readonly');\r\n            }\r\n            ;\r\n    }\r\n    else {\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n    let dirty = true;\r\n    let value;\r\n    const runner = effect(getter, {\r\n        lazy: true,\r\n        // mark effect as computed so that it gets priority during trigger\r\n        computed: true,\r\n        scheduler: () => {\r\n            dirty = true;\r\n        }\r\n    });\r\n    return {\r\n        _isRef: true,\r\n        // expose effect so computed can be stopped\r\n        effect: runner,\r\n        get value() {\r\n            if (dirty) {\r\n                value = runner();\r\n                dirty = false;\r\n            }\r\n            // When computed effects are accessed in a parent effect, the parent\r\n            // should track all the dependencies the computed property has tracked.\r\n            // This should also apply for chained computed properties.\r\n            trackChildRun(runner);\r\n            return value;\r\n        },\r\n        set value(newValue) {\r\n            setter(newValue);\r\n        }\r\n    };\r\n}\r\nfunction trackChildRun(childRunner) {\r\n    if (effectStack.length === 0) {\r\n        return;\r\n    }\r\n    const parentRunner = effectStack[effectStack.length - 1];\r\n    for (let i = 0; i < childRunner.deps.length; i++) {\r\n        const dep = childRunner.deps[i];\r\n        if (!dep.has(parentRunner)) {\r\n            dep.add(parentRunner);\r\n            parentRunner.deps.push(dep);\r\n        }\r\n    }\r\n}\n\nconst stack = [];\r\nfunction pushWarningContext(vnode) {\r\n    stack.push(vnode);\r\n}\r\nfunction popWarningContext() {\r\n    stack.pop();\r\n}\r\nfunction warn(msg, ...args) {\r\n    const instance = stack.length ? stack[stack.length - 1].component : null;\r\n    const appWarnHandler = instance && instance.appContext.config.warnHandler;\r\n    const trace = getComponentTrace();\r\n    if (appWarnHandler) {\r\n        appWarnHandler(msg + args.join(''), instance && instance.renderProxy, formatTrace(trace).join(''));\r\n        return;\r\n    }\r\n    console.warn(`[Vue warn]: ${msg}`, ...args);\r\n    // avoid spamming console during tests\r\n    if (typeof process !== 'undefined' && \"development\" === 'test') {\r\n        return;\r\n    }\r\n    if (!trace.length) {\r\n        return;\r\n    }\r\n    if (trace.length > 1 && console.groupCollapsed) {\r\n        console.groupCollapsed('at', ...formatTraceEntry(trace[0]));\r\n        const logs = [];\r\n        trace.slice(1).forEach((entry, i) => {\r\n            if (i !== 0)\r\n                logs.push('\\n');\r\n            logs.push(...formatTraceEntry(entry, i + 1));\r\n        });\r\n        console.log(...logs);\r\n        console.groupEnd();\r\n    }\r\n    else {\r\n        console.log(...formatTrace(trace));\r\n    }\r\n}\r\nfunction getComponentTrace() {\r\n    let currentVNode = stack[stack.length - 1];\r\n    if (!currentVNode) {\r\n        return [];\r\n    }\r\n    // we can't just use the stack because it will be incomplete during updates\r\n    // that did not start from the root. Re-construct the parent chain using\r\n    // instance parent pointers.\r\n    const normalizedStack = [];\r\n    while (currentVNode) {\r\n        const last = normalizedStack[0];\r\n        if (last && last.vnode === currentVNode) {\r\n            last.recurseCount++;\r\n        }\r\n        else {\r\n            normalizedStack.push({\r\n                vnode: currentVNode,\r\n                recurseCount: 0\r\n            });\r\n        }\r\n        const parentInstance = currentVNode.component\r\n            .parent;\r\n        currentVNode = parentInstance && parentInstance.vnode;\r\n    }\r\n    return normalizedStack;\r\n}\r\nfunction formatTrace(trace) {\r\n    const logs = [];\r\n    trace.forEach((entry, i) => {\r\n        const formatted = formatTraceEntry(entry, i);\r\n        if (i === 0) {\r\n            logs.push('at', ...formatted);\r\n        }\r\n        else {\r\n            logs.push('\\n', ...formatted);\r\n        }\r\n    });\r\n    return logs;\r\n}\r\nfunction formatTraceEntry({ vnode, recurseCount }, depth = 0) {\r\n    const padding = depth === 0 ? '' : ' '.repeat(depth * 2 + 1);\r\n    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;\r\n    const open = padding + `<${formatComponentName(vnode)}`;\r\n    const close = `>` + postfix;\r\n    const rootLabel = vnode.component.parent == null ? `(Root)` : ``;\r\n    return vnode.props\r\n        ? [open, ...formatProps(vnode.props), close, rootLabel]\r\n        : [open + close, rootLabel];\r\n}\r\nconst classifyRE = /(?:^|[-_])(\\w)/g;\r\nconst classify = (str) => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, '');\r\nfunction formatComponentName(vnode, file) {\r\n    const Component = vnode.type;\r\n    let name = isFunction(Component) ? Component.displayName : Component.name;\r\n    if (!name && file) {\r\n        const match = file.match(/([^/\\\\]+)\\.vue$/);\r\n        if (match) {\r\n            name = match[1];\r\n        }\r\n    }\r\n    return name ? classify(name) : 'AnonymousComponent';\r\n}\r\nfunction formatProps(props) {\r\n    const res = [];\r\n    for (const key in props) {\r\n        const value = props[key];\r\n        if (isString(value)) {\r\n            res.push(`${key}=${JSON.stringify(value)}`);\r\n        }\r\n        else {\r\n            res.push(`${key}=`, String(toRaw(value)));\r\n        }\r\n    }\r\n    return res;\r\n}\n\nconst ErrorTypeStrings = {\r\n    [\"bc\" /* BEFORE_CREATE */]: 'beforeCreate hook',\r\n    [\"c\" /* CREATED */]: 'created hook',\r\n    [\"bm\" /* BEFORE_MOUNT */]: 'beforeMount hook',\r\n    [\"m\" /* MOUNTED */]: 'mounted hook',\r\n    [\"bu\" /* BEFORE_UPDATE */]: 'beforeUpdate hook',\r\n    [\"u\" /* UPDATED */]: 'updated',\r\n    [\"bum\" /* BEFORE_UNMOUNT */]: 'beforeUnmount hook',\r\n    [\"um\" /* UNMOUNTED */]: 'unmounted hook',\r\n    [\"a\" /* ACTIVATED */]: 'activated hook',\r\n    [\"da\" /* DEACTIVATED */]: 'deactivated hook',\r\n    [\"ec\" /* ERROR_CAPTURED */]: 'errorCaptured hook',\r\n    [\"rtc\" /* RENDER_TRACKED */]: 'renderTracked hook',\r\n    [\"rtg\" /* RENDER_TRIGGERED */]: 'renderTriggered hook',\r\n    [0 /* SETUP_FUNCTION */]: 'setup function',\r\n    [1 /* RENDER_FUNCTION */]: 'render function',\r\n    [2 /* WATCH_GETTER */]: 'watcher getter',\r\n    [3 /* WATCH_CALLBACK */]: 'watcher callback',\r\n    [4 /* WATCH_CLEANUP */]: 'watcher cleanup function',\r\n    [5 /* NATIVE_EVENT_HANDLER */]: 'native event handler',\r\n    [6 /* COMPONENT_EVENT_HANDLER */]: 'component event handler',\r\n    [7 /* DIRECTIVE_HOOK */]: 'directive hook',\r\n    [8 /* APP_ERROR_HANDLER */]: 'app errorHandler',\r\n    [9 /* APP_WARN_HANDLER */]: 'app warnHandler',\r\n    [10 /* SCHEDULER */]: 'scheduler flush. This is likely a Vue internals bug. ' +\r\n        'Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue'\r\n};\r\nfunction callWithErrorHandling(fn, instance, type, args) {\r\n    let res;\r\n    try {\r\n        res = args ? fn(...args) : fn();\r\n    }\r\n    catch (err) {\r\n        handleError(err, instance, type);\r\n    }\r\n    return res;\r\n}\r\nfunction callWithAsyncErrorHandling(fn, instance, type, args) {\r\n    if (isFunction(fn)) {\r\n        const res = callWithErrorHandling(fn, instance, type, args);\r\n        if (res != null && !res._isVue && isPromise(res)) {\r\n            res.catch((err) => {\r\n                handleError(err, instance, type);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n    for (let i = 0; i < fn.length; i++) {\r\n        callWithAsyncErrorHandling(fn[i], instance, type, args);\r\n    }\r\n}\r\nfunction handleError(err, instance, type) {\r\n    const contextVNode = instance ? instance.vnode : null;\r\n    if (instance) {\r\n        let cur = instance.parent;\r\n        // the exposed instance is the render proxy to keep it consistent with 2.x\r\n        const exposedInstance = instance.renderProxy;\r\n        // in production the hook receives only the error code\r\n        const errorInfo =  ErrorTypeStrings[type] ;\r\n        while (cur) {\r\n            const errorCapturedHooks = cur.ec;\r\n            if (errorCapturedHooks !== null) {\r\n                for (let i = 0; i < errorCapturedHooks.length; i++) {\r\n                    if (errorCapturedHooks[i](err, exposedInstance, errorInfo)) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            cur = cur.parent;\r\n        }\r\n        // app-level handling\r\n        const appErrorHandler = instance.appContext.config.errorHandler;\r\n        if (appErrorHandler) {\r\n            callWithErrorHandling(appErrorHandler, null, 8 /* APP_ERROR_HANDLER */, [err, exposedInstance, errorInfo]);\r\n            return;\r\n        }\r\n    }\r\n    logError(err, type, contextVNode);\r\n}\r\nfunction logError(err, type, contextVNode) {\r\n    // default behavior is crash in prod & test, recover in dev.\r\n    if (\r\n        !(typeof process !== 'undefined' && \"development\" === 'test')) {\r\n        const info = ErrorTypeStrings[type];\r\n        if (contextVNode) {\r\n            pushWarningContext(contextVNode);\r\n        }\r\n        warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);\r\n        console.error(err);\r\n        if (contextVNode) {\r\n            popWarningContext();\r\n        }\r\n    }\r\n    else {\r\n        throw err;\r\n    }\r\n}\n\nconst queue = [];\r\nconst postFlushCbs = [];\r\nconst p = Promise.resolve();\r\nlet isFlushing = false;\r\nfunction nextTick(fn) {\r\n    return fn ? p.then(fn) : p;\r\n}\r\nfunction queueJob(job) {\r\n    if (!queue.includes(job)) {\r\n        queue.push(job);\r\n        if (!isFlushing) {\r\n            nextTick(flushJobs);\r\n        }\r\n    }\r\n}\r\nfunction queuePostFlushCb(cb) {\r\n    if (!isArray(cb)) {\r\n        postFlushCbs.push(cb);\r\n    }\r\n    else {\r\n        postFlushCbs.push(...cb);\r\n    }\r\n    if (!isFlushing) {\r\n        nextTick(flushJobs);\r\n    }\r\n}\r\nconst dedupe = (cbs) => [...new Set(cbs)];\r\nfunction flushPostFlushCbs() {\r\n    if (postFlushCbs.length) {\r\n        const cbs = dedupe(postFlushCbs);\r\n        postFlushCbs.length = 0;\r\n        for (let i = 0; i < cbs.length; i++) {\r\n            cbs[i]();\r\n        }\r\n    }\r\n}\r\nconst RECURSION_LIMIT = 100;\r\nfunction flushJobs(seenJobs) {\r\n    isFlushing = true;\r\n    let job;\r\n    {\r\n        seenJobs = seenJobs || new Map();\r\n    }\r\n    while ((job = queue.shift())) {\r\n        {\r\n            const seen = seenJobs;\r\n            if (!seen.has(job)) {\r\n                seen.set(job, 1);\r\n            }\r\n            else {\r\n                const count = seen.get(job);\r\n                if (count > RECURSION_LIMIT) {\r\n                    throw new Error('Maximum recursive updates exceeded. ' +\r\n                        \"You may have code that is mutating state in your component's \" +\r\n                        'render function or updated hook.');\r\n                }\r\n                else {\r\n                    seen.set(job, count + 1);\r\n                }\r\n            }\r\n        }\r\n        callWithErrorHandling(job, null, 10 /* SCHEDULER */);\r\n    }\r\n    flushPostFlushCbs();\r\n    isFlushing = false;\r\n    // some postFlushCb queued jobs!\r\n    // keep flushing until it drains.\r\n    if (queue.length) {\r\n        flushJobs(seenJobs);\r\n    }\r\n}\n\nconst Fragment = Symbol( 'Fragment' );\r\nconst Portal = Symbol( 'Portal' );\r\nconst Suspense = Symbol( 'Suspense' );\r\nconst Text = Symbol( 'Text' );\r\nconst Comment = Symbol( 'Comment' );\r\n// Since v-if and v-for are the two possible ways node structure can dynamically\r\n// change, once we consider v-if branches and each v-for fragment a block, we\r\n// can divide a template into nested blocks, and within each block the node\r\n// structure would be stable. This allows us to skip most children diffing\r\n// and only worry about the dynamic nodes (indicated by patch flags).\r\nconst blockStack = [];\r\nlet currentBlock = null;\r\n// Open a block.\r\n// This must be called before `createBlock`. It cannot be part of `createBlock`\r\n// because the children of the block are evaluated before `createBlock` itself\r\n// is called. The generated code typically looks like this:\r\n//\r\n//   function render() {\r\n//     return (openBlock(),createBlock('div', null, [...]))\r\n//   }\r\n//\r\n// disableTracking is true when creating a fragment block, since a fragment\r\n// always diffs its children.\r\nfunction openBlock(disableTracking) {\r\n    blockStack.push((currentBlock = disableTracking ? null : []));\r\n}\r\n// Whether we should be tracking dynamic child nodes inside a block.\r\n// Only tracks when this value is > 0\r\n// We are not using a simple boolean because this value may need to be\r\n// incremented/decremented by nested usage of v-once (see below)\r\nlet shouldTrack$1 = 1;\r\n// Block tracking sometimes needs to be disabled, for example during the\r\n// creation of a tree that needs to be cached by v-once. The compiler generates\r\n// code like this:\r\n//   _cache[1] || (\r\n//     setBlockTracking(-1),\r\n//     _cache[1] = createVNode(...),\r\n//     setBlockTracking(1),\r\n//     _cache[1]\r\n//   )\r\nfunction setBlockTracking(value) {\r\n    shouldTrack$1 += value;\r\n}\r\n// Create a block root vnode. Takes the same exact arguments as `createVNode`.\r\n// A block root keeps track of dynamic nodes within the block in the\r\n// `dynamicChildren` array.\r\nfunction createBlock(type, props, children, patchFlag, dynamicProps) {\r\n    // avoid a block with patchFlag tracking itself\r\n    shouldTrack$1--;\r\n    const vnode = createVNode(type, props, children, patchFlag, dynamicProps);\r\n    shouldTrack$1++;\r\n    // save current block children on the block vnode\r\n    vnode.dynamicChildren = currentBlock || EMPTY_ARR;\r\n    // close block\r\n    blockStack.pop();\r\n    currentBlock = blockStack[blockStack.length - 1] || null;\r\n    // a block is always going to be patched, so track it as a child of its\r\n    // parent block\r\n    if (currentBlock !== null) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\nfunction isVNode(value) {\r\n    return value ? value._isVNode === true : false;\r\n}\r\nfunction createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null) {\r\n    // class & style normalization.\r\n    if (props !== null) {\r\n        // for reactive or proxy objects, we need to clone it to enable mutation.\r\n        if (isReactive(props) || SetupProxySymbol in props) {\r\n            props = extend({}, props);\r\n        }\r\n        let { class: klass, style } = props;\r\n        if (klass != null && !isString(klass)) {\r\n            props.class = normalizeClass(klass);\r\n        }\r\n        if (style != null) {\r\n            // reactive state objects need to be cloned since they are likely to be\r\n            // mutated\r\n            if (isReactive(style) && !isArray(style)) {\r\n                style = extend({}, style);\r\n            }\r\n            props.style = normalizeStyle(style);\r\n        }\r\n    }\r\n    // encode the vnode type information into a bitmap\r\n    const shapeFlag = isString(type)\r\n        ? 1 /* ELEMENT */\r\n        : isObject(type)\r\n            ? 4 /* STATEFUL_COMPONENT */\r\n            : isFunction(type)\r\n                ? 2 /* FUNCTIONAL_COMPONENT */\r\n                : 0;\r\n    const vnode = {\r\n        _isVNode: true,\r\n        type,\r\n        props,\r\n        key: (props !== null && props.key) || null,\r\n        ref: (props !== null && props.ref) || null,\r\n        children: null,\r\n        component: null,\r\n        suspense: null,\r\n        el: null,\r\n        anchor: null,\r\n        target: null,\r\n        shapeFlag,\r\n        patchFlag,\r\n        dynamicProps,\r\n        dynamicChildren: null,\r\n        appContext: null\r\n    };\r\n    normalizeChildren(vnode, children);\r\n    // presence of a patch flag indicates this node needs patching on updates.\r\n    // component nodes also should always be patched, because even if the\r\n    // component doesn't need to update, it needs to persist the instance on to\r\n    // the next vnode so that it can be properly unmounted later.\r\n    if (shouldTrack$1 > 0 &&\r\n        currentBlock !== null &&\r\n        (patchFlag > 0 ||\r\n            shapeFlag & 4 /* STATEFUL_COMPONENT */ ||\r\n            shapeFlag & 2 /* FUNCTIONAL_COMPONENT */)) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\nfunction cloneVNode(vnode, extraProps) {\r\n    return {\r\n        _isVNode: true,\r\n        type: vnode.type,\r\n        props: extraProps\r\n            ? vnode.props\r\n                ? mergeProps(vnode.props, extraProps)\r\n                : extraProps\r\n            : vnode.props,\r\n        key: vnode.key,\r\n        ref: vnode.ref,\r\n        children: vnode.children,\r\n        target: vnode.target,\r\n        shapeFlag: vnode.shapeFlag,\r\n        patchFlag: vnode.patchFlag,\r\n        dynamicProps: vnode.dynamicProps,\r\n        dynamicChildren: vnode.dynamicChildren,\r\n        appContext: vnode.appContext,\r\n        // these should be set to null since they should only be present on\r\n        // mounted VNodes. If they are somehow not null, this means we have\r\n        // encountered an already-mounted vnode being used again.\r\n        component: null,\r\n        suspense: null,\r\n        el: null,\r\n        anchor: null\r\n    };\r\n}\r\nfunction createTextVNode(text = ' ', flag = 0) {\r\n    return createVNode(Text, null, text, flag);\r\n}\r\nfunction createCommentVNode(text = '', \r\n// when used as the v-else branch, the comment node must be created as a\r\n// block to ensure correct updates.\r\nasBlock = false) {\r\n    return asBlock\r\n        ? createBlock(Comment, null, text)\r\n        : createVNode(Comment, null, text);\r\n}\r\nfunction normalizeVNode(child) {\r\n    if (child == null) {\r\n        // empty placeholder\r\n        return createVNode(Comment);\r\n    }\r\n    else if (isArray(child)) {\r\n        // fragment\r\n        return createVNode(Fragment, null, child);\r\n    }\r\n    else if (typeof child === 'object') {\r\n        // already vnode, this should be the most common since compiled templates\r\n        // always produce all-vnode children arrays\r\n        return child.el === null ? child : cloneVNode(child);\r\n    }\r\n    else {\r\n        // primitive types\r\n        return createVNode(Text, null, child + '');\r\n    }\r\n}\r\nfunction normalizeChildren(vnode, children) {\r\n    let type = 0;\r\n    if (children == null) {\r\n        children = null;\r\n    }\r\n    else if (isArray(children)) {\r\n        type = 16 /* ARRAY_CHILDREN */;\r\n    }\r\n    else if (typeof children === 'object') {\r\n        type = 32 /* SLOTS_CHILDREN */;\r\n    }\r\n    else if (isFunction(children)) {\r\n        children = { default: children };\r\n        type = 32 /* SLOTS_CHILDREN */;\r\n    }\r\n    else {\r\n        children = isString(children) ? children : children + '';\r\n        type = 8 /* TEXT_CHILDREN */;\r\n    }\r\n    vnode.children = children;\r\n    vnode.shapeFlag |= type;\r\n}\r\nfunction normalizeStyle(value) {\r\n    if (isArray(value)) {\r\n        const res = {};\r\n        for (let i = 0; i < value.length; i++) {\r\n            const normalized = normalizeStyle(value[i]);\r\n            if (normalized) {\r\n                for (const key in normalized) {\r\n                    res[key] = normalized[key];\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    else if (isObject(value)) {\r\n        return value;\r\n    }\r\n}\r\nfunction normalizeClass(value) {\r\n    let res = '';\r\n    if (isString(value)) {\r\n        res = value;\r\n    }\r\n    else if (isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            res += normalizeClass(value[i]) + ' ';\r\n        }\r\n    }\r\n    else if (isObject(value)) {\r\n        for (const name in value) {\r\n            if (value[name]) {\r\n                res += name + ' ';\r\n            }\r\n        }\r\n    }\r\n    return res.trim();\r\n}\r\nconst handlersRE = /^on|^vnode/;\r\nfunction mergeProps(...args) {\r\n    const ret = {};\r\n    extend(ret, args[0]);\r\n    for (let i = 1; i < args.length; i++) {\r\n        const toMerge = args[i];\r\n        for (const key in toMerge) {\r\n            if (key === 'class') {\r\n                ret.class = normalizeClass([ret.class, toMerge.class]);\r\n            }\r\n            else if (key === 'style') {\r\n                ret.style = normalizeStyle([ret.style, toMerge.style]);\r\n            }\r\n            else if (handlersRE.test(key)) {\r\n                // on*, vnode*\r\n                const existing = ret[key];\r\n                ret[key] = existing\r\n                    ? [].concat(existing, toMerge[key])\r\n                    : toMerge[key];\r\n            }\r\n            else {\r\n                ret[key] = toMerge[key];\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\n\nfunction injectHook(type, hook, target) {\r\n    if (target) {\r\n        (target[type] || (target[type] = [])).push((...args) => {\r\n            if (target.isUnmounted) {\r\n                return;\r\n            }\r\n            // disable tracking inside all lifecycle hooks\r\n            // since they can potentially be called inside effects.\r\n            pauseTracking();\r\n            // Set currentInstance during hook invocation.\r\n            // This assumes the hook does not synchronously trigger other hooks, which\r\n            // can only be false when the user does something really funky.\r\n            setCurrentInstance(target);\r\n            const res = callWithAsyncErrorHandling(hook, target, type, args);\r\n            setCurrentInstance(null);\r\n            resumeTracking();\r\n            return res;\r\n        });\r\n    }\r\n    else {\r\n        const apiName = `on${capitalize(ErrorTypeStrings[type].replace(/ hook$/, ''))}`;\r\n        warn(`${apiName} is called when there is no active component instance to be ` +\r\n            `associated with. ` +\r\n            `Lifecycle injection APIs can only be used during execution of setup().` +\r\n            ( ` If you are using async setup(), make sure to register lifecycle ` +\r\n                    `hooks before the first await statement.`\r\n                ));\r\n    }\r\n}\r\nconst createHook = (lifecycle) => (hook, target = currentInstance) => injectHook(lifecycle, hook, target);\r\nconst onBeforeMount = createHook(\"bm\" /* BEFORE_MOUNT */);\r\nconst onMounted = createHook(\"m\" /* MOUNTED */);\r\nconst onBeforeUpdate = createHook(\"bu\" /* BEFORE_UPDATE */);\r\nconst onUpdated = createHook(\"u\" /* UPDATED */);\r\nconst onBeforeUnmount = createHook(\"bum\" /* BEFORE_UNMOUNT */);\r\nconst onUnmounted = createHook(\"um\" /* UNMOUNTED */);\r\nconst onRenderTriggered = createHook(\"rtg\" /* RENDER_TRIGGERED */);\r\nconst onRenderTracked = createHook(\"rtc\" /* RENDER_TRACKED */);\r\nconst onErrorCaptured = createHook(\"ec\" /* ERROR_CAPTURED */);\n\n// mark the current rendering instance for asset resolution (e.g.\r\n// resolveComponent, resolveDirective) during render\r\nlet currentRenderingInstance = null;\r\n// dev only flag to track whether $attrs was used during render.\r\n// If $attrs was used during render then the warning for failed attrs\r\n// fallthrough can be suppressed.\r\nlet accessedAttrs = false;\r\nfunction markAttrsAccessed() {\r\n    accessedAttrs = true;\r\n}\r\nfunction renderComponentRoot(instance) {\r\n    const { type: Component, vnode, renderProxy, props, slots, attrs, emit } = instance;\r\n    let result;\r\n    currentRenderingInstance = instance;\r\n    {\r\n        accessedAttrs = false;\r\n    }\r\n    try {\r\n        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */) {\r\n            result = normalizeVNode(instance.render.call(renderProxy));\r\n        }\r\n        else {\r\n            // functional\r\n            const render = Component;\r\n            result = normalizeVNode(render.length > 1\r\n                ? render(props, {\r\n                    attrs,\r\n                    slots,\r\n                    emit\r\n                })\r\n                : render(props, null /* we know it doesn't need it */));\r\n        }\r\n        // attr merging\r\n        if (Component.props != null &&\r\n            Component.inheritAttrs !== false &&\r\n            attrs !== EMPTY_OBJ &&\r\n            Object.keys(attrs).length) {\r\n            if (result.shapeFlag & 1 /* ELEMENT */ ||\r\n                result.shapeFlag & 6 /* COMPONENT */) {\r\n                result = cloneVNode(result, attrs);\r\n            }\r\n            else if ( true && !accessedAttrs) {\r\n                warn(`Extraneous non-props attributes (${Object.keys(attrs).join(',')}) ` +\r\n                    `were passed to component but could not be automatically inhertied ` +\r\n                    `because component renders fragment or text root nodes.`);\r\n            }\r\n        }\r\n    }\r\n    catch (err) {\r\n        handleError(err, instance, 1 /* RENDER_FUNCTION */);\r\n        result = createVNode(Comment);\r\n    }\r\n    currentRenderingInstance = null;\r\n    return result;\r\n}\r\nfunction shouldUpdateComponent(prevVNode, nextVNode, optimized) {\r\n    const { props: prevProps, children: prevChildren } = prevVNode;\r\n    const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;\r\n    if (patchFlag > 0) {\r\n        if (patchFlag & 256 /* DYNAMIC_SLOTS */) {\r\n            // slot content that references values that might have changed,\r\n            // e.g. in a v-for\r\n            return true;\r\n        }\r\n        if (patchFlag & 16 /* FULL_PROPS */) {\r\n            // presence of this flag indicates props are always non-null\r\n            return hasPropsChanged(prevProps, nextProps);\r\n        }\r\n        else if (patchFlag & 8 /* PROPS */) {\r\n            const dynamicProps = nextVNode.dynamicProps;\r\n            for (let i = 0; i < dynamicProps.length; i++) {\r\n                const key = dynamicProps[i];\r\n                if (nextProps[key] !== prevProps[key]) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (!optimized) {\r\n        // this path is only taken by manually written render functions\r\n        // so presence of any children leads to a forced update\r\n        if (prevChildren != null || nextChildren != null) {\r\n            return true;\r\n        }\r\n        if (prevProps === nextProps) {\r\n            return false;\r\n        }\r\n        if (prevProps === null) {\r\n            return nextProps !== null;\r\n        }\r\n        if (nextProps === null) {\r\n            return true;\r\n        }\r\n        return hasPropsChanged(prevProps, nextProps);\r\n    }\r\n    return false;\r\n}\r\nfunction hasPropsChanged(prevProps, nextProps) {\r\n    const nextKeys = Object.keys(nextProps);\r\n    if (nextKeys.length !== Object.keys(prevProps).length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < nextKeys.length; i++) {\r\n        const key = nextKeys[i];\r\n        if (nextProps[key] !== prevProps[key]) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n\n// resolve raw VNode data.\r\n// - filter out reserved keys (key, ref, slots)\r\n// - extract class and style into $attrs (to be merged onto child\r\n//   component root)\r\n// - for the rest:\r\n//   - if has declared props: put declared ones in `props`, the rest in `attrs`\r\n//   - else: everything goes in `props`.\r\nfunction resolveProps(instance, rawProps, _options) {\r\n    const hasDeclaredProps = _options != null;\r\n    const options = normalizePropsOptions(_options);\r\n    if (!rawProps && !hasDeclaredProps) {\r\n        return;\r\n    }\r\n    const props = {};\r\n    let attrs = void 0;\r\n    // update the instance propsProxy (passed to setup()) to trigger potential\r\n    // changes\r\n    const propsProxy = instance.propsProxy;\r\n    const setProp = propsProxy\r\n        ? (key, val) => {\r\n            props[key] = val;\r\n            propsProxy[key] = val;\r\n        }\r\n        : (key, val) => {\r\n            props[key] = val;\r\n        };\r\n    // allow mutation of propsProxy (which is readonly by default)\r\n    unlock();\r\n    if (rawProps != null) {\r\n        for (const key in rawProps) {\r\n            // key, ref are reserved\r\n            if (isReservedProp(key))\r\n                continue;\r\n            // prop option names are camelized during normalization, so to support\r\n            // kebab -> camel conversion here we need to camelize the key.\r\n            const camelKey = camelize(key);\r\n            if (hasDeclaredProps && !hasOwn(options, camelKey)) {\r\n                (attrs || (attrs = {}))[key] = rawProps[key];\r\n            }\r\n            else {\r\n                setProp(camelKey, rawProps[key]);\r\n            }\r\n        }\r\n    }\r\n    // set default values, cast booleans & run validators\r\n    if (hasDeclaredProps) {\r\n        for (const key in options) {\r\n            let opt = options[key];\r\n            if (opt == null)\r\n                continue;\r\n            const isAbsent = !hasOwn(props, key);\r\n            const hasDefault = hasOwn(opt, 'default');\r\n            const currentValue = props[key];\r\n            // default values\r\n            if (hasDefault && currentValue === undefined) {\r\n                const defaultValue = opt.default;\r\n                setProp(key, isFunction(defaultValue) ? defaultValue() : defaultValue);\r\n            }\r\n            // boolean casting\r\n            if (opt[\"1\" /* shouldCast */]) {\r\n                if (isAbsent && !hasDefault) {\r\n                    setProp(key, false);\r\n                }\r\n                else if (opt[\"2\" /* shouldCastTrue */] &&\r\n                    (currentValue === '' || currentValue === hyphenate(key))) {\r\n                    setProp(key, true);\r\n                }\r\n            }\r\n            // runtime validation\r\n            if ( rawProps) {\r\n                let rawValue;\r\n                if (!(key in rawProps) && hyphenate(key) in rawProps) {\r\n                    rawValue = rawProps[hyphenate(key)];\r\n                }\r\n                else {\r\n                    rawValue = rawProps[key];\r\n                }\r\n                validateProp(key, toRaw(rawValue), opt, isAbsent);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // if component has no declared props, $attrs === $props\r\n        attrs = props;\r\n    }\r\n    // in case of dynamic props, check if we need to delete keys from\r\n    // the props proxy\r\n    const { patchFlag } = instance.vnode;\r\n    if (propsProxy !== null &&\r\n        (patchFlag === 0 || patchFlag & 16 /* FULL_PROPS */)) {\r\n        const rawInitialProps = toRaw(propsProxy);\r\n        for (const key in rawInitialProps) {\r\n            if (!hasOwn(props, key)) {\r\n                delete propsProxy[key];\r\n            }\r\n        }\r\n    }\r\n    // lock readonly\r\n    lock();\r\n    instance.props =  readonly(props) ;\r\n    instance.attrs = options\r\n        ?  attrs != null\r\n            ? readonly(attrs)\r\n            : attrs || EMPTY_OBJ\r\n        : instance.props;\r\n}\r\nconst normalizationMap = new WeakMap();\r\nfunction normalizePropsOptions(raw) {\r\n    if (!raw) {\r\n        return null;\r\n    }\r\n    if (normalizationMap.has(raw)) {\r\n        return normalizationMap.get(raw);\r\n    }\r\n    const normalized = {};\r\n    normalizationMap.set(raw, normalized);\r\n    if (isArray(raw)) {\r\n        for (let i = 0; i < raw.length; i++) {\r\n            if ( !isString(raw[i])) {\r\n                warn(`props must be strings when using array syntax.`, raw[i]);\r\n            }\r\n            const normalizedKey = camelize(raw[i]);\r\n            if (normalizedKey[0] !== '$') {\r\n                normalized[normalizedKey] = EMPTY_OBJ;\r\n            }\r\n            else {\r\n                warn(`Invalid prop name: \"${normalizedKey}\" is a reserved property.`);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if ( !isObject(raw)) {\r\n            warn(`invalid props options`, raw);\r\n        }\r\n        for (const key in raw) {\r\n            const normalizedKey = camelize(key);\r\n            if (normalizedKey[0] !== '$') {\r\n                const opt = raw[key];\r\n                const prop = (normalized[normalizedKey] =\r\n                    isArray(opt) || isFunction(opt) ? { type: opt } : opt);\r\n                if (prop != null) {\r\n                    const booleanIndex = getTypeIndex(Boolean, prop.type);\r\n                    const stringIndex = getTypeIndex(String, prop.type);\r\n                    prop[\"1\" /* shouldCast */] = booleanIndex > -1;\r\n                    prop[\"2\" /* shouldCastTrue */] = booleanIndex < stringIndex;\r\n                }\r\n            }\r\n            else {\r\n                warn(`Invalid prop name: \"${normalizedKey}\" is a reserved property.`);\r\n            }\r\n        }\r\n    }\r\n    return normalized;\r\n}\r\n// use function string name to check type constructors\r\n// so that it works across vms / iframes.\r\nfunction getType(ctor) {\r\n    const match = ctor && ctor.toString().match(/^\\s*function (\\w+)/);\r\n    return match ? match[1] : '';\r\n}\r\nfunction isSameType(a, b) {\r\n    return getType(a) === getType(b);\r\n}\r\nfunction getTypeIndex(type, expectedTypes) {\r\n    if (isArray(expectedTypes)) {\r\n        for (let i = 0, len = expectedTypes.length; i < len; i++) {\r\n            if (isSameType(expectedTypes[i], type)) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    else if (isObject(expectedTypes)) {\r\n        return isSameType(expectedTypes, type) ? 0 : -1;\r\n    }\r\n    return -1;\r\n}\r\nfunction validateProp(name, value, prop, isAbsent) {\r\n    const { type, required, validator } = prop;\r\n    // required!\r\n    if (required && isAbsent) {\r\n        warn('Missing required prop: \"' + name + '\"');\r\n        return;\r\n    }\r\n    // missing but optional\r\n    if (value == null && !prop.required) {\r\n        return;\r\n    }\r\n    // type check\r\n    if (type != null && type !== true) {\r\n        let isValid = false;\r\n        const types = isArray(type) ? type : [type];\r\n        const expectedTypes = [];\r\n        // value is valid as long as one of the specified types match\r\n        for (let i = 0; i < types.length && !isValid; i++) {\r\n            const { valid, expectedType } = assertType(value, types[i]);\r\n            expectedTypes.push(expectedType || '');\r\n            isValid = valid;\r\n        }\r\n        if (!isValid) {\r\n            warn(getInvalidTypeMessage(name, value, expectedTypes));\r\n            return;\r\n        }\r\n    }\r\n    // custom validator\r\n    if (validator && !validator(value)) {\r\n        warn('Invalid prop: custom validator check failed for prop \"' + name + '\".');\r\n    }\r\n}\r\nconst isSimpleType = /*#__PURE__*/ makeMap('String,Number,Boolean,Function,Symbol');\r\nfunction assertType(value, type) {\r\n    let valid;\r\n    const expectedType = getType(type);\r\n    if (isSimpleType(expectedType)) {\r\n        const t = typeof value;\r\n        valid = t === expectedType.toLowerCase();\r\n        // for primitive wrapper objects\r\n        if (!valid && t === 'object') {\r\n            valid = value instanceof type;\r\n        }\r\n    }\r\n    else if (expectedType === 'Object') {\r\n        valid = toRawType(value) === 'Object';\r\n    }\r\n    else if (expectedType === 'Array') {\r\n        valid = isArray(value);\r\n    }\r\n    else {\r\n        valid = value instanceof type;\r\n    }\r\n    return {\r\n        valid,\r\n        expectedType\r\n    };\r\n}\r\nfunction getInvalidTypeMessage(name, value, expectedTypes) {\r\n    let message = `Invalid prop: type check failed for prop \"${name}\".` +\r\n        ` Expected ${expectedTypes.map(capitalize).join(', ')}`;\r\n    const expectedType = expectedTypes[0];\r\n    const receivedType = toRawType(value);\r\n    const expectedValue = styleValue(value, expectedType);\r\n    const receivedValue = styleValue(value, receivedType);\r\n    // check if we need to specify expected value\r\n    if (expectedTypes.length === 1 &&\r\n        isExplicable(expectedType) &&\r\n        !isBoolean(expectedType, receivedType)) {\r\n        message += ` with value ${expectedValue}`;\r\n    }\r\n    message += `, got ${receivedType} `;\r\n    // check if we need to specify received value\r\n    if (isExplicable(receivedType)) {\r\n        message += `with value ${receivedValue}.`;\r\n    }\r\n    return message;\r\n}\r\nfunction styleValue(value, type) {\r\n    if (type === 'String') {\r\n        return `\"${value}\"`;\r\n    }\r\n    else if (type === 'Number') {\r\n        return `${Number(value)}`;\r\n    }\r\n    else {\r\n        return `${value}`;\r\n    }\r\n}\r\nfunction isExplicable(type) {\r\n    const explicitTypes = ['string', 'number', 'boolean'];\r\n    return explicitTypes.some(elem => type.toLowerCase() === elem);\r\n}\r\nfunction isBoolean(...args) {\r\n    return args.some(elem => elem.toLowerCase() === 'boolean');\r\n}\n\nconst normalizeSlotValue = (value) => isArray(value)\r\n    ? value.map(normalizeVNode)\r\n    : [normalizeVNode(value)];\r\nconst normalizeSlot = (key, rawSlot) => (props) => {\r\n    if ( currentInstance != null) {\r\n        warn(`Slot \"${key}\" invoked outside of the render function: ` +\r\n            `this will not track dependencies used in the slot. ` +\r\n            `Invoke the slot function inside the render function instead.`);\r\n    }\r\n    return normalizeSlotValue(rawSlot(props));\r\n};\r\nfunction resolveSlots(instance, children) {\r\n    let slots;\r\n    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const rawSlots = children;\r\n        if (rawSlots._compiled) {\r\n            // pre-normalized slots object generated by compiler\r\n            slots = children;\r\n        }\r\n        else {\r\n            slots = {};\r\n            for (const key in rawSlots) {\r\n                const value = rawSlots[key];\r\n                if (isFunction(value)) {\r\n                    slots[key] = normalizeSlot(key, value);\r\n                }\r\n                else if (value != null) {\r\n                    {\r\n                        warn(`Non-function value encountered for slot \"${key}\". ` +\r\n                            `Prefer function slots for better performance.`);\r\n                    }\r\n                    const normalized = normalizeSlotValue(value);\r\n                    slots[key] = () => normalized;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (children !== null) {\r\n        // non slot object children (direct value) passed to a component\r\n        {\r\n            warn(`Non-function value encountered for default slot. ` +\r\n                `Prefer function slots for better performance.`);\r\n        }\r\n        const normalized = normalizeSlotValue(children);\r\n        slots = { default: () => normalized };\r\n    }\r\n    if (slots !== void 0) {\r\n        instance.slots = slots;\r\n    }\r\n}\n\n/**\r\nRuntime helper for applying directives to a vnode. Example usage:\r\n\nconst comp = resolveComponent('comp')\r\nconst foo = resolveDirective('foo')\r\nconst bar = resolveDirective('bar')\r\n\nreturn withDirectives(h(comp), [\r\n  [foo, this.x],\r\n  [bar, this.y]\r\n])\r\n*/\r\nconst valueCache = new WeakMap();\r\nconst isBuiltInDirective = /*#__PURE__*/ makeMap('bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text');\r\nfunction validateDirectiveName(name) {\r\n    if (isBuiltInDirective(name)) {\r\n        warn('Do not use built-in directive ids as custom directive id: ' + name);\r\n    }\r\n}\r\nfunction applyDirective(props, instance, directive, value, arg, modifiers = EMPTY_OBJ) {\r\n    let valueCacheForDir = valueCache.get(directive);\r\n    if (!valueCacheForDir) {\r\n        valueCacheForDir = new WeakMap();\r\n        valueCache.set(directive, valueCacheForDir);\r\n    }\r\n    if (isFunction(directive)) {\r\n        directive = {\r\n            mounted: directive,\r\n            updated: directive\r\n        };\r\n    }\r\n    for (const key in directive) {\r\n        const hook = directive[key];\r\n        const hookKey = `onVnode` + key[0].toUpperCase() + key.slice(1);\r\n        const vnodeHook = (vnode, prevVNode) => {\r\n            let oldValue;\r\n            if (prevVNode != null) {\r\n                oldValue = valueCacheForDir.get(prevVNode);\r\n                valueCacheForDir.delete(prevVNode);\r\n            }\r\n            valueCacheForDir.set(vnode, value);\r\n            hook(vnode.el, {\r\n                instance: instance.renderProxy,\r\n                value,\r\n                oldValue,\r\n                arg,\r\n                modifiers\r\n            }, vnode, prevVNode);\r\n        };\r\n        const existing = props[hookKey];\r\n        props[hookKey] = existing\r\n            ? [].concat(existing, vnodeHook)\r\n            : vnodeHook;\r\n    }\r\n}\r\nfunction withDirectives(vnode, directives) {\r\n    const instance = currentRenderingInstance;\r\n    if (instance !== null) {\r\n        vnode.props = vnode.props || {};\r\n        for (let i = 0; i < directives.length; i++) {\r\n            const [dir, value, arg, modifiers] = directives[i];\r\n            applyDirective(vnode.props, instance, dir, value, arg, modifiers);\r\n        }\r\n    }\r\n    else {\r\n        warn(`withDirectives can only be used inside render functions.`);\r\n    }\r\n    return vnode;\r\n}\r\nfunction invokeDirectiveHook(hook, instance, vnode, prevVNode = null) {\r\n    callWithAsyncErrorHandling(hook, instance, 7 /* DIRECTIVE_HOOK */, [\r\n        vnode,\r\n        prevVNode\r\n    ]);\r\n}\n\nfunction createAppContext() {\r\n    return {\r\n        config: {\r\n            devtools: true,\r\n            performance: false,\r\n            isNativeTag: NO,\r\n            isCustomElement: NO,\r\n            errorHandler: undefined,\r\n            warnHandler: undefined\r\n        },\r\n        mixins: [],\r\n        components: {},\r\n        directives: {},\r\n        provides: {}\r\n    };\r\n}\r\nfunction createAppAPI(render) {\r\n    return function createApp() {\r\n        const context = createAppContext();\r\n        let isMounted = false;\r\n        const app = {\r\n            get config() {\r\n                return context.config;\r\n            },\r\n            set config(v) {\r\n                {\r\n                    warn(`app.config cannot be replaced. Modify individual options instead.`);\r\n                }\r\n            },\r\n            use(plugin) {\r\n                if (isFunction(plugin)) {\r\n                    plugin(app);\r\n                }\r\n                else if (isFunction(plugin.install)) {\r\n                    plugin.install(app);\r\n                }\r\n                else {\r\n                    warn(`A plugin must either be a function or an object with an \"install\" ` +\r\n                        `function.`);\r\n                }\r\n                return app;\r\n            },\r\n            mixin(mixin) {\r\n                context.mixins.push(mixin);\r\n                return app;\r\n            },\r\n            component(name, component) {\r\n                {\r\n                    validateComponentName(name, context.config);\r\n                }\r\n                if (!component) {\r\n                    return context.components[name];\r\n                }\r\n                else {\r\n                    context.components[name] = component;\r\n                    return app;\r\n                }\r\n            },\r\n            directive(name, directive) {\r\n                {\r\n                    validateDirectiveName(name);\r\n                }\r\n                if (!directive) {\r\n                    return context.directives[name];\r\n                }\r\n                else {\r\n                    context.directives[name] = directive;\r\n                    return app;\r\n                }\r\n            },\r\n            mount(rootComponent, rootContainer, rootProps) {\r\n                if (!isMounted) {\r\n                    const vnode = createVNode(rootComponent, rootProps);\r\n                    // store app context on the root VNode.\r\n                    // this will be set on the root instance on initial mount.\r\n                    vnode.appContext = context;\r\n                    render(vnode, rootContainer);\r\n                    isMounted = true;\r\n                    return vnode.component.renderProxy;\r\n                }\r\n                else {\r\n                    warn(`App has already been mounted. Create a new app instance instead.`);\r\n                }\r\n            },\r\n            provide(key, value) {\r\n                if ( key in context.provides) {\r\n                    warn(`App already provides property with key \"${key}\". ` +\r\n                        `It will be overwritten with the new value.`);\r\n                }\r\n                // TypeScript doesn't allow symbols as index type\r\n                // https://github.com/Microsoft/TypeScript/issues/24587\r\n                context.provides[key] = value;\r\n            }\r\n        };\r\n        return app;\r\n    };\r\n}\n\nfunction createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, optimized) {\r\n    return {\r\n        vnode,\r\n        parent,\r\n        parentComponent,\r\n        isSVG,\r\n        optimized,\r\n        container,\r\n        hiddenContainer,\r\n        anchor,\r\n        deps: 0,\r\n        subTree: null,\r\n        fallbackTree: null,\r\n        isResolved: false,\r\n        isUnmounted: false,\r\n        effects: []\r\n    };\r\n}\r\nfunction normalizeSuspenseChildren(vnode) {\r\n    const { shapeFlag, children } = vnode;\r\n    if (shapeFlag & PublicShapeFlags.SLOTS_CHILDREN) {\r\n        const { default: d, fallback } = children;\r\n        return {\r\n            content: normalizeVNode(isFunction(d) ? d() : d),\r\n            fallback: normalizeVNode(isFunction(fallback) ? fallback() : fallback)\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            content: normalizeVNode(children),\r\n            fallback: normalizeVNode(null)\r\n        };\r\n    }\r\n}\n\nfunction createDevEffectOptions(instance) {\r\n    return {\r\n        scheduler: queueJob,\r\n        onTrack: instance.rtc ? e => invokeHooks(instance.rtc, e) : void 0,\r\n        onTrigger: instance.rtg ? e => invokeHooks(instance.rtg, e) : void 0\r\n    };\r\n}\r\nfunction isSameType$1(n1, n2) {\r\n    return n1.type === n2.type && n1.key === n2.key;\r\n}\r\nfunction invokeHooks(hooks, arg) {\r\n    for (let i = 0; i < hooks.length; i++) {\r\n        hooks[i](arg);\r\n    }\r\n}\r\nfunction queuePostRenderEffect(fn, suspense) {\r\n    if (suspense !== null && !suspense.isResolved) {\r\n        if (isArray(fn)) {\r\n            suspense.effects.push(...fn);\r\n        }\r\n        else {\r\n            suspense.effects.push(fn);\r\n        }\r\n    }\r\n    else {\r\n        queuePostFlushCb(fn);\r\n    }\r\n}\r\n/**\r\n * The createRenderer function accepts two generic arguments:\r\n * HostNode and HostElement, corresponding to Node and Element types in the\r\n * host environment. For example, for runtime-dom, HostNode would be the DOM\r\n * `Node` interface and HostElement would be the DOM `Element` interface.\r\n *\r\n * Custom renderers can pass in the platform specific types like this:\r\n *\r\n * ``` js\r\n * const { render, createApp } = createRenderer<Node, Element>({\r\n *   patchProp,\r\n *   ...nodeOps\r\n * })\r\n * ```\r\n */\r\nfunction createRenderer(options) {\r\n    const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, querySelector: hostQuerySelector } = options;\r\n    function patch(n1, // null means this is a mount\r\n    n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, optimized = false) {\r\n        // patching & not same type, unmount old tree\r\n        if (n1 != null && !isSameType$1(n1, n2)) {\r\n            anchor = getNextHostNode(n1);\r\n            unmount(n1, parentComponent, parentSuspense, true);\r\n            n1 = null;\r\n        }\r\n        const { type, shapeFlag } = n2;\r\n        switch (type) {\r\n            case Text:\r\n                processText(n1, n2, container, anchor);\r\n                break;\r\n            case Comment:\r\n                processCommentNode(n1, n2, container, anchor);\r\n                break;\r\n            case Fragment:\r\n                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                break;\r\n            case Portal:\r\n                processPortal(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                break;\r\n            case Suspense:\r\n                {\r\n                    processSuspense(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                }\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                }\r\n                else {\r\n                    warn('Invalid HostVNode type:', n2.type, `(${typeof n2.type})`);\r\n                }\r\n        }\r\n    }\r\n    function processText(n1, n2, container, anchor) {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateText(n2.children)), container, anchor);\r\n        }\r\n        else {\r\n            const el = (n2.el = n1.el);\r\n            if (n2.children !== n1.children) {\r\n                hostSetText(el, n2.children);\r\n            }\r\n        }\r\n    }\r\n    function processCommentNode(n1, n2, container, anchor) {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateComment(n2.children || '')), container, anchor);\r\n        }\r\n        else {\r\n            // there's no support for dynamic comments\r\n            n2.el = n1.el;\r\n        }\r\n    }\r\n    function processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) {\r\n        if (n1 == null) {\r\n            mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n        }\r\n        else {\r\n            patchElement(n1, n2, parentComponent, parentSuspense, isSVG, optimized);\r\n        }\r\n        if (n2.ref !== null && parentComponent !== null) {\r\n            setRef(n2.ref, n1 && n1.ref, parentComponent, n2.el);\r\n        }\r\n    }\r\n    function mountElement(vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) {\r\n        const tag = vnode.type;\r\n        isSVG = isSVG || tag === 'svg';\r\n        const el = (vnode.el = hostCreateElement(tag, isSVG));\r\n        const { props, shapeFlag } = vnode;\r\n        if (props != null) {\r\n            for (const key in props) {\r\n                if (isReservedProp(key))\r\n                    continue;\r\n                hostPatchProp(el, key, props[key], null, isSVG);\r\n            }\r\n            if (props.onVnodeBeforeMount != null) {\r\n                invokeDirectiveHook(props.onVnodeBeforeMount, parentComponent, vnode);\r\n            }\r\n        }\r\n        if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n            hostSetElementText(el, vnode.children);\r\n        }\r\n        else if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG, optimized || vnode.dynamicChildren !== null);\r\n        }\r\n        hostInsert(el, container, anchor);\r\n        if (props != null && props.onVnodeMounted != null) {\r\n            queuePostRenderEffect(() => {\r\n                invokeDirectiveHook(props.onVnodeMounted, parentComponent, vnode);\r\n            }, parentSuspense);\r\n        }\r\n    }\r\n    function mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, optimized, start = 0) {\r\n        for (let i = start; i < children.length; i++) {\r\n            const child = optimized\r\n                ? children[i]\r\n                : (children[i] = normalizeVNode(children[i]));\r\n            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n        }\r\n    }\r\n    function patchElement(n1, n2, parentComponent, parentSuspense, isSVG, optimized) {\r\n        const el = (n2.el = n1.el);\r\n        const { patchFlag, dynamicChildren } = n2;\r\n        const oldProps = (n1 && n1.props) || EMPTY_OBJ;\r\n        const newProps = n2.props || EMPTY_OBJ;\r\n        if (newProps.onVnodeBeforeUpdate != null) {\r\n            invokeDirectiveHook(newProps.onVnodeBeforeUpdate, parentComponent, n2, n1);\r\n        }\r\n        if (patchFlag > 0) {\r\n            // the presence of a patchFlag means this element's render code was\r\n            // generated by the compiler and can take the fast path.\r\n            // in this path old node and new node are guaranteed to have the same shape\r\n            // (i.e. at the exact same position in the source template)\r\n            if (patchFlag & 16 /* FULL_PROPS */) {\r\n                // element props contain dynamic keys, full diff needed\r\n                patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n            }\r\n            else {\r\n                // class\r\n                // this flag is matched when the element has dynamic class bindings.\r\n                if (patchFlag & 2 /* CLASS */) {\r\n                    if (oldProps.class !== newProps.class) {\r\n                        hostPatchProp(el, 'class', newProps.class, null, isSVG);\r\n                    }\r\n                }\r\n                // style\r\n                // this flag is matched when the element has dynamic style bindings\r\n                if (patchFlag & 4 /* STYLE */) {\r\n                    hostPatchProp(el, 'style', newProps.style, oldProps.style, isSVG);\r\n                }\r\n                // props\r\n                // This flag is matched when the element has dynamic prop/attr bindings\r\n                // other than class and style. The keys of dynamic prop/attrs are saved for\r\n                // faster iteration.\r\n                // Note dynamic keys like :[foo]=\"bar\" will cause this optimization to\r\n                // bail out and go through a full diff because we need to unset the old key\r\n                if (patchFlag & 8 /* PROPS */) {\r\n                    // if the flag is present then dynamicProps must be non-null\r\n                    const propsToUpdate = n2.dynamicProps;\r\n                    for (let i = 0; i < propsToUpdate.length; i++) {\r\n                        const key = propsToUpdate[i];\r\n                        const prev = oldProps[key];\r\n                        const next = newProps[key];\r\n                        if (prev !== next) {\r\n                            hostPatchProp(el, key, next, prev, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // text\r\n            // This flag is matched when the element has only dynamic text children.\r\n            // this flag is terminal (i.e. skips children diffing).\r\n            if (patchFlag & 1 /* TEXT */) {\r\n                if (n1.children !== n2.children) {\r\n                    hostSetElementText(el, n2.children);\r\n                }\r\n                return; // terminal\r\n            }\r\n        }\r\n        else if (!optimized && dynamicChildren == null) {\r\n            // unoptimized, full diff\r\n            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n        }\r\n        if (dynamicChildren != null) {\r\n            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, isSVG);\r\n        }\r\n        else if (!optimized) {\r\n            // full diff\r\n            patchChildren(n1, n2, el, null, parentComponent, parentSuspense, isSVG);\r\n        }\r\n        if (newProps.onVnodeUpdated != null) {\r\n            queuePostRenderEffect(() => {\r\n                invokeDirectiveHook(newProps.onVnodeUpdated, parentComponent, n2, n1);\r\n            }, parentSuspense);\r\n        }\r\n    }\r\n    // The fast path for blocks.\r\n    function patchBlockChildren(oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG) {\r\n        for (let i = 0; i < newChildren.length; i++) {\r\n            const oldVNode = oldChildren[i];\r\n            patch(oldVNode, newChildren[i], \r\n            // in the case of a Fragment, we need to provide the actual parent\r\n            // of the Fragment itself so it can move its children. In other cases,\r\n            // the parent container is not actually used so we just pass the\r\n            // block element here to avoid a DOM parentNode call.\r\n            oldVNode.type === Fragment\r\n                ? hostParentNode(oldVNode.el)\r\n                : fallbackContainer, null, parentComponent, parentSuspense, isSVG, true);\r\n        }\r\n    }\r\n    function patchProps(el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) {\r\n        if (oldProps !== newProps) {\r\n            for (const key in newProps) {\r\n                if (isReservedProp(key))\r\n                    continue;\r\n                const next = newProps[key];\r\n                const prev = oldProps[key];\r\n                if (next !== prev) {\r\n                    hostPatchProp(el, key, next, prev, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                }\r\n            }\r\n            if (oldProps !== EMPTY_OBJ) {\r\n                for (const key in oldProps) {\r\n                    if (isReservedProp(key))\r\n                        continue;\r\n                    if (!(key in newProps)) {\r\n                        hostPatchProp(el, key, null, null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) {\r\n        const fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateComment(''));\r\n        const fragmentEndAnchor = (n2.anchor = n1\r\n            ? n1.anchor\r\n            : hostCreateComment(''));\r\n        if (n1 == null) {\r\n            hostInsert(fragmentStartAnchor, container, anchor);\r\n            hostInsert(fragmentEndAnchor, container, anchor);\r\n            // a fragment can only have array children\r\n            // since they are either generated by the compiler, or implicitly created\r\n            // from arrays.\r\n            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, optimized);\r\n        }\r\n        else {\r\n            patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, optimized);\r\n        }\r\n    }\r\n    function processPortal(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) {\r\n        const targetSelector = n2.props && n2.props.target;\r\n        const { patchFlag, shapeFlag, children } = n2;\r\n        if (n1 == null) {\r\n            const target = (n2.target = isString(targetSelector)\r\n                ? hostQuerySelector(targetSelector)\r\n                : targetSelector);\r\n            if (target != null) {\r\n                if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                    hostSetElementText(target, children);\r\n                }\r\n                else if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(children, target, null, parentComponent, parentSuspense, isSVG, optimized);\r\n                }\r\n            }\r\n            else {\r\n                warn('Invalid Portal target on mount:', target, `(${typeof target})`);\r\n            }\r\n        }\r\n        else {\r\n            // update content\r\n            const target = (n2.target = n1.target);\r\n            if (patchFlag === 1 /* TEXT */) {\r\n                hostSetElementText(target, children);\r\n            }\r\n            else if (n2.dynamicChildren) {\r\n                // fast path when the portal happens to be a block root\r\n                patchBlockChildren(n1.dynamicChildren, n2.dynamicChildren, container, parentComponent, parentSuspense, isSVG);\r\n            }\r\n            else if (!optimized) {\r\n                patchChildren(n1, n2, target, null, parentComponent, parentSuspense, isSVG);\r\n            }\r\n            // target changed\r\n            if (targetSelector !== (n1.props && n1.props.target)) {\r\n                const nextTarget = (n2.target = isString(targetSelector)\r\n                    ? hostQuerySelector(targetSelector)\r\n                    : null);\r\n                if (nextTarget != null) {\r\n                    // move content\r\n                    if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                        hostSetElementText(target, '');\r\n                        hostSetElementText(nextTarget, children);\r\n                    }\r\n                    else if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                        for (let i = 0; i < children.length; i++) {\r\n                            move(children[i], nextTarget, null);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    warn('Invalid Portal target on update:', target, `(${typeof target})`);\r\n                }\r\n            }\r\n        }\r\n        // insert an empty node as the placeholder for the portal\r\n        processCommentNode(n1, n2, container, anchor);\r\n    }\r\n    function processSuspense(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) {\r\n        if (n1 == null) {\r\n            mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n        }\r\n        else {\r\n            patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, optimized);\r\n        }\r\n    }\r\n    function mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) {\r\n        const hiddenContainer = hostCreateElement('div');\r\n        const suspense = (n2.suspense = createSuspenseBoundary(n2, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, optimized));\r\n        const { content, fallback } = normalizeSuspenseChildren(n2);\r\n        suspense.subTree = content;\r\n        suspense.fallbackTree = fallback;\r\n        // start mounting the content subtree in an off-dom container\r\n        patch(null, content, hiddenContainer, null, parentComponent, suspense, isSVG, optimized);\r\n        // now check if we have encountered any async deps\r\n        if (suspense.deps > 0) {\r\n            // mount the fallback tree\r\n            patch(null, fallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n            isSVG, optimized);\r\n            n2.el = fallback.el;\r\n        }\r\n        else {\r\n            // Suspense has no async deps. Just resolve.\r\n            resolveSuspense(suspense);\r\n        }\r\n    }\r\n    function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, optimized) {\r\n        const suspense = (n2.suspense = n1.suspense);\r\n        suspense.vnode = n2;\r\n        const { content, fallback } = normalizeSuspenseChildren(n2);\r\n        const oldSubTree = suspense.subTree;\r\n        const oldFallbackTree = suspense.fallbackTree;\r\n        if (!suspense.isResolved) {\r\n            patch(oldSubTree, content, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, optimized);\r\n            if (suspense.deps > 0) {\r\n                // still pending. patch the fallback tree.\r\n                patch(oldFallbackTree, fallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG, optimized);\r\n                n2.el = fallback.el;\r\n            }\r\n            // If deps somehow becomes 0 after the patch it means the patch caused an\r\n            // async dep component to unmount and removed its dep. It will cause the\r\n            // suspense to resolve and we don't need to do anything here.\r\n        }\r\n        else {\r\n            // just normal patch inner content as a fragment\r\n            patch(oldSubTree, content, container, anchor, parentComponent, suspense, isSVG, optimized);\r\n            n2.el = content.el;\r\n        }\r\n        suspense.subTree = content;\r\n        suspense.fallbackTree = fallback;\r\n    }\r\n    function resolveSuspense(suspense) {\r\n        {\r\n            if (suspense.isResolved) {\r\n                throw new Error(`resolveSuspense() is called on an already resolved suspense boundary.`);\r\n            }\r\n            if (suspense.isUnmounted) {\r\n                throw new Error(`resolveSuspense() is called on an already unmounted suspense boundary.`);\r\n            }\r\n        }\r\n        const { vnode, subTree, fallbackTree, effects, parentComponent, container } = suspense;\r\n        // this is initial anchor on mount\r\n        let { anchor } = suspense;\r\n        // unmount fallback tree\r\n        if (fallbackTree.el) {\r\n            // if the fallback tree was mounted, it may have been moved\r\n            // as part of a parent suspense. get the latest anchor for insertion\r\n            anchor = getNextHostNode(fallbackTree);\r\n            unmount(fallbackTree, parentComponent, suspense, true);\r\n        }\r\n        // move content from off-dom container to actual container\r\n        move(subTree, container, anchor);\r\n        const el = (vnode.el = subTree.el);\r\n        // suspense as the root node of a component...\r\n        if (parentComponent && parentComponent.subTree === vnode) {\r\n            parentComponent.vnode.el = el;\r\n            updateHOCHostEl(parentComponent, el);\r\n        }\r\n        // check if there is a pending parent suspense\r\n        let parent = suspense.parent;\r\n        let hasUnresolvedAncestor = false;\r\n        while (parent) {\r\n            if (!parent.isResolved) {\r\n                // found a pending parent suspense, merge buffered post jobs\r\n                // into that parent\r\n                parent.effects.push(...effects);\r\n                hasUnresolvedAncestor = true;\r\n                break;\r\n            }\r\n            parent = parent.parent;\r\n        }\r\n        // no pending parent suspense, flush all jobs\r\n        if (!hasUnresolvedAncestor) {\r\n            queuePostFlushCb(effects);\r\n        }\r\n        suspense.isResolved = true;\r\n        // invoke @resolve event\r\n        const onResolve = vnode.props && vnode.props.onResolve;\r\n        if (isFunction(onResolve)) {\r\n            onResolve();\r\n        }\r\n    }\r\n    function restartSuspense(suspense) {\r\n        suspense.isResolved = false;\r\n        const { vnode, subTree, fallbackTree, parentComponent, container, hiddenContainer, isSVG, optimized } = suspense;\r\n        // move content tree back to the off-dom container\r\n        const anchor = getNextHostNode(subTree);\r\n        move(subTree, hiddenContainer, null);\r\n        // remount the fallback tree\r\n        patch(null, fallbackTree, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n        isSVG, optimized);\r\n        const el = (vnode.el = fallbackTree.el);\r\n        // suspense as the root node of a component...\r\n        if (parentComponent && parentComponent.subTree === vnode) {\r\n            parentComponent.vnode.el = el;\r\n            updateHOCHostEl(parentComponent, el);\r\n        }\r\n        // invoke @suspense event\r\n        const onSuspense = vnode.props && vnode.props.onSuspense;\r\n        if (isFunction(onSuspense)) {\r\n            onSuspense();\r\n        }\r\n    }\r\n    function processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) {\r\n        if (n1 == null) {\r\n            mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG);\r\n        }\r\n        else {\r\n            const instance = (n2.component = n1.component);\r\n            if (shouldUpdateComponent(n1, n2, optimized)) {\r\n                if (\r\n                    instance.asyncDep &&\r\n                    !instance.asyncResolved) {\r\n                    // async & still pending - just update props and slots\r\n                    // since the component's reactive effect for render isn't set-up yet\r\n                    {\r\n                        pushWarningContext(n2);\r\n                    }\r\n                    updateComponentPreRender(instance, n2);\r\n                    {\r\n                        popWarningContext();\r\n                    }\r\n                    return;\r\n                }\r\n                else {\r\n                    // normal update\r\n                    instance.next = n2;\r\n                    // instance.update is the reactive effect runner.\r\n                    instance.update();\r\n                }\r\n            }\r\n            else {\r\n                // no update needed. just copy over properties\r\n                n2.component = n1.component;\r\n                n2.el = n1.el;\r\n            }\r\n        }\r\n        if (n2.ref !== null && parentComponent !== null) {\r\n            setRef(n2.ref, n1 && n1.ref, parentComponent, n2.component.renderProxy);\r\n        }\r\n    }\r\n    function mountComponent(initialVNode, container, anchor, parentComponent, parentSuspense, isSVG) {\r\n        const instance = (initialVNode.component = createComponentInstance(initialVNode, parentComponent));\r\n        {\r\n            pushWarningContext(initialVNode);\r\n        }\r\n        // resolve props and slots for setup context\r\n        const propsOptions = initialVNode.type.props;\r\n        resolveProps(instance, initialVNode.props, propsOptions);\r\n        resolveSlots(instance, initialVNode.children);\r\n        // setup stateful logic\r\n        if (initialVNode.shapeFlag & 4 /* STATEFUL_COMPONENT */) {\r\n            setupStatefulComponent(instance, parentSuspense);\r\n        }\r\n        // setup() is async. This component relies on async logic to be resolved\r\n        // before proceeding\r\n        if ( instance.asyncDep) {\r\n            if (!parentSuspense) {\r\n                // TODO handle this properly\r\n                throw new Error('Async component without a suspense boundary!');\r\n            }\r\n            // parent suspense already resolved, need to re-suspense\r\n            // use queueJob so it's handled synchronously after patching the current\r\n            // suspense tree\r\n            if (parentSuspense.isResolved) {\r\n                queueJob(() => {\r\n                    restartSuspense(parentSuspense);\r\n                });\r\n            }\r\n            parentSuspense.deps++;\r\n            instance.asyncDep\r\n                .catch(err => {\r\n                handleError(err, instance, 0 /* SETUP_FUNCTION */);\r\n            })\r\n                .then(asyncSetupResult => {\r\n                // component may be unmounted before resolve\r\n                if (!instance.isUnmounted && !parentSuspense.isUnmounted) {\r\n                    retryAsyncComponent(instance, asyncSetupResult, parentSuspense, isSVG);\r\n                }\r\n            });\r\n            // give it a placeholder\r\n            const placeholder = (instance.subTree = createVNode(Comment));\r\n            processCommentNode(null, placeholder, container, anchor);\r\n            initialVNode.el = placeholder.el;\r\n            return;\r\n        }\r\n        setupRenderEffect(instance, parentSuspense, initialVNode, container, anchor, isSVG);\r\n        {\r\n            popWarningContext();\r\n        }\r\n    }\r\n    function retryAsyncComponent(instance, asyncSetupResult, parentSuspense, isSVG) {\r\n        parentSuspense.deps--;\r\n        // retry from this component\r\n        instance.asyncResolved = true;\r\n        const { vnode } = instance;\r\n        {\r\n            pushWarningContext(vnode);\r\n        }\r\n        handleSetupResult(instance, asyncSetupResult, parentSuspense);\r\n        setupRenderEffect(instance, parentSuspense, vnode, \r\n        // component may have been moved before resolve\r\n        hostParentNode(instance.subTree.el), getNextHostNode(instance.subTree), isSVG);\r\n        updateHOCHostEl(instance, vnode.el);\r\n        {\r\n            popWarningContext();\r\n        }\r\n        if (parentSuspense.deps === 0) {\r\n            resolveSuspense(parentSuspense);\r\n        }\r\n    }\r\n    function setupRenderEffect(instance, parentSuspense, initialVNode, container, anchor, isSVG) {\r\n        // create reactive effect for rendering\r\n        let mounted = false;\r\n        instance.update = effect(function componentEffect() {\r\n            if (!mounted) {\r\n                const subTree = (instance.subTree = renderComponentRoot(instance));\r\n                // beforeMount hook\r\n                if (instance.bm !== null) {\r\n                    invokeHooks(instance.bm);\r\n                }\r\n                patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);\r\n                initialVNode.el = subTree.el;\r\n                // mounted hook\r\n                if (instance.m !== null) {\r\n                    queuePostRenderEffect(instance.m, parentSuspense);\r\n                }\r\n                mounted = true;\r\n            }\r\n            else {\r\n                // updateComponent\r\n                // This is triggered by mutation of component's own state (next: null)\r\n                // OR parent calling processComponent (next: HostVNode)\r\n                const { next } = instance;\r\n                {\r\n                    pushWarningContext(next || instance.vnode);\r\n                }\r\n                if (next !== null) {\r\n                    updateComponentPreRender(instance, next);\r\n                }\r\n                const prevTree = instance.subTree;\r\n                const nextTree = (instance.subTree = renderComponentRoot(instance));\r\n                // beforeUpdate hook\r\n                if (instance.bu !== null) {\r\n                    invokeHooks(instance.bu);\r\n                }\r\n                // reset refs\r\n                // only needed if previous patch had refs\r\n                if (instance.refs !== EMPTY_OBJ) {\r\n                    instance.refs = {};\r\n                }\r\n                patch(prevTree, nextTree, \r\n                // parent may have changed if it's in a portal\r\n                hostParentNode(prevTree.el), \r\n                // anchor may have changed if it's in a fragment\r\n                getNextHostNode(prevTree), instance, parentSuspense, isSVG);\r\n                instance.vnode.el = nextTree.el;\r\n                if (next === null) {\r\n                    // self-triggered update. In case of HOC, update parent component\r\n                    // vnode el. HOC is indicated by parent instance's subTree pointing\r\n                    // to child component's vnode\r\n                    updateHOCHostEl(instance, nextTree.el);\r\n                }\r\n                // updated hook\r\n                if (instance.u !== null) {\r\n                    queuePostRenderEffect(instance.u, parentSuspense);\r\n                }\r\n                {\r\n                    popWarningContext();\r\n                }\r\n            }\r\n        },  createDevEffectOptions(instance) );\r\n    }\r\n    function updateComponentPreRender(instance, nextVNode) {\r\n        nextVNode.component = instance;\r\n        instance.vnode = nextVNode;\r\n        instance.next = null;\r\n        resolveProps(instance, nextVNode.props, nextVNode.type.props);\r\n        resolveSlots(instance, nextVNode.children);\r\n    }\r\n    function updateHOCHostEl({ vnode, parent }, el) {\r\n        while (parent && parent.subTree === vnode) {\r\n            (vnode = parent.vnode).el = el;\r\n            parent = parent.parent;\r\n        }\r\n    }\r\n    function patchChildren(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized = false) {\r\n        const c1 = n1 && n1.children;\r\n        const prevShapeFlag = n1 ? n1.shapeFlag : 0;\r\n        const c2 = n2.children;\r\n        const { patchFlag, shapeFlag } = n2;\r\n        if (patchFlag === -1 /* BAIL */) {\r\n            optimized = false;\r\n        }\r\n        // fast path\r\n        if (patchFlag > 0) {\r\n            if (patchFlag & 64 /* KEYED_FRAGMENT */) {\r\n                // this could be either fully-keyed or mixed (some keyed some not)\r\n                // presence of patchFlag means children are guaranteed to be arrays\r\n                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                return;\r\n            }\r\n            else if (patchFlag & 128 /* UNKEYED_FRAGMENT */) {\r\n                // unkeyed\r\n                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                return;\r\n            }\r\n        }\r\n        // children has 3 possibilities: text, array or no children.\r\n        if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n            // text children fast path\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                unmountChildren(c1, parentComponent, parentSuspense);\r\n            }\r\n            if (c2 !== c1) {\r\n                hostSetElementText(container, c2);\r\n            }\r\n        }\r\n        else {\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                // prev children was array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    // two arrays, cannot assume anything, do full diff\r\n                    patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                }\r\n                else {\r\n                    // no new children, just unmount old\r\n                    unmountChildren(c1, parentComponent, parentSuspense, true);\r\n                }\r\n            }\r\n            else {\r\n                // prev children was text OR null\r\n                // new children is array OR null\r\n                if (prevShapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                    hostSetElementText(container, '');\r\n                }\r\n                // mount new if array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) {\r\n        c1 = c1 || EMPTY_ARR;\r\n        c2 = c2 || EMPTY_ARR;\r\n        const oldLength = c1.length;\r\n        const newLength = c2.length;\r\n        const commonLength = Math.min(oldLength, newLength);\r\n        let i;\r\n        for (i = 0; i < commonLength; i++) {\r\n            const nextChild = optimized\r\n                ? c2[i]\r\n                : (c2[i] = normalizeVNode(c2[i]));\r\n            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, optimized);\r\n        }\r\n        if (oldLength > newLength) {\r\n            // remove old\r\n            unmountChildren(c1, parentComponent, parentSuspense, true, commonLength);\r\n        }\r\n        else {\r\n            // mount new\r\n            mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, commonLength);\r\n        }\r\n    }\r\n    // can be all-keyed or mixed\r\n    function patchKeyedChildren(c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized) {\r\n        let i = 0;\r\n        const l2 = c2.length;\r\n        let e1 = c1.length - 1; // prev ending index\r\n        let e2 = l2 - 1; // next ending index\r\n        // 1. sync from start\r\n        // (a b) c\r\n        // (a b) d e\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[i];\r\n            const n2 = optimized\r\n                ? c2[i]\r\n                : (c2[i] = normalizeVNode(c2[i]));\r\n            if (isSameType$1(n1, n2)) {\r\n                patch(n1, n2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        // 2. sync from end\r\n        // a (b c)\r\n        // d e (b c)\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[e1];\r\n            const n2 = optimized\r\n                ? c2[i]\r\n                : (c2[e2] = normalizeVNode(c2[e2]));\r\n            if (isSameType$1(n1, n2)) {\r\n                patch(n1, n2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            e1--;\r\n            e2--;\r\n        }\r\n        // 3. common sequence + mount\r\n        // (a b)\r\n        // (a b) c\r\n        // i = 2, e1 = 1, e2 = 2\r\n        // (a b)\r\n        // c (a b)\r\n        // i = 0, e1 = -1, e2 = 0\r\n        if (i > e1) {\r\n            if (i <= e2) {\r\n                const nextPos = e2 + 1;\r\n                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;\r\n                while (i <= e2) {\r\n                    patch(null, optimized ? c2[i] : (c2[i] = normalizeVNode(c2[i])), container, anchor, parentComponent, parentSuspense, isSVG);\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        // 4. common sequence + unmount\r\n        // (a b) c\r\n        // (a b)\r\n        // i = 2, e1 = 2, e2 = 1\r\n        // a (b c)\r\n        // (b c)\r\n        // i = 0, e1 = 0, e2 = -1\r\n        else if (i > e2) {\r\n            while (i <= e1) {\r\n                unmount(c1[i], parentComponent, parentSuspense, true);\r\n                i++;\r\n            }\r\n        }\r\n        // 5. unknown sequence\r\n        // [i ... e1 + 1]: a b [c d e] f g\r\n        // [i ... e2 + 1]: a b [e d c h] f g\r\n        // i = 2, e1 = 4, e2 = 5\r\n        else {\r\n            const s1 = i; // prev starting index\r\n            const s2 = i; // next starting index\r\n            // 5.1 build key:index map for newChildren\r\n            const keyToNewIndexMap = new Map();\r\n            for (i = s2; i <= e2; i++) {\r\n                const nextChild = optimized\r\n                    ? c2[i]\r\n                    : (c2[i] = normalizeVNode(c2[i]));\r\n                if (nextChild.key != null) {\r\n                    if ( keyToNewIndexMap.has(nextChild.key)) {\r\n                        warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);\r\n                    }\r\n                    keyToNewIndexMap.set(nextChild.key, i);\r\n                }\r\n            }\r\n            // 5.2 loop through old children left to be patched and try to patch\r\n            // matching nodes & remove nodes that are no longer present\r\n            let j;\r\n            let patched = 0;\r\n            const toBePatched = e2 - s2 + 1;\r\n            let moved = false;\r\n            // used to track whether any node has moved\r\n            let maxNewIndexSoFar = 0;\r\n            // works as Map<newIndex, oldIndex>\r\n            // Note that oldIndex is offset by +1\r\n            // and oldIndex = 0 is a special value indicating the new node has\r\n            // no corresponding old node.\r\n            // used for determining longest stable subsequence\r\n            const newIndexToOldIndexMap = new Array(toBePatched);\r\n            for (i = 0; i < toBePatched; i++)\r\n                newIndexToOldIndexMap[i] = 0;\r\n            for (i = s1; i <= e1; i++) {\r\n                const prevChild = c1[i];\r\n                if (patched >= toBePatched) {\r\n                    // all new children have been patched so this can only be a removal\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                    continue;\r\n                }\r\n                let newIndex;\r\n                if (prevChild.key != null) {\r\n                    newIndex = keyToNewIndexMap.get(prevChild.key);\r\n                }\r\n                else {\r\n                    // key-less node, try to locate a key-less node of the same type\r\n                    for (j = s2; j <= e2; j++) {\r\n                        if (newIndexToOldIndexMap[j - s2] === 0 &&\r\n                            isSameType$1(prevChild, c2[j])) {\r\n                            newIndex = j;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (newIndex === undefined) {\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                }\r\n                else {\r\n                    newIndexToOldIndexMap[newIndex - s2] = i + 1;\r\n                    if (newIndex >= maxNewIndexSoFar) {\r\n                        maxNewIndexSoFar = newIndex;\r\n                    }\r\n                    else {\r\n                        moved = true;\r\n                    }\r\n                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, optimized);\r\n                    patched++;\r\n                }\r\n            }\r\n            // 5.3 move and mount\r\n            // generate longest stable subsequence only when nodes have moved\r\n            const increasingNewIndexSequence = moved\r\n                ? getSequence(newIndexToOldIndexMap)\r\n                : EMPTY_ARR;\r\n            j = increasingNewIndexSequence.length - 1;\r\n            // looping backwards so that we can use last patched node as anchor\r\n            for (i = toBePatched - 1; i >= 0; i--) {\r\n                const nextIndex = s2 + i;\r\n                const nextChild = c2[nextIndex];\r\n                const anchor = nextIndex + 1 < l2\r\n                    ? c2[nextIndex + 1].el\r\n                    : parentAnchor;\r\n                if (newIndexToOldIndexMap[i] === 0) {\r\n                    // mount new\r\n                    patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG);\r\n                }\r\n                else if (moved) {\r\n                    // move if:\r\n                    // There is no stable subsequence (e.g. a reverse)\r\n                    // OR current node is not among the stable sequence\r\n                    if (j < 0 || i !== increasingNewIndexSequence[j]) {\r\n                        move(nextChild, container, anchor);\r\n                    }\r\n                    else {\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function move(vnode, container, anchor) {\r\n        if (vnode.component !== null) {\r\n            move(vnode.component.subTree, container, anchor);\r\n            return;\r\n        }\r\n        if ( vnode.type === Suspense) {\r\n            const suspense = vnode.suspense;\r\n            move(suspense.isResolved ? suspense.subTree : suspense.fallbackTree, container, anchor);\r\n            suspense.container = container;\r\n            return;\r\n        }\r\n        if (vnode.type === Fragment) {\r\n            hostInsert(vnode.el, container, anchor);\r\n            const children = vnode.children;\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, anchor);\r\n            }\r\n            hostInsert(vnode.anchor, container, anchor);\r\n        }\r\n        else {\r\n            hostInsert(vnode.el, container, anchor);\r\n        }\r\n    }\r\n    function unmount(vnode, parentComponent, parentSuspense, doRemove) {\r\n        const { props, ref, type, component, suspense, children, dynamicChildren, shapeFlag, anchor } = vnode;\r\n        // unset ref\r\n        if (ref !== null && parentComponent !== null) {\r\n            setRef(ref, null, parentComponent, null);\r\n        }\r\n        if (component != null) {\r\n            unmountComponent(component, parentSuspense, doRemove);\r\n            return;\r\n        }\r\n        if ( suspense != null) {\r\n            unmountSuspense(suspense, parentComponent, parentSuspense, doRemove);\r\n            return;\r\n        }\r\n        if (props != null && props.onVnodeBeforeUnmount != null) {\r\n            invokeDirectiveHook(props.onVnodeBeforeUnmount, parentComponent, vnode);\r\n        }\r\n        const shouldRemoveChildren = type === Fragment && doRemove;\r\n        if (dynamicChildren != null) {\r\n            unmountChildren(dynamicChildren, parentComponent, parentSuspense, shouldRemoveChildren);\r\n        }\r\n        else if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            unmountChildren(children, parentComponent, parentSuspense, shouldRemoveChildren);\r\n        }\r\n        if (doRemove) {\r\n            hostRemove(vnode.el);\r\n            if (anchor != null)\r\n                hostRemove(anchor);\r\n        }\r\n        if (props != null && props.onVnodeUnmounted != null) {\r\n            queuePostRenderEffect(() => {\r\n                invokeDirectiveHook(props.onVnodeUnmounted, parentComponent, vnode);\r\n            }, parentSuspense);\r\n        }\r\n    }\r\n    function unmountComponent(instance, parentSuspense, doRemove) {\r\n        const { bum, effects, update, subTree, um } = instance;\r\n        // beforeUnmount hook\r\n        if (bum !== null) {\r\n            invokeHooks(bum);\r\n        }\r\n        if (effects !== null) {\r\n            for (let i = 0; i < effects.length; i++) {\r\n                stop(effects[i]);\r\n            }\r\n        }\r\n        // update may be null if a component is unmounted before its async\r\n        // setup has resolved.\r\n        if (update !== null) {\r\n            stop(update);\r\n            unmount(subTree, instance, parentSuspense, doRemove);\r\n        }\r\n        // unmounted hook\r\n        if (um !== null) {\r\n            queuePostRenderEffect(um, parentSuspense);\r\n        }\r\n        queuePostFlushCb(() => {\r\n            instance.isUnmounted = true;\r\n        });\r\n        // A component with async dep inside a pending suspense is unmounted before\r\n        // its async dep resolves. This should remove the dep from the suspense, and\r\n        // cause the suspense to resolve immediately if that was the last dep.\r\n        if (\r\n            parentSuspense !== null &&\r\n            !parentSuspense.isResolved &&\r\n            !parentSuspense.isUnmounted &&\r\n            instance.asyncDep !== null &&\r\n            !instance.asyncResolved) {\r\n            parentSuspense.deps--;\r\n            if (parentSuspense.deps === 0) {\r\n                resolveSuspense(parentSuspense);\r\n            }\r\n        }\r\n    }\r\n    function unmountSuspense(suspense, parentComponent, parentSuspense, doRemove) {\r\n        suspense.isUnmounted = true;\r\n        unmount(suspense.subTree, parentComponent, parentSuspense, doRemove);\r\n        if (!suspense.isResolved) {\r\n            unmount(suspense.fallbackTree, parentComponent, parentSuspense, doRemove);\r\n        }\r\n    }\r\n    function unmountChildren(children, parentComponent, parentSuspense, doRemove, start = 0) {\r\n        for (let i = start; i < children.length; i++) {\r\n            unmount(children[i], parentComponent, parentSuspense, doRemove);\r\n        }\r\n    }\r\n    function getNextHostNode({ component, suspense, anchor, el }) {\r\n        if (component !== null) {\r\n            return getNextHostNode(component.subTree);\r\n        }\r\n        if ( suspense !== null) {\r\n            return getNextHostNode(suspense.isResolved ? suspense.subTree : suspense.fallbackTree);\r\n        }\r\n        return hostNextSibling((anchor || el));\r\n    }\r\n    function setRef(ref, oldRef, parent, value) {\r\n        const refs = parent.refs === EMPTY_OBJ ? (parent.refs = {}) : parent.refs;\r\n        const renderContext = toRaw(parent.renderContext);\r\n        // unset old ref\r\n        if (oldRef !== null && oldRef !== ref) {\r\n            if (isString(oldRef)) {\r\n                refs[oldRef] = null;\r\n                const oldSetupRef = renderContext[oldRef];\r\n                if (isRef(oldSetupRef)) {\r\n                    oldSetupRef.value = null;\r\n                }\r\n            }\r\n            else if (isRef(oldRef)) {\r\n                oldRef.value = null;\r\n            }\r\n        }\r\n        if (isString(ref)) {\r\n            const setupRef = renderContext[ref];\r\n            if (isRef(setupRef)) {\r\n                setupRef.value = value;\r\n            }\r\n            refs[ref] = value;\r\n        }\r\n        else if (isRef(ref)) {\r\n            ref.value = value;\r\n        }\r\n        else if (isFunction(ref)) {\r\n            ref(value, refs);\r\n        }\r\n        else {\r\n            warn('Invalid template ref type:', value, `(${typeof value})`);\r\n        }\r\n    }\r\n    const render = (vnode, container) => {\r\n        if (vnode == null) {\r\n            if (container._vnode) {\r\n                unmount(container._vnode, null, null, true);\r\n            }\r\n        }\r\n        else {\r\n            patch(container._vnode || null, vnode, container);\r\n        }\r\n        flushPostFlushCbs();\r\n        container._vnode = vnode;\r\n    };\r\n    return {\r\n        render,\r\n        createApp: createAppAPI(render)\r\n    };\r\n}\r\n// https://en.wikipedia.org/wiki/Longest_increasing_subsequence\r\nfunction getSequence(arr) {\r\n    const p = arr.slice();\r\n    const result = [0];\r\n    let i, j, u, v, c;\r\n    const len = arr.length;\r\n    for (i = 0; i < len; i++) {\r\n        const arrI = arr[i];\r\n        if (arrI !== 0) {\r\n            j = result[result.length - 1];\r\n            if (arr[j] < arrI) {\r\n                p[i] = j;\r\n                result.push(i);\r\n                continue;\r\n            }\r\n            u = 0;\r\n            v = result.length - 1;\r\n            while (u < v) {\r\n                c = ((u + v) / 2) | 0;\r\n                if (arr[result[c]] < arrI) {\r\n                    u = c + 1;\r\n                }\r\n                else {\r\n                    v = c;\r\n                }\r\n            }\r\n            if (arrI < arr[result[u]]) {\r\n                if (u > 0) {\r\n                    p[i] = result[u - 1];\r\n                }\r\n                result[u] = i;\r\n            }\r\n        }\r\n    }\r\n    u = result.length;\r\n    v = result[u - 1];\r\n    while (u-- > 0) {\r\n        result[u] = v;\r\n        v = p[v];\r\n    }\r\n    return result;\r\n}\n\nconst invoke = (fn) => fn();\r\n// implementation\r\nfunction watch(effectOrSource, cbOrOptions, options) {\r\n    if (isFunction(cbOrOptions)) {\r\n        // effect callback as 2nd argument - this is a source watcher\r\n        return doWatch(effectOrSource, cbOrOptions, options);\r\n    }\r\n    else {\r\n        // 2nd argument is either missing or an options object\r\n        // - this is a simple effect watcher\r\n        return doWatch(effectOrSource, null, cbOrOptions);\r\n    }\r\n}\r\nfunction doWatch(source, cb, { lazy, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {\r\n    const instance = currentInstance;\r\n    const suspense = currentSuspense;\r\n    let getter;\r\n    if (isArray(source)) {\r\n        getter = () => source.map(s => isRef(s)\r\n            ? s.value\r\n            : callWithErrorHandling(s, instance, 2 /* WATCH_GETTER */));\r\n    }\r\n    else if (isRef(source)) {\r\n        getter = () => source.value;\r\n    }\r\n    else if (cb) {\r\n        // getter with cb\r\n        getter = () => callWithErrorHandling(source, instance, 2 /* WATCH_GETTER */);\r\n    }\r\n    else {\r\n        // no cb -> simple effect\r\n        getter = () => {\r\n            if (instance && instance.isUnmounted) {\r\n                return;\r\n            }\r\n            if (cleanup) {\r\n                cleanup();\r\n            }\r\n            return callWithErrorHandling(source, instance, 3 /* WATCH_CALLBACK */, [registerCleanup]);\r\n        };\r\n    }\r\n    if (deep) {\r\n        const baseGetter = getter;\r\n        getter = () => traverse(baseGetter());\r\n    }\r\n    let cleanup;\r\n    const registerCleanup = (fn) => {\r\n        // TODO wrap the cleanup fn for error handling\r\n        cleanup = runner.onStop = () => {\r\n            callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */);\r\n        };\r\n    };\r\n    let oldValue = isArray(source) ? [] : undefined;\r\n    const applyCb = cb\r\n        ? () => {\r\n            if (instance && instance.isUnmounted) {\r\n                return;\r\n            }\r\n            const newValue = runner();\r\n            if (deep || hasChanged(newValue, oldValue)) {\r\n                // cleanup before running cb again\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */, [\r\n                    newValue,\r\n                    oldValue,\r\n                    registerCleanup\r\n                ]);\r\n                oldValue = newValue;\r\n            }\r\n        }\r\n        : void 0;\r\n    let scheduler;\r\n    if (flush === 'sync') {\r\n        scheduler = invoke;\r\n    }\r\n    else if (flush === 'pre') {\r\n        scheduler = job => {\r\n            if (!instance || instance.vnode.el != null) {\r\n                queueJob(job);\r\n            }\r\n            else {\r\n                // with 'pre' option, the first call must happen before\r\n                // the component is mounted so it is called synchronously.\r\n                job();\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        scheduler = job => {\r\n            queuePostRenderEffect(job, suspense);\r\n        };\r\n    }\r\n    const runner = effect(getter, {\r\n        lazy: true,\r\n        // so it runs before component update effects in pre flush mode\r\n        computed: true,\r\n        onTrack,\r\n        onTrigger,\r\n        scheduler: applyCb ? () => scheduler(applyCb) : scheduler\r\n    });\r\n    if (!lazy) {\r\n        if (applyCb) {\r\n            scheduler(applyCb);\r\n        }\r\n        else {\r\n            scheduler(runner);\r\n        }\r\n    }\r\n    else {\r\n        oldValue = runner();\r\n    }\r\n    recordEffect(runner);\r\n    return () => {\r\n        stop(runner);\r\n    };\r\n}\r\n// this.$watch\r\nfunction instanceWatch(source, cb, options) {\r\n    const ctx = this.renderProxy;\r\n    const getter = isString(source) ? () => ctx[source] : source.bind(ctx);\r\n    const stop = watch(getter, cb.bind(ctx), options);\r\n    onBeforeUnmount(stop, this);\r\n    return stop;\r\n}\r\nfunction traverse(value, seen = new Set()) {\r\n    if (!isObject(value) || seen.has(value)) {\r\n        return;\r\n    }\r\n    seen.add(value);\r\n    if (isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            traverse(value[i], seen);\r\n        }\r\n    }\r\n    else if (value instanceof Map) {\r\n        value.forEach((v, key) => {\r\n            // to register mutation dep for existing keys\r\n            traverse(value.get(key), seen);\r\n        });\r\n    }\r\n    else if (value instanceof Set) {\r\n        value.forEach(v => {\r\n            traverse(v, seen);\r\n        });\r\n    }\r\n    else {\r\n        for (const key in value) {\r\n            traverse(value[key], seen);\r\n        }\r\n    }\r\n    return value;\r\n}\n\nconst publicPropertiesMap = {\r\n    $data: 'data',\r\n    $props: 'propsProxy',\r\n    $attrs: 'attrs',\r\n    $slots: 'slots',\r\n    $refs: 'refs',\r\n    $parent: 'parent',\r\n    $root: 'root',\r\n    $emit: 'emit',\r\n    $options: 'type'\r\n};\r\nconst PublicInstanceProxyHandlers = {\r\n    get(target, key) {\r\n        const { renderContext, data, props, propsProxy, accessCache, type, user } = target;\r\n        // fast path for unscopables when using `with` block\r\n        if ( key === Symbol.unscopables) {\r\n            return;\r\n        }\r\n        // This getter gets called for every property access on the render context\r\n        // during render and is a major hotspot. The most expensive part of this\r\n        // is the multiple hasOwn() calls. It's much faster to do a simple property\r\n        // access on a plain object, so we use an accessCache object (with null\r\n        // prototype) to memoize what access type a key corresponds to.\r\n        const n = accessCache[key];\r\n        if (n !== undefined) {\r\n            switch (n) {\r\n                case 0 /* DATA */:\r\n                    return data[key];\r\n                case 1 /* CONTEXT */:\r\n                    return renderContext[key];\r\n                case 2 /* PROPS */:\r\n                    return propsProxy[key];\r\n            }\r\n        }\r\n        else if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n            accessCache[key] = 0 /* DATA */;\r\n            return data[key];\r\n        }\r\n        else if (hasOwn(renderContext, key)) {\r\n            accessCache[key] = 1 /* CONTEXT */;\r\n            return renderContext[key];\r\n        }\r\n        else if (hasOwn(props, key)) {\r\n            // only cache props access if component has declared (thus stable) props\r\n            if (type.props != null) {\r\n                accessCache[key] = 2 /* PROPS */;\r\n            }\r\n            // return the value from propsProxy for ref unwrapping and readonly\r\n            return propsProxy[key];\r\n        }\r\n        else if (key === '$cache') {\r\n            return target.renderCache || (target.renderCache = []);\r\n        }\r\n        else if (key === '$el') {\r\n            return target.vnode.el;\r\n        }\r\n        else if (hasOwn(publicPropertiesMap, key)) {\r\n            if ( key === '$attrs') {\r\n                markAttrsAccessed();\r\n            }\r\n            return target[publicPropertiesMap[key]];\r\n        }\r\n        // methods are only exposed when options are supported\r\n        {\r\n            switch (key) {\r\n                case '$forceUpdate':\r\n                    return target.update;\r\n                case '$nextTick':\r\n                    return nextTick;\r\n                case '$watch':\r\n                    return instanceWatch.bind(target);\r\n            }\r\n        }\r\n        if (hasOwn(user, key)) {\r\n            return user[key];\r\n        }\r\n        else if ( currentRenderingInstance != null) {\r\n            warn(`Property ${JSON.stringify(key)} was accessed during render ` +\r\n                `but is not defined on instance.`);\r\n        }\r\n    },\r\n    set(target, key, value) {\r\n        const { data, renderContext } = target;\r\n        if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n            data[key] = value;\r\n        }\r\n        else if (hasOwn(renderContext, key)) {\r\n            renderContext[key] = value;\r\n        }\r\n        else if (key[0] === '$' && key.slice(1) in target) {\r\n            \r\n                warn(`Attempting to mutate public property \"${key}\". ` +\r\n                    `Properties starting with $ are reserved and readonly.`, target);\r\n            return false;\r\n        }\r\n        else if (key in target.props) {\r\n            \r\n                warn(`Attempting to mutate prop \"${key}\". Props are readonly.`, target);\r\n            return false;\r\n        }\r\n        else {\r\n            target.user[key] = value;\r\n        }\r\n        return true;\r\n    }\r\n};\r\n{\r\n    // this trap is only called in browser-compiled render functions that use\r\n    // `with (this) {}`\r\n    PublicInstanceProxyHandlers.has = (_, key) => {\r\n        return key[0] !== '_' && !isGloballyWhitelisted(key);\r\n    };\r\n}\n\nfunction provide(key, value) {\r\n    if (!currentInstance) {\r\n        {\r\n            warn(`provide() can only be used inside setup().`);\r\n        }\r\n    }\r\n    else {\r\n        let provides = currentInstance.provides;\r\n        // by default an instance inherits its parent's provides object\r\n        // but when it needs to provide values of its own, it creates its\r\n        // own provides object using parent provides object as prototype.\r\n        // this way in `inject` we can simply look up injections from direct\r\n        // parent and let the prototype chain do the work.\r\n        const parentProvides = currentInstance.parent && currentInstance.parent.provides;\r\n        if (parentProvides === provides) {\r\n            provides = currentInstance.provides = Object.create(parentProvides);\r\n        }\r\n        // TS doesn't allow symbol as index type\r\n        provides[key] = value;\r\n    }\r\n}\r\nfunction inject(key, defaultValue) {\r\n    if (currentInstance) {\r\n        const provides = currentInstance.provides;\r\n        if (key in provides) {\r\n            // TS doesn't allow symbol as index type\r\n            return provides[key];\r\n        }\r\n        else if (defaultValue !== undefined) {\r\n            return defaultValue;\r\n        }\r\n        else {\r\n            warn(`injection \"${String(key)}\" not found.`);\r\n        }\r\n    }\r\n    else {\r\n        warn(`inject() can only be used inside setup().`);\r\n    }\r\n}\n\nfunction createDuplicateChecker() {\r\n    const cache = Object.create(null);\r\n    return (type, key) => {\r\n        if (cache[key]) {\r\n            warn(`${type} property \"${key}\" is already defined in ${cache[key]}.`);\r\n        }\r\n        else {\r\n            cache[key] = type;\r\n        }\r\n    };\r\n}\r\nfunction applyOptions(instance, options, asMixin = false) {\r\n    const renderContext = instance.renderContext === EMPTY_OBJ\r\n        ? (instance.renderContext = reactive({}))\r\n        : instance.renderContext;\r\n    const ctx = instance.renderProxy;\r\n    const { \r\n    // composition\r\n    mixins, extends: extendsOptions, \r\n    // state\r\n    props: propsOptions, data: dataOptions, computed: computedOptions, methods, watch: watchOptions, provide: provideOptions, inject: injectOptions, \r\n    // assets\r\n    components, directives, \r\n    // lifecycle\r\n    beforeMount, mounted, beforeUpdate, updated, \r\n    // TODO activated\r\n    // TODO deactivated\r\n    beforeUnmount, unmounted, renderTracked, renderTriggered, errorCaptured } = options;\r\n    const globalMixins = instance.appContext.mixins;\r\n    // call it only during dev\r\n    const checkDuplicateProperties =  createDuplicateChecker() ;\r\n    // applyOptions is called non-as-mixin once per instance\r\n    if (!asMixin) {\r\n        callSyncHook('beforeCreate', options, ctx, globalMixins);\r\n        // global mixins are applied first\r\n        applyMixins(instance, globalMixins);\r\n    }\r\n    // extending a base component...\r\n    if (extendsOptions) {\r\n        applyOptions(instance, extendsOptions, true);\r\n    }\r\n    // local mixins\r\n    if (mixins) {\r\n        applyMixins(instance, mixins);\r\n    }\r\n    if ( propsOptions) {\r\n        for (const key in propsOptions) {\r\n            checkDuplicateProperties(\"Props\" /* PROPS */, key);\r\n        }\r\n    }\r\n    // state options\r\n    if (dataOptions) {\r\n        const data = isFunction(dataOptions) ? dataOptions.call(ctx) : dataOptions;\r\n        if (!isObject(data)) {\r\n             warn(`data() should return an object.`);\r\n        }\r\n        else if (instance.data === EMPTY_OBJ) {\r\n            {\r\n                for (const key in data) {\r\n                    checkDuplicateProperties(\"Data\" /* DATA */, key);\r\n                }\r\n            }\r\n            instance.data = reactive(data);\r\n        }\r\n        else {\r\n            // existing data: this is a mixin or extends.\r\n            extend(instance.data, data);\r\n        }\r\n    }\r\n    if (computedOptions) {\r\n        for (const key in computedOptions) {\r\n            const opt = computedOptions[key];\r\n             checkDuplicateProperties(\"Computed\" /* COMPUTED */, key);\r\n            if (isFunction(opt)) {\r\n                renderContext[key] = computed$1(opt.bind(ctx));\r\n            }\r\n            else {\r\n                const { get, set } = opt;\r\n                if (isFunction(get)) {\r\n                    renderContext[key] = computed$1({\r\n                        get: get.bind(ctx),\r\n                        set: isFunction(set)\r\n                            ? set.bind(ctx)\r\n                            :  () => {\r\n                                    warn(`Computed property \"${key}\" was assigned to but it has no setter.`);\r\n                                }\r\n                                \r\n                    });\r\n                }\r\n                else {\r\n                    warn(`Computed property \"${key}\" has no getter.`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (methods) {\r\n        for (const key in methods) {\r\n            const methodHandler = methods[key];\r\n            if (isFunction(methodHandler)) {\r\n                 checkDuplicateProperties(\"Methods\" /* METHODS */, key);\r\n                renderContext[key] = methodHandler.bind(ctx);\r\n            }\r\n            else {\r\n                warn(`Method \"${key}\" has type \"${typeof methodHandler}\" in the component definition. ` +\r\n                    `Did you reference the function correctly?`);\r\n            }\r\n        }\r\n    }\r\n    if (watchOptions) {\r\n        for (const key in watchOptions) {\r\n            createWatcher(watchOptions[key], renderContext, ctx, key);\r\n        }\r\n    }\r\n    if (provideOptions) {\r\n        const provides = isFunction(provideOptions)\r\n            ? provideOptions.call(ctx)\r\n            : provideOptions;\r\n        for (const key in provides) {\r\n            provide(key, provides[key]);\r\n        }\r\n    }\r\n    if (injectOptions) {\r\n        if (isArray(injectOptions)) {\r\n            for (let i = 0; i < injectOptions.length; i++) {\r\n                const key = injectOptions[i];\r\n                 checkDuplicateProperties(\"Inject\" /* INJECT */, key);\r\n                renderContext[key] = inject(key);\r\n            }\r\n        }\r\n        else {\r\n            for (const key in injectOptions) {\r\n                 checkDuplicateProperties(\"Inject\" /* INJECT */, key);\r\n                const opt = injectOptions[key];\r\n                if (isObject(opt)) {\r\n                    renderContext[key] = inject(opt.from, opt.default);\r\n                }\r\n                else {\r\n                    renderContext[key] = inject(opt);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // asset options\r\n    if (components) {\r\n        extend(instance.components, components);\r\n    }\r\n    if (directives) {\r\n        extend(instance.directives, directives);\r\n    }\r\n    // lifecycle options\r\n    if (!asMixin) {\r\n        callSyncHook('created', options, ctx, globalMixins);\r\n    }\r\n    if (beforeMount) {\r\n        onBeforeMount(beforeMount.bind(ctx));\r\n    }\r\n    if (mounted) {\r\n        onMounted(mounted.bind(ctx));\r\n    }\r\n    if (beforeUpdate) {\r\n        onBeforeUpdate(beforeUpdate.bind(ctx));\r\n    }\r\n    if (updated) {\r\n        onUpdated(updated.bind(ctx));\r\n    }\r\n    if (errorCaptured) {\r\n        onErrorCaptured(errorCaptured.bind(ctx));\r\n    }\r\n    if (renderTracked) {\r\n        onRenderTracked(renderTracked.bind(ctx));\r\n    }\r\n    if (renderTriggered) {\r\n        onRenderTriggered(renderTriggered.bind(ctx));\r\n    }\r\n    if (beforeUnmount) {\r\n        onBeforeUnmount(beforeUnmount.bind(ctx));\r\n    }\r\n    if (unmounted) {\r\n        onUnmounted(unmounted.bind(ctx));\r\n    }\r\n}\r\nfunction callSyncHook(name, options, ctx, globalMixins) {\r\n    callHookFromMixins(name, globalMixins, ctx);\r\n    const baseHook = options.extends && options.extends[name];\r\n    if (baseHook) {\r\n        baseHook.call(ctx);\r\n    }\r\n    const mixins = options.mixins;\r\n    if (mixins) {\r\n        callHookFromMixins(name, mixins, ctx);\r\n    }\r\n    const selfHook = options[name];\r\n    if (selfHook) {\r\n        selfHook.call(ctx);\r\n    }\r\n}\r\nfunction callHookFromMixins(name, mixins, ctx) {\r\n    for (let i = 0; i < mixins.length; i++) {\r\n        const fn = mixins[i][name];\r\n        if (fn) {\r\n            fn.call(ctx);\r\n        }\r\n    }\r\n}\r\nfunction applyMixins(instance, mixins) {\r\n    for (let i = 0; i < mixins.length; i++) {\r\n        applyOptions(instance, mixins[i], true);\r\n    }\r\n}\r\nfunction createWatcher(raw, renderContext, ctx, key) {\r\n    const getter = () => ctx[key];\r\n    if (isString(raw)) {\r\n        const handler = renderContext[raw];\r\n        if (isFunction(handler)) {\r\n            watch(getter, handler);\r\n        }\r\n        else {\r\n            warn(`Invalid watch handler specified by key \"${raw}\"`, handler);\r\n        }\r\n    }\r\n    else if (isFunction(raw)) {\r\n        watch(getter, raw.bind(ctx));\r\n    }\r\n    else if (isObject(raw)) {\r\n        if (isArray(raw)) {\r\n            raw.forEach(r => createWatcher(r, renderContext, ctx, key));\r\n        }\r\n        else {\r\n            watch(getter, raw.handler.bind(ctx), raw);\r\n        }\r\n    }\r\n    else {\r\n        warn(`Invalid watch option: \"${key}\"`);\r\n    }\r\n}\n\nconst emptyAppContext = createAppContext();\r\nfunction createComponentInstance(vnode, parent) {\r\n    // inherit parent app context - or - if root, adopt from root vnode\r\n    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;\r\n    const instance = {\r\n        vnode,\r\n        parent,\r\n        appContext,\r\n        type: vnode.type,\r\n        root: null,\r\n        next: null,\r\n        subTree: null,\r\n        update: null,\r\n        render: null,\r\n        renderProxy: null,\r\n        propsProxy: null,\r\n        setupContext: null,\r\n        effects: null,\r\n        provides: parent ? parent.provides : Object.create(appContext.provides),\r\n        accessCache: null,\r\n        renderCache: null,\r\n        // setup context properties\r\n        renderContext: EMPTY_OBJ,\r\n        data: EMPTY_OBJ,\r\n        props: EMPTY_OBJ,\r\n        attrs: EMPTY_OBJ,\r\n        slots: EMPTY_OBJ,\r\n        refs: EMPTY_OBJ,\r\n        // per-instance asset storage (mutable during options resolution)\r\n        components: Object.create(appContext.components),\r\n        directives: Object.create(appContext.directives),\r\n        // async dependency management\r\n        asyncDep: null,\r\n        asyncResult: null,\r\n        asyncResolved: false,\r\n        // user namespace for storing whatever the user assigns to `this`\r\n        user: {},\r\n        // lifecycle hooks\r\n        // not using enums here because it results in computed properties\r\n        isUnmounted: false,\r\n        bc: null,\r\n        c: null,\r\n        bm: null,\r\n        m: null,\r\n        bu: null,\r\n        u: null,\r\n        um: null,\r\n        bum: null,\r\n        da: null,\r\n        a: null,\r\n        rtg: null,\r\n        rtc: null,\r\n        ec: null,\r\n        emit: (event, ...args) => {\r\n            const props = instance.vnode.props || EMPTY_OBJ;\r\n            const handler = props[`on${event}`] || props[`on${capitalize(event)}`];\r\n            if (handler) {\r\n                callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n            }\r\n        }\r\n    };\r\n    instance.root = parent ? parent.root : instance;\r\n    return instance;\r\n}\r\nlet currentInstance = null;\r\nlet currentSuspense = null;\r\nconst getCurrentInstance = () => currentInstance;\r\nconst setCurrentInstance = (instance) => {\r\n    currentInstance = instance;\r\n};\r\nconst isBuiltInTag = /*#__PURE__*/ makeMap('slot,component');\r\nfunction validateComponentName(name, config) {\r\n    const appIsNativeTag = config.isNativeTag || NO;\r\n    if (isBuiltInTag(name) || appIsNativeTag(name)) {\r\n        warn('Do not use built-in or reserved HTML elements as component id: ' + name);\r\n    }\r\n}\r\nfunction setupStatefulComponent(instance, parentSuspense) {\r\n    const Component = instance.type;\r\n    {\r\n        if (Component.name) {\r\n            validateComponentName(Component.name, instance.appContext.config);\r\n        }\r\n        if (Component.components) {\r\n            const names = Object.keys(Component.components);\r\n            for (let i = 0; i < names.length; i++) {\r\n                const name = names[i];\r\n                validateComponentName(name, instance.appContext.config);\r\n            }\r\n        }\r\n        if (Component.directives) {\r\n            const names = Object.keys(Component.directives);\r\n            for (let i = 0; i < names.length; i++) {\r\n                validateDirectiveName(names[i]);\r\n            }\r\n        }\r\n    }\r\n    // 0. create render proxy property access cache\r\n    instance.accessCache = {};\r\n    // 1. create render proxy\r\n    instance.renderProxy = new Proxy(instance, PublicInstanceProxyHandlers);\r\n    // 2. create props proxy\r\n    // the propsProxy is a reactive AND readonly proxy to the actual props.\r\n    // it will be updated in resolveProps() on updates before render\r\n    const propsProxy = (instance.propsProxy = readonly(instance.props));\r\n    // 3. call setup()\r\n    const { setup } = Component;\r\n    if (setup) {\r\n        const setupContext = (instance.setupContext =\r\n            setup.length > 1 ? createSetupContext(instance) : null);\r\n        currentInstance = instance;\r\n        currentSuspense = parentSuspense;\r\n        const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */, [propsProxy, setupContext]);\r\n        currentInstance = null;\r\n        currentSuspense = null;\r\n        if (isPromise(setupResult)) {\r\n            {\r\n                // async setup returned Promise.\r\n                // bail here and wait for re-entry.\r\n                instance.asyncDep = setupResult;\r\n            }\r\n            return;\r\n        }\r\n        else {\r\n            handleSetupResult(instance, setupResult, parentSuspense);\r\n        }\r\n    }\r\n    else {\r\n        finishComponentSetup(instance, parentSuspense);\r\n    }\r\n}\r\nfunction handleSetupResult(instance, setupResult, parentSuspense) {\r\n    if (isFunction(setupResult)) {\r\n        // setup returned an inline render function\r\n        instance.render = setupResult;\r\n    }\r\n    else if (isObject(setupResult)) {\r\n        if ( isVNode(setupResult)) {\r\n            warn(`setup() should not return VNodes directly - ` +\r\n                `return a render function instead.`);\r\n        }\r\n        // setup returned bindings.\r\n        // assuming a render function compiled from template is present.\r\n        instance.renderContext = reactive(setupResult);\r\n    }\r\n    else if ( setupResult !== undefined) {\r\n        warn(`setup() should return an object. Received: ${setupResult === null ? 'null' : typeof setupResult}`);\r\n    }\r\n    finishComponentSetup(instance, parentSuspense);\r\n}\r\nlet compile$1;\r\nfunction registerRuntimeCompiler(_compile) {\r\n    compile$1 = _compile;\r\n}\r\nfunction finishComponentSetup(instance, parentSuspense) {\r\n    const Component = instance.type;\r\n    if (!instance.render) {\r\n        if ( Component.template && !Component.render) {\r\n            // true ensures `compile` is provided\r\n            Component.render = compile$1(Component.template, {\r\n                isCustomElement: instance.appContext.config.isCustomElement || NO,\r\n                onError(err) {\r\n                    {\r\n                        const message = `Template compilation error: ${err.message}`;\r\n                        const codeFrame = err.loc &&\r\n                            generateCodeFrame(Component.template, err.loc.start.offset, err.loc.end.offset);\r\n                        warn(codeFrame ? `${message}\\n${codeFrame}` : message);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if ( !Component.render) {\r\n            /* istanbul ignore if */\r\n            {\r\n                warn(`Component is missing${ ` template or` } render function.`);\r\n            }\r\n        }\r\n        instance.render = (Component.render || NOOP);\r\n    }\r\n    // support for 2.x options\r\n    {\r\n        currentInstance = instance;\r\n        currentSuspense = parentSuspense;\r\n        applyOptions(instance, Component);\r\n        currentInstance = null;\r\n        currentSuspense = null;\r\n    }\r\n    if (instance.renderContext === EMPTY_OBJ) {\r\n        instance.renderContext = reactive({});\r\n    }\r\n}\r\n// used to identify a setup context proxy\r\nconst SetupProxySymbol = Symbol();\r\nconst SetupProxyHandlers = {};\r\n['attrs', 'slots'].forEach((type) => {\r\n    SetupProxyHandlers[type] = {\r\n        get: (instance, key) => instance[type][key],\r\n        has: (instance, key) => key === SetupProxySymbol || key in instance[type],\r\n        ownKeys: instance => Reflect.ownKeys(instance[type]),\r\n        // this is necessary for ownKeys to work properly\r\n        getOwnPropertyDescriptor: (instance, key) => Reflect.getOwnPropertyDescriptor(instance[type], key),\r\n        set: () => false,\r\n        deleteProperty: () => false\r\n    };\r\n});\r\nfunction createSetupContext(instance) {\r\n    const context = {\r\n        // attrs & slots are non-reactive, but they need to always expose\r\n        // the latest values (instance.xxx may get replaced during updates) so we\r\n        // need to expose them through a proxy\r\n        attrs: new Proxy(instance, SetupProxyHandlers.attrs),\r\n        slots: new Proxy(instance, SetupProxyHandlers.slots),\r\n        emit: instance.emit\r\n    };\r\n    return  Object.freeze(context) ;\r\n}\n\n// record effects created during a component's setup() so that they can be\r\n// stopped when the component unmounts\r\nfunction recordEffect(effect) {\r\n    if (currentInstance) {\r\n        (currentInstance.effects || (currentInstance.effects = [])).push(effect);\r\n    }\r\n}\r\nfunction computed$1(getterOrOptions) {\r\n    const c = computed(getterOrOptions);\r\n    recordEffect(c.effect);\r\n    return c;\r\n}\n\n// Actual implementation\r\nfunction h(type, propsOrChildren, children) {\r\n    if (arguments.length === 2) {\r\n        if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {\r\n            // single vnode without props\r\n            if (isVNode(propsOrChildren)) {\r\n                return createVNode(type, null, [propsOrChildren]);\r\n            }\r\n            // props without children\r\n            return createVNode(type, propsOrChildren);\r\n        }\r\n        else {\r\n            // omit props\r\n            return createVNode(type, null, propsOrChildren);\r\n        }\r\n    }\r\n    else {\r\n        if (isVNode(children)) {\r\n            children = [children];\r\n        }\r\n        return createVNode(type, propsOrChildren, children);\r\n    }\r\n}\n\n// but the flags are also exported as an actual object for external use\r\nconst PublicShapeFlags = {\r\n    ELEMENT: 1 /* ELEMENT */,\r\n    FUNCTIONAL_COMPONENT: 2 /* FUNCTIONAL_COMPONENT */,\r\n    STATEFUL_COMPONENT: 4 /* STATEFUL_COMPONENT */,\r\n    TEXT_CHILDREN: 8 /* TEXT_CHILDREN */,\r\n    ARRAY_CHILDREN: 16 /* ARRAY_CHILDREN */,\r\n    SLOTS_CHILDREN: 32 /* SLOTS_CHILDREN */,\r\n    COMPONENT: 6 /* COMPONENT */\r\n};\n\nfunction resolveComponent(name) {\r\n    return resolveAsset('components', name);\r\n}\r\nfunction resolveDynamicComponent(component) {\r\n    if (!component)\r\n        return;\r\n    if (isString(component)) {\r\n        return resolveAsset('components', component);\r\n    }\r\n    else if (isFunction(component) || isObject(component)) {\r\n        return component;\r\n    }\r\n}\r\nfunction resolveDirective(name) {\r\n    return resolveAsset('directives', name);\r\n}\r\nfunction resolveAsset(type, name) {\r\n    const instance = currentRenderingInstance || currentInstance;\r\n    if (instance) {\r\n        let camelized;\r\n        const registry = instance[type];\r\n        const res = registry[name] ||\r\n            registry[(camelized = camelize(name))] ||\r\n            registry[capitalize(camelized)];\r\n        if ( !res) {\r\n            warn(`Failed to resolve ${type.slice(0, -1)}: ${name}`);\r\n        }\r\n        return res;\r\n    }\r\n    else {\r\n        warn(`resolve${capitalize(type.slice(0, -1))} ` +\r\n            `can only be used in render() or setup().`);\r\n    }\r\n}\n\nfunction renderList(source, renderItem) {\r\n    let ret;\r\n    if (isArray(source) || isString(source)) {\r\n        ret = new Array(source.length);\r\n        for (let i = 0, l = source.length; i < l; i++) {\r\n            ret[i] = renderItem(source[i], i);\r\n        }\r\n    }\r\n    else if (typeof source === 'number') {\r\n        ret = new Array(source);\r\n        for (let i = 0; i < source; i++) {\r\n            ret[i] = renderItem(i + 1, i);\r\n        }\r\n    }\r\n    else if (isObject(source)) {\r\n        if (source[Symbol.iterator]) {\r\n            ret = Array.from(source, renderItem);\r\n        }\r\n        else {\r\n            const keys = Object.keys(source);\r\n            ret = new Array(keys.length);\r\n            for (let i = 0, l = keys.length; i < l; i++) {\r\n                const key = keys[i];\r\n                ret[i] = renderItem(source[key], key, i);\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\n\n// for converting {{ interpolation }} values to displayed strings.\r\nfunction toString(val) {\r\n    return val == null\r\n        ? ''\r\n        : isArray(val) || (isPlainObject(val) && val.toString === objectToString)\r\n            ? JSON.stringify(val, null, 2)\r\n            : String(val);\r\n}\n\n// For prefixing keys in v-on=\"obj\" with \"on\"\r\nfunction toHandlers(obj) {\r\n    const ret = {};\r\n    if ( !isObject(obj)) {\r\n        warn(`v-on with no argument expects an object value.`);\r\n        return ret;\r\n    }\r\n    for (const key in obj) {\r\n        ret[`on${key}`] = obj[key];\r\n    }\r\n    return ret;\r\n}\n\nfunction renderSlot(slots, name, props = {}, \r\n// this is not a user-facing function, so the fallback is always generated by\r\n// the compiler and guaranteed to be an array\r\nfallback) {\r\n    const slot = slots[name];\r\n    return (openBlock(),\r\n        createBlock(Fragment, { key: props.key }, slot ? slot(props) : fallback || [], slots._compiled ? 0 : -1 /* BAIL */));\r\n}\n\nfunction createSlots(slots, dynamicSlots) {\r\n    for (let i = 0; i < dynamicSlots.length; i++) {\r\n        const slot = dynamicSlots[i];\r\n        // array of dynamic slot generated by <template v-for=\"...\" #[...]>\r\n        if (isArray(slot)) {\r\n            for (let j = 0; j < slot.length; j++) {\r\n                slots[slot[j].name] = slot[j].fn;\r\n            }\r\n        }\r\n        else {\r\n            // conditional single slot generated by <template v-if=\"...\" #foo>\r\n            slots[slot.name] = slot.fn;\r\n        }\r\n    }\r\n    return slots;\r\n}\n\n// Public API ------------------------------------------------------------------\r\nconst version = \"3.0.0-alpha.1\";\n\nconst doc = document;\r\nconst svgNS = 'http://www.w3.org/2000/svg';\r\nconst nodeOps = {\r\n    insert: (child, parent, anchor) => {\r\n        if (anchor != null) {\r\n            parent.insertBefore(child, anchor);\r\n        }\r\n        else {\r\n            parent.appendChild(child);\r\n        }\r\n    },\r\n    remove: (child) => {\r\n        const parent = child.parentNode;\r\n        if (parent != null) {\r\n            parent.removeChild(child);\r\n        }\r\n    },\r\n    createElement: (tag, isSVG) => isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag),\r\n    createText: (text) => doc.createTextNode(text),\r\n    createComment: (text) => doc.createComment(text),\r\n    setText: (node, text) => {\r\n        node.nodeValue = text;\r\n    },\r\n    setElementText: (el, text) => {\r\n        el.textContent = text;\r\n    },\r\n    parentNode: (node) => node.parentNode,\r\n    nextSibling: (node) => node.nextSibling,\r\n    querySelector: (selector) => doc.querySelector(selector)\r\n};\n\n// compiler should normalize class + :class bindings on the same element\r\n// into a single binding ['staticClass', dynamic]\r\nfunction patchClass(el, value, isSVG) {\r\n    // directly setting className should be faster than setAttribute in theory\r\n    if (isSVG) {\r\n        el.setAttribute('class', value);\r\n    }\r\n    else {\r\n        el.className = value;\r\n    }\r\n}\n\nfunction patchStyle(el, prev, next) {\r\n    const style = el.style;\r\n    if (!next) {\r\n        el.removeAttribute('style');\r\n    }\r\n    else if (isString(next)) {\r\n        style.cssText = next;\r\n    }\r\n    else {\r\n        for (const key in next) {\r\n            style[key] = next[key];\r\n        }\r\n        if (prev && !isString(prev)) {\r\n            for (const key in prev) {\r\n                if (!next[key]) {\r\n                    style[key] = '';\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n\nfunction patchAttr(el, key, value) {\r\n    if (value == null) {\r\n        el.removeAttribute(key);\r\n    }\r\n    else {\r\n        el.setAttribute(key, value);\r\n    }\r\n}\n\nfunction patchDOMProp(el, key, value, \r\n// the following args are passed only due to potential innerHTML/textContent\r\n// overriding existing VNodes, in which case the old tree must be properly\r\n// unmounted.\r\nprevChildren, parentComponent, parentSuspense, unmountChildren) {\r\n    if ((key === 'innerHTML' || key === 'textContent') && prevChildren != null) {\r\n        unmountChildren(prevChildren, parentComponent, parentSuspense);\r\n    }\r\n    if (key === 'value' && el.tagName !== 'PROGRESS') {\r\n        // store value as _value as well since\r\n        // non-string values will be stringified.\r\n        el._value = value;\r\n    }\r\n    if (value === '' && typeof el[key] === 'boolean') {\r\n        // e.g. <select multiple> compiles to { multiple: '' }\r\n        el[key] = true;\r\n    }\r\n    else {\r\n        el[key] = value == null ? '' : value;\r\n    }\r\n}\n\n// Async edge case fix requires storing an event listener's attach timestamp.\r\nlet _getNow = Date.now;\r\n// Determine what event timestamp the browser is using. Annoyingly, the\r\n// timestamp can either be hi-res ( relative to page load) or low-res\r\n// (relative to UNIX epoch), so in order to compare time we have to use the\r\n// same timestamp type when saving the flush timestamp.\r\nif (typeof document !== 'undefined' &&\r\n    _getNow() > document.createEvent('Event').timeStamp) {\r\n    // if the low-res timestamp which is bigger than the event timestamp\r\n    // (which is evaluated AFTER) it means the event is using a hi-res timestamp,\r\n    // and we need to use the hi-res version for event listeners as well.\r\n    _getNow = () => performance.now();\r\n}\r\n// To avoid the overhead of repeatedly calling performance.now(), we cache\r\n// and use the same timestamp for all event listeners attached in the same tick.\r\nlet cachedNow = 0;\r\nconst p$1 = Promise.resolve();\r\nconst reset = () => {\r\n    cachedNow = 0;\r\n};\r\nconst getNow = () => cachedNow || (p$1.then(reset), (cachedNow = _getNow()));\r\nfunction addEventListener(el, event, handler, options) {\r\n    el.addEventListener(event, handler, options);\r\n}\r\nfunction removeEventListener(el, event, handler, options) {\r\n    el.removeEventListener(event, handler, options);\r\n}\r\nfunction patchEvent(el, name, prevValue, nextValue, instance = null) {\r\n    const prevOptions = prevValue && 'options' in prevValue && prevValue.options;\r\n    const nextOptions = nextValue && 'options' in nextValue && nextValue.options;\r\n    const invoker = prevValue && prevValue.invoker;\r\n    const value = nextValue && 'handler' in nextValue ? nextValue.handler : nextValue;\r\n    if (prevOptions || nextOptions) {\r\n        const prev = prevOptions || EMPTY_OBJ;\r\n        const next = nextOptions || EMPTY_OBJ;\r\n        if (prev.capture !== next.capture ||\r\n            prev.passive !== next.passive ||\r\n            prev.once !== next.once) {\r\n            if (invoker) {\r\n                removeEventListener(el, name, invoker, prev);\r\n            }\r\n            if (nextValue && value) {\r\n                const invoker = createInvoker(value, instance);\r\n                nextValue.invoker = invoker;\r\n                addEventListener(el, name, invoker, next);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    if (nextValue && value) {\r\n        if (invoker) {\r\n            prevValue.invoker = null;\r\n            invoker.value = value;\r\n            nextValue.invoker = invoker;\r\n            invoker.lastUpdated = getNow();\r\n        }\r\n        else {\r\n            addEventListener(el, name, createInvoker(value, instance), nextOptions || void 0);\r\n        }\r\n    }\r\n    else if (invoker) {\r\n        removeEventListener(el, name, invoker, prevOptions || void 0);\r\n    }\r\n}\r\nfunction createInvoker(initialValue, instance) {\r\n    const invoker = (e) => {\r\n        // async edge case #6566: inner click event triggers patch, event handler\r\n        // attached to outer element during patch, and triggered again. This\r\n        // happens because browsers fire microtask ticks between event propagation.\r\n        // the solution is simple: we save the timestamp when a handler is attached,\r\n        // and the handler would only fire if the event passed to it was fired\r\n        // AFTER it was attached.\r\n        if (e.timeStamp >= invoker.lastUpdated - 1) {\r\n            callWithAsyncErrorHandling(invoker.value, instance, 5 /* NATIVE_EVENT_HANDLER */, [e]);\r\n        }\r\n    };\r\n    invoker.value = initialValue;\r\n    initialValue.invoker = invoker;\r\n    invoker.lastUpdated = getNow();\r\n    return invoker;\r\n}\n\nfunction patchProp(el, key, nextValue, prevValue, isSVG, prevChildren, parentComponent, parentSuspense, unmountChildren) {\r\n    switch (key) {\r\n        // special\r\n        case 'class':\r\n            patchClass(el, nextValue, isSVG);\r\n            break;\r\n        case 'style':\r\n            patchStyle(el, prevValue, nextValue);\r\n            break;\r\n        case 'modelValue':\r\n        case 'onUpdate:modelValue':\r\n            // Do nothing. This is handled by v-model directives.\r\n            break;\r\n        default:\r\n            if (isOn(key)) {\r\n                patchEvent(el, key.slice(2).toLowerCase(), prevValue, nextValue, parentComponent);\r\n            }\r\n            else if (!isSVG && key in el) {\r\n                patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);\r\n            }\r\n            else {\r\n                patchAttr(el, key, nextValue);\r\n            }\r\n            break;\r\n    }\r\n}\n\nconst getModelAssigner = (vnode) => vnode.props['onUpdate:modelValue'];\r\nfunction onCompositionStart(e) {\r\n    e.target.composing = true;\r\n}\r\nfunction onCompositionEnd(e) {\r\n    const target = e.target;\r\n    if (target.composing) {\r\n        target.composing = false;\r\n        trigger$1(target, 'input');\r\n    }\r\n}\r\nfunction trigger$1(el, type) {\r\n    const e = document.createEvent('HTMLEvents');\r\n    e.initEvent(type, true, true);\r\n    el.dispatchEvent(e);\r\n}\r\nfunction toNumber(val) {\r\n    const n = parseFloat(val);\r\n    return isNaN(n) ? val : n;\r\n}\r\n// We are exporting the v-model runtime directly as vnode hooks so that it can\r\n// be tree-shaken in case v-model is never used.\r\nconst vModelText = {\r\n    beforeMount(el, { value, modifiers: { lazy, trim, number } }, vnode) {\r\n        el.value = value;\r\n        const assign = getModelAssigner(vnode);\r\n        const castToNumber = number || el.type === 'number';\r\n        addEventListener(el, lazy ? 'change' : 'input', () => {\r\n            let domValue = el.value;\r\n            if (trim) {\r\n                domValue = domValue.trim();\r\n            }\r\n            else if (castToNumber) {\r\n                domValue = toNumber(domValue);\r\n            }\r\n            assign(domValue);\r\n        });\r\n        if (trim) {\r\n            addEventListener(el, 'change', () => {\r\n                el.value = el.value.trim();\r\n            });\r\n        }\r\n        if (!lazy) {\r\n            addEventListener(el, 'compositionstart', onCompositionStart);\r\n            addEventListener(el, 'compositionend', onCompositionEnd);\r\n            // Safari < 10.2 & UIWebView doesn't fire compositionend when\r\n            // switching focus before confirming composition choice\r\n            // this also fixes the issue where some browsers e.g. iOS Chrome\r\n            // fires \"change\" instead of \"input\" on autocomplete.\r\n            addEventListener(el, 'change', onCompositionEnd);\r\n        }\r\n    },\r\n    beforeUpdate(el, { value, modifiers: { trim, number } }) {\r\n        if (document.activeElement === el) {\r\n            if (trim && el.value.trim() === value) {\r\n                return;\r\n            }\r\n            if ((number || el.type === 'number') && toNumber(el.value) === value) {\r\n                return;\r\n            }\r\n        }\r\n        el.value = value;\r\n    }\r\n};\r\nconst vModelCheckbox = {\r\n    beforeMount(el, binding, vnode) {\r\n        setChecked(el, binding, vnode);\r\n        const assign = getModelAssigner(vnode);\r\n        addEventListener(el, 'change', () => {\r\n            const modelValue = el._modelValue;\r\n            const elementValue = getValue(el);\r\n            const checked = el.checked;\r\n            if (isArray(modelValue)) {\r\n                const index = looseIndexOf(modelValue, elementValue);\r\n                const found = index !== -1;\r\n                if (checked && !found) {\r\n                    assign(modelValue.concat(elementValue));\r\n                }\r\n                else if (!checked && found) {\r\n                    const filtered = [...modelValue];\r\n                    filtered.splice(index, 1);\r\n                    assign(filtered);\r\n                }\r\n            }\r\n            else {\r\n                assign(checked);\r\n            }\r\n        });\r\n    },\r\n    beforeUpdate: setChecked\r\n};\r\nfunction setChecked(el, { value }, vnode) {\r\n    el._modelValue = value;\r\n    el.checked = isArray(value)\r\n        ? looseIndexOf(value, vnode.props.value) > -1\r\n        : !!value;\r\n}\r\nconst vModelRadio = {\r\n    beforeMount(el, { value }, vnode) {\r\n        el.checked = looseEqual(value, vnode.props.value);\r\n        const assign = getModelAssigner(vnode);\r\n        addEventListener(el, 'change', () => {\r\n            assign(getValue(el));\r\n        });\r\n    },\r\n    beforeUpdate(el, { value }, vnode) {\r\n        el.checked = looseEqual(value, vnode.props.value);\r\n    }\r\n};\r\nconst vModelSelect = {\r\n    // use mounted & updated because <select> relies on its children <option>s.\r\n    mounted(el, { value }, vnode) {\r\n        setSelected(el, value);\r\n        const assign = getModelAssigner(vnode);\r\n        addEventListener(el, 'change', () => {\r\n            const selectedVal = Array.prototype.filter\r\n                .call(el.options, (o) => o.selected)\r\n                .map(getValue);\r\n            assign(el.multiple ? selectedVal : selectedVal[0]);\r\n        });\r\n    },\r\n    updated(el, { value }) {\r\n        setSelected(el, value);\r\n    }\r\n};\r\nfunction setSelected(el, value) {\r\n    const isMultiple = el.multiple;\r\n    if (isMultiple && !isArray(value)) {\r\n        \r\n            warn(`<select multiple v-model> expects an Array value for its binding, ` +\r\n                `but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);\r\n        return;\r\n    }\r\n    for (let i = 0, l = el.options.length; i < l; i++) {\r\n        const option = el.options[i];\r\n        const optionValue = getValue(option);\r\n        if (isMultiple) {\r\n            option.selected = looseIndexOf(value, optionValue) > -1;\r\n        }\r\n        else {\r\n            if (looseEqual(getValue(option), value)) {\r\n                el.selectedIndex = i;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    if (!isMultiple) {\r\n        el.selectedIndex = -1;\r\n    }\r\n}\r\nfunction looseEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    const isObjectA = isObject(a);\r\n    const isObjectB = isObject(b);\r\n    if (isObjectA && isObjectB) {\r\n        try {\r\n            const isArrayA = isArray(a);\r\n            const isArrayB = isArray(b);\r\n            if (isArrayA && isArrayB) {\r\n                return (a.length === b.length &&\r\n                    a.every((e, i) => looseEqual(e, b[i])));\r\n            }\r\n            else if (a instanceof Date && b instanceof Date) {\r\n                return a.getTime() === b.getTime();\r\n            }\r\n            else if (!isArrayA && !isArrayB) {\r\n                const keysA = Object.keys(a);\r\n                const keysB = Object.keys(b);\r\n                return (keysA.length === keysB.length &&\r\n                    keysA.every(key => looseEqual(a[key], b[key])));\r\n            }\r\n            else {\r\n                /* istanbul ignore next */\r\n                return false;\r\n            }\r\n        }\r\n        catch (e) {\r\n            /* istanbul ignore next */\r\n            return false;\r\n        }\r\n    }\r\n    else if (!isObjectA && !isObjectB) {\r\n        return String(a) === String(b);\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n}\r\nfunction looseIndexOf(arr, val) {\r\n    return arr.findIndex(item => looseEqual(item, val));\r\n}\r\n// retrieve raw value set via :value bindings\r\nfunction getValue(el) {\r\n    return '_value' in el ? el._value : el.value;\r\n}\r\nconst vModelDynamic = {\r\n    beforeMount(el, binding, vnode) {\r\n        callModelHook(el, binding, vnode, null, 'beforeMount');\r\n    },\r\n    mounted(el, binding, vnode) {\r\n        callModelHook(el, binding, vnode, null, 'mounted');\r\n    },\r\n    beforeUpdate(el, binding, vnode, prevVNode) {\r\n        callModelHook(el, binding, vnode, prevVNode, 'beforeUpdate');\r\n    },\r\n    updated(el, binding, vnode, prevVNode) {\r\n        callModelHook(el, binding, vnode, prevVNode, 'updated');\r\n    }\r\n};\r\nfunction callModelHook(el, binding, vnode, prevVNode, hook) {\r\n    let modelToUse;\r\n    switch (el.tagName) {\r\n        case 'SELECT':\r\n            modelToUse = vModelSelect;\r\n            break;\r\n        case 'TEXTAREA':\r\n            modelToUse = vModelText;\r\n            break;\r\n        default:\r\n            switch (el.type) {\r\n                case 'checkbox':\r\n                    modelToUse = vModelCheckbox;\r\n                    break;\r\n                case 'radio':\r\n                    modelToUse = vModelRadio;\r\n                    break;\r\n                default:\r\n                    modelToUse = vModelText;\r\n            }\r\n    }\r\n    const fn = modelToUse[hook];\r\n    fn && fn(el, binding, vnode, prevVNode);\r\n}\n\nconst systemModifiers = ['ctrl', 'shift', 'alt', 'meta'];\r\nconst modifierGuards = {\r\n    stop: e => e.stopPropagation(),\r\n    prevent: e => e.preventDefault(),\r\n    self: e => e.target !== e.currentTarget,\r\n    ctrl: e => !e.ctrlKey,\r\n    shift: e => !e.shiftKey,\r\n    alt: e => !e.altKey,\r\n    meta: e => !e.metaKey,\r\n    left: e => 'button' in e && e.button !== 0,\r\n    middle: e => 'button' in e && e.button !== 1,\r\n    right: e => 'button' in e && e.button !== 2,\r\n    exact: (e, modifiers) => systemModifiers.some(m => e[`${m}Key`] && !modifiers.includes(m))\r\n};\r\nconst withModifiers = (fn, modifiers) => {\r\n    return (event) => {\r\n        for (let i = 0; i < modifiers.length; i++) {\r\n            const guard = modifierGuards[modifiers[i]];\r\n            if (guard && guard(event, modifiers))\r\n                return;\r\n        }\r\n        return fn(event);\r\n    };\r\n};\r\n// Kept for 2.x compat.\r\n// Note: IE11 compat for `spacebar` and `del` is removed for now.\r\nconst keyNames = {\r\n    esc: 'escape',\r\n    space: ' ',\r\n    up: 'arrowup',\r\n    left: 'arrowleft',\r\n    right: 'arrowright',\r\n    down: 'arrowdown',\r\n    delete: 'backspace'\r\n};\r\nconst withKeys = (fn, modifiers) => {\r\n    return (event) => {\r\n        if (!('key' in event))\r\n            return;\r\n        const eventKey = event.key.toLowerCase();\r\n        if (\r\n        // None of the provided key modifiers match the current event key\r\n        !modifiers.some(k => k === eventKey || keyNames[k] === eventKey)) {\r\n            return;\r\n        }\r\n        return fn(event);\r\n    };\r\n};\n\nconst { render, createApp: baseCreateApp } = createRenderer({\r\n    patchProp,\r\n    ...nodeOps\r\n});\r\nconst createApp = () => {\r\n    const app = baseCreateApp();\r\n    {\r\n        // Inject `isNativeTag`\r\n        // this is used for component name validation (dev only)\r\n        Object.defineProperty(app.config, 'isNativeTag', {\r\n            value: (tag) => isHTMLTag(tag) || isSVGTag(tag),\r\n            writable: false\r\n        });\r\n    }\r\n    const mount = app.mount;\r\n    app.mount = (component, container, props) => {\r\n        if (isString(container)) {\r\n            container = document.querySelector(container);\r\n            if (!container) {\r\n                \r\n                    warn(`Failed to mount app: mount target selector returned null.`);\r\n                return;\r\n            }\r\n        }\r\n        if (\r\n            !isFunction(component) &&\r\n            !component.render &&\r\n            !component.template) {\r\n            component.template = container.innerHTML;\r\n        }\r\n        // clear content before mounting\r\n        container.innerHTML = '';\r\n        return mount(component, container, props);\r\n    };\r\n    return app;\r\n};\n\nvar runtimeDom = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  render: render,\n  createApp: createApp,\n  vModelText: vModelText,\n  vModelCheckbox: vModelCheckbox,\n  vModelRadio: vModelRadio,\n  vModelSelect: vModelSelect,\n  vModelDynamic: vModelDynamic,\n  withModifiers: withModifiers,\n  withKeys: withKeys,\n  version: version,\n  createComponent: createComponent,\n  nextTick: nextTick,\n  h: h,\n  createVNode: createVNode,\n  cloneVNode: cloneVNode,\n  mergeProps: mergeProps,\n  openBlock: openBlock,\n  createBlock: createBlock,\n  Text: Text,\n  Comment: Comment,\n  Fragment: Fragment,\n  Portal: Portal,\n  Suspense: Suspense,\n  ShapeFlags: PublicShapeFlags,\n  PatchFlags: PublicPatchFlags,\n  getCurrentInstance: getCurrentInstance,\n  createRenderer: createRenderer,\n  warn: warn,\n  handleError: handleError,\n  callWithErrorHandling: callWithErrorHandling,\n  callWithAsyncErrorHandling: callWithAsyncErrorHandling,\n  withDirectives: withDirectives,\n  resolveComponent: resolveComponent,\n  resolveDirective: resolveDirective,\n  resolveDynamicComponent: resolveDynamicComponent,\n  renderList: renderList,\n  toString: toString,\n  toHandlers: toHandlers,\n  renderSlot: renderSlot,\n  createSlots: createSlots,\n  setBlockTracking: setBlockTracking,\n  createTextVNode: createTextVNode,\n  createCommentVNode: createCommentVNode,\n  capitalize: capitalize,\n  camelize: camelize,\n  registerRuntimeCompiler: registerRuntimeCompiler,\n  recordEffect: recordEffect,\n  computed: computed$1,\n  ref: ref,\n  isRef: isRef,\n  toRefs: toRefs,\n  reactive: reactive,\n  isReactive: isReactive,\n  readonly: readonly,\n  isReadonly: isReadonly,\n  toRaw: toRaw,\n  markReadonly: markReadonly,\n  markNonReactive: markNonReactive,\n  effect: effect,\n  watch: watch,\n  instanceWatch: instanceWatch,\n  onBeforeMount: onBeforeMount,\n  onMounted: onMounted,\n  onBeforeUpdate: onBeforeUpdate,\n  onUpdated: onUpdated,\n  onBeforeUnmount: onBeforeUnmount,\n  onUnmounted: onUnmounted,\n  onRenderTriggered: onRenderTriggered,\n  onRenderTracked: onRenderTracked,\n  onErrorCaptured: onErrorCaptured,\n  provide: provide,\n  inject: inject\n});\n\n// This package is the \"full-build\" that includes both the runtime\r\nfunction compileToFunction(template, options) {\r\n    const { code } = compile(template, {\r\n        hoistStatic: true,\r\n        ...options\r\n    });\r\n    return new Function('Vue', code)(runtimeDom);\r\n}\r\nregisterRuntimeCompiler(compileToFunction);\r\n{\r\n    console[console.info ? 'info' : 'log'](`You are running a development build of Vue.\\n` +\r\n        `Make sure to use the production build (*.prod.js) when deploying for production.`);\r\n}\n\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/vue-next/packages/vue/dist/vue.esm-browser.js?");

/***/ })

/******/ });